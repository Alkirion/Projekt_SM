
SM-PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08009a78  08009a78  0000aa78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e18  08009e18  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e18  08009e18  0000ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e20  08009e20  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e20  08009e20  0000ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e24  08009e24  0000ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009e28  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  200001e0  0800a008  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  0800a008  0000ba58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016183  00000000  00000000  0000b20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da9  00000000  00000000  00021391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00024140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f00  00000000  00000000  000254a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287b7  00000000  00000000  000263a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d25  00000000  00000000  0004eb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8875  00000000  00000000  0006687c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0015f0f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000641c  00000000  00000000  0015f1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001655c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0016562e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a60 	.word	0x08009a60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009a60 	.word	0x08009a60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000f86:	7b3b      	ldrb	r3, [r7, #12]
 8000f88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2110      	movs	r1, #16
 8000f94:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <BMP280_Read8+0x4c>)
 8000f96:	f001 ff01 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <BMP280_Read8+0x50>)
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	f107 010c 	add.w	r1, r7, #12
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2302      	movs	r3, #2
 8000fac:	f003 f9bf 	bl	800432e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <BMP280_Read8+0x4c>)
 8000fb6:	f001 fef1 	bl	8002d9c <HAL_GPIO_WritePin>
	return tmp[1];
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	200001fc 	.word	0x200001fc

08000fcc <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000fda:	7b3b      	ldrb	r3, [r7, #12]
 8000fdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	480f      	ldr	r0, [pc, #60]	@ (8001028 <BMP280_Read16+0x5c>)
 8000fea:	f001 fed7 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <BMP280_Read16+0x60>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	f107 020c 	add.w	r2, r7, #12
 8000ff6:	f107 010c 	add.w	r1, r7, #12
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2303      	movs	r3, #3
 8001000:	f003 f995 	bl	800432e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2110      	movs	r1, #16
 8001008:	4807      	ldr	r0, [pc, #28]	@ (8001028 <BMP280_Read16+0x5c>)
 800100a:	f001 fec7 	bl	8002d9c <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29b      	uxth	r3, r3
#endif
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020000 	.word	0x40020000
 800102c:	200001fc 	.word	0x200001fc

08001030 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffc5 	bl	8000fcc <BMP280_Read16>
 8001042:	4603      	mov	r3, r0
 8001044:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b21a      	sxth	r2, r3
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21b      	sxth	r3, r3
 8001058:	b29b      	uxth	r3, r3
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800107e:	b2db      	uxtb	r3, r3
 8001080:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2110      	movs	r1, #16
 800108a:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <BMP280_Write8+0x54>)
 800108c:	f001 fe86 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <BMP280_Write8+0x58>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	f107 010c 	add.w	r1, r7, #12
 800109c:	230a      	movs	r3, #10
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2302      	movs	r3, #2
 80010a2:	f003 f944 	bl	800432e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <BMP280_Write8+0x54>)
 80010ac:	f001 fe76 	bl	8002d9c <HAL_GPIO_WritePin>
#endif
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020000 	.word	0x40020000
 80010bc:	200001fc 	.word	0x200001fc

080010c0 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010ce:	7b3b      	ldrb	r3, [r7, #12]
 80010d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2110      	movs	r1, #16
 80010dc:	480e      	ldr	r0, [pc, #56]	@ (8001118 <BMP280_Read24+0x58>)
 80010de:	f001 fe5d 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <BMP280_Read24+0x5c>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f107 010c 	add.w	r1, r7, #12
 80010ee:	230a      	movs	r3, #10
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2303      	movs	r3, #3
 80010f4:	f003 f91b 	bl	800432e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	4806      	ldr	r0, [pc, #24]	@ (8001118 <BMP280_Read24+0x58>)
 80010fe:	f001 fe4d 	bl	8002d9c <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	041a      	lsls	r2, r3, #16
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	4313      	orrs	r3, r2
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	4313      	orrs	r3, r2
#endif
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40020000 	.word	0x40020000
 800111c:	200001fc 	.word	0x200001fc

08001120 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4603      	mov	r3, r0
 8001130:	70fb      	strb	r3, [r7, #3]
 8001132:	460b      	mov	r3, r1
 8001134:	70bb      	strb	r3, [r7, #2]
 8001136:	4613      	mov	r3, r2
 8001138:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 800113a:	4a4e      	ldr	r2, [pc, #312]	@ (8001274 <BMP280_Init+0x154>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2110      	movs	r1, #16
 8001144:	484c      	ldr	r0, [pc, #304]	@ (8001278 <BMP280_Init+0x158>)
 8001146:	f001 fe29 	bl	8002d9c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800114a:	2005      	movs	r0, #5
 800114c:	f001 fb70 	bl	8002830 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2110      	movs	r1, #16
 8001154:	4848      	ldr	r0, [pc, #288]	@ (8001278 <BMP280_Init+0x158>)
 8001156:	f001 fe21 	bl	8002d9c <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 800115a:	787b      	ldrb	r3, [r7, #1]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d901      	bls.n	8001164 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8001160:	2303      	movs	r3, #3
 8001162:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001164:	4a45      	ldr	r2, [pc, #276]	@ (800127c <BMP280_Init+0x15c>)
 8001166:	787b      	ldrb	r3, [r7, #1]
 8001168:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800116a:	787b      	ldrb	r3, [r7, #1]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8001170:	2300      	movs	r3, #0
 8001172:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2b05      	cmp	r3, #5
 8001178:	d901      	bls.n	800117e <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800117a:	2305      	movs	r3, #5
 800117c:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800117e:	4a40      	ldr	r2, [pc, #256]	@ (8001280 <BMP280_Init+0x160>)
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001184:	78bb      	ldrb	r3, [r7, #2]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d901      	bls.n	800118e <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800118a:	2305      	movs	r3, #5
 800118c:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 800118e:	4a3d      	ldr	r2, [pc, #244]	@ (8001284 <BMP280_Init+0x164>)
 8001190:	78bb      	ldrb	r3, [r7, #2]
 8001192:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001194:	bf00      	nop
 8001196:	20d0      	movs	r0, #208	@ 0xd0
 8001198:	f7ff feee 	bl	8000f78 <BMP280_Read8>
 800119c:	4603      	mov	r3, r0
 800119e:	2b58      	cmp	r3, #88	@ 0x58
 80011a0:	d1f9      	bne.n	8001196 <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011a2:	2088      	movs	r0, #136	@ 0x88
 80011a4:	f7ff ff44 	bl	8001030 <BMP280_Read16LE>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <BMP280_Init+0x168>)
 80011ae:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011b0:	208a      	movs	r0, #138	@ 0x8a
 80011b2:	f7ff ff3d 	bl	8001030 <BMP280_Read16LE>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <BMP280_Init+0x16c>)
 80011bc:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011be:	208c      	movs	r0, #140	@ 0x8c
 80011c0:	f7ff ff36 	bl	8001030 <BMP280_Read16LE>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <BMP280_Init+0x170>)
 80011ca:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011cc:	208e      	movs	r0, #142	@ 0x8e
 80011ce:	f7ff ff2f 	bl	8001030 <BMP280_Read16LE>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <BMP280_Init+0x174>)
 80011d8:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011da:	2090      	movs	r0, #144	@ 0x90
 80011dc:	f7ff ff28 	bl	8001030 <BMP280_Read16LE>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <BMP280_Init+0x178>)
 80011e6:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80011e8:	2092      	movs	r0, #146	@ 0x92
 80011ea:	f7ff ff21 	bl	8001030 <BMP280_Read16LE>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <BMP280_Init+0x17c>)
 80011f4:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80011f6:	2094      	movs	r0, #148	@ 0x94
 80011f8:	f7ff ff1a 	bl	8001030 <BMP280_Read16LE>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b21a      	sxth	r2, r3
 8001200:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <BMP280_Init+0x180>)
 8001202:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001204:	2096      	movs	r0, #150	@ 0x96
 8001206:	f7ff ff13 	bl	8001030 <BMP280_Read16LE>
 800120a:	4603      	mov	r3, r0
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <BMP280_Init+0x184>)
 8001210:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001212:	2098      	movs	r0, #152	@ 0x98
 8001214:	f7ff ff0c 	bl	8001030 <BMP280_Read16LE>
 8001218:	4603      	mov	r3, r0
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <BMP280_Init+0x188>)
 800121e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001220:	209a      	movs	r0, #154	@ 0x9a
 8001222:	f7ff ff05 	bl	8001030 <BMP280_Read16LE>
 8001226:	4603      	mov	r3, r0
 8001228:	b21a      	sxth	r2, r3
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <BMP280_Init+0x18c>)
 800122c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800122e:	209c      	movs	r0, #156	@ 0x9c
 8001230:	f7ff fefe 	bl	8001030 <BMP280_Read16LE>
 8001234:	4603      	mov	r3, r0
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <BMP280_Init+0x190>)
 800123a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800123c:	209e      	movs	r0, #158	@ 0x9e
 800123e:	f7ff fef7 	bl	8001030 <BMP280_Read16LE>
 8001242:	4603      	mov	r3, r0
 8001244:	b21a      	sxth	r2, r3
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <BMP280_Init+0x194>)
 8001248:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	015b      	lsls	r3, r3, #5
 800124e:	b25a      	sxtb	r2, r3
 8001250:	78bb      	ldrb	r3, [r7, #2]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	b25b      	sxtb	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b25a      	sxtb	r2, r3
 800125a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800125e:	4313      	orrs	r3, r2
 8001260:	b25b      	sxtb	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4619      	mov	r1, r3
 8001266:	20f4      	movs	r0, #244	@ 0xf4
 8001268:	f7ff fefc 	bl	8001064 <BMP280_Write8>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200001fc 	.word	0x200001fc
 8001278:	40020000 	.word	0x40020000
 800127c:	20000202 	.word	0x20000202
 8001280:	20000200 	.word	0x20000200
 8001284:	20000201 	.word	0x20000201
 8001288:	20000218 	.word	0x20000218
 800128c:	20000204 	.word	0x20000204
 8001290:	20000206 	.word	0x20000206
 8001294:	2000021a 	.word	0x2000021a
 8001298:	20000208 	.word	0x20000208
 800129c:	2000020a 	.word	0x2000020a
 80012a0:	2000020c 	.word	0x2000020c
 80012a4:	2000020e 	.word	0x2000020e
 80012a8:	20000210 	.word	0x20000210
 80012ac:	20000212 	.word	0x20000212
 80012b0:	20000214 	.word	0x20000214
 80012b4:	20000216 	.word	0x20000216

080012b8 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012be:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <BMP280_ReadTemperature+0xfc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d16d      	bne.n	80013a2 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012c6:	20f4      	movs	r0, #244	@ 0xf4
 80012c8:	f7ff fe56 	bl	8000f78 <BMP280_Read8>
 80012cc:	4603      	mov	r3, r0
 80012ce:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	f023 0303 	bic.w	r3, r3, #3
 80012d6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	4619      	mov	r1, r3
 80012e4:	20f4      	movs	r0, #244	@ 0xf4
 80012e6:	f7ff febd 	bl	8001064 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80012ea:	20f4      	movs	r0, #244	@ 0xf4
 80012ec:	f7ff fe44 	bl	8000f78 <BMP280_Read8>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80012f4:	7dbb      	ldrb	r3, [r7, #22]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d14f      	bne.n	80013a2 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001302:	20f4      	movs	r0, #244	@ 0xf4
 8001304:	f7ff fe38 	bl	8000f78 <BMP280_Read8>
 8001308:	4603      	mov	r3, r0
 800130a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d000      	beq.n	800131c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800131a:	e7f2      	b.n	8001302 <BMP280_ReadTemperature+0x4a>
				  break;
 800131c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800131e:	20fa      	movs	r0, #250	@ 0xfa
 8001320:	f7ff fece 	bl	80010c0 <BMP280_Read24>
 8001324:	4603      	mov	r3, r0
 8001326:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	111b      	asrs	r3, r3, #4
 800132c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	10da      	asrs	r2, r3, #3
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <BMP280_ReadTemperature+0x100>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800133a:	4a20      	ldr	r2, [pc, #128]	@ (80013bc <BMP280_ReadTemperature+0x104>)
 800133c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	12db      	asrs	r3, r3, #11
 8001346:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	111b      	asrs	r3, r3, #4
 800134c:	4a1a      	ldr	r2, [pc, #104]	@ (80013b8 <BMP280_ReadTemperature+0x100>)
 800134e:	8812      	ldrh	r2, [r2, #0]
 8001350:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	1112      	asrs	r2, r2, #4
 8001356:	4918      	ldr	r1, [pc, #96]	@ (80013b8 <BMP280_ReadTemperature+0x100>)
 8001358:	8809      	ldrh	r1, [r1, #0]
 800135a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800135c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001360:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001362:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <BMP280_ReadTemperature+0x108>)
 8001364:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001368:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800136c:	139b      	asrs	r3, r3, #14
 800136e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4413      	add	r3, r2
 8001376:	4a13      	ldr	r2, [pc, #76]	@ (80013c4 <BMP280_ReadTemperature+0x10c>)
 8001378:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <BMP280_ReadTemperature+0x10c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3380      	adds	r3, #128	@ 0x80
 8001386:	121b      	asrs	r3, r3, #8
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001394:	edd7 7a01 	vldr	s15, [r7, #4]
 8001398:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80013c8 <BMP280_ReadTemperature+0x110>
 800139c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013a0:	e001      	b.n	80013a6 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013a2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80013cc <BMP280_ReadTemperature+0x114>
}
 80013a6:	eef0 7a47 	vmov.f32	s15, s14
 80013aa:	eeb0 0a67 	vmov.f32	s0, s15
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000202 	.word	0x20000202
 80013b8:	20000218 	.word	0x20000218
 80013bc:	20000204 	.word	0x20000204
 80013c0:	20000206 	.word	0x20000206
 80013c4:	2000021c 	.word	0x2000021c
 80013c8:	42c80000 	.word	0x42c80000
 80013cc:	c2c60000 	.word	0xc2c60000

080013d0 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d4:	b0cc      	sub	sp, #304	@ 0x130
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 80013dc:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013e0:	f7ff ff6a 	bl	80012b8 <BMP280_ReadTemperature>
 80013e4:	eef0 7a40 	vmov.f32	s15, s0
 80013e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013ec:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80013f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 80016c8 <BMP280_ReadTemperatureAndPressure+0x2f8>
 80013fc:	eef4 7a47 	vcmp.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d101      	bne.n	800140a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001406:	23ff      	movs	r3, #255	@ 0xff
 8001408:	e2bf      	b.n	800198a <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800140a:	20f7      	movs	r0, #247	@ 0xf7
 800140c:	f7ff fe58 	bl	80010c0 <BMP280_Read24>
 8001410:	4603      	mov	r3, r0
 8001412:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 8001416:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800141a:	111b      	asrs	r3, r3, #4
 800141c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001420:	4baa      	ldr	r3, [pc, #680]	@ (80016cc <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	17da      	asrs	r2, r3, #31
 8001426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800142a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800142e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001432:	460b      	mov	r3, r1
 8001434:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800143a:	4613      	mov	r3, r2
 800143c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001442:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001446:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800144a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800144e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001452:	fb03 f102 	mul.w	r1, r3, r2
 8001456:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800145a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	18ca      	adds	r2, r1, r3
 8001464:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001468:	fba3 4503 	umull	r4, r5, r3, r3
 800146c:	1953      	adds	r3, r2, r5
 800146e:	461d      	mov	r5, r3
 8001470:	4b97      	ldr	r3, [pc, #604]	@ (80016d0 <BMP280_ReadTemperatureAndPressure+0x300>)
 8001472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001476:	b21b      	sxth	r3, r3
 8001478:	17da      	asrs	r2, r3, #31
 800147a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800147e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001482:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001486:	4603      	mov	r3, r0
 8001488:	fb03 f205 	mul.w	r2, r3, r5
 800148c:	460b      	mov	r3, r1
 800148e:	fb04 f303 	mul.w	r3, r4, r3
 8001492:	4413      	add	r3, r2
 8001494:	4602      	mov	r2, r0
 8001496:	fba4 8902 	umull	r8, r9, r4, r2
 800149a:	444b      	add	r3, r9
 800149c:	4699      	mov	r9, r3
 800149e:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 80014a2:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014a6:	4b8b      	ldr	r3, [pc, #556]	@ (80016d4 <BMP280_ReadTemperatureAndPressure+0x304>)
 80014a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	17da      	asrs	r2, r3, #31
 80014b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014bc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80014c0:	462a      	mov	r2, r5
 80014c2:	fb02 f203 	mul.w	r2, r2, r3
 80014c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014ca:	4621      	mov	r1, r4
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	441a      	add	r2, r3
 80014d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014d6:	4621      	mov	r1, r4
 80014d8:	fba3 ab01 	umull	sl, fp, r3, r1
 80014dc:	eb02 030b 	add.w	r3, r2, fp
 80014e0:	469b      	mov	fp, r3
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80014ee:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80014f2:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80014f6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80014fa:	1814      	adds	r4, r2, r0
 80014fc:	643c      	str	r4, [r7, #64]	@ 0x40
 80014fe:	414b      	adcs	r3, r1
 8001500:	647b      	str	r3, [r7, #68]	@ 0x44
 8001502:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001506:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800150a:	4b73      	ldr	r3, [pc, #460]	@ (80016d8 <BMP280_ReadTemperatureAndPressure+0x308>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	b21b      	sxth	r3, r3
 8001512:	17da      	asrs	r2, r3, #31
 8001514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001518:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001528:	00d9      	lsls	r1, r3, #3
 800152a:	2000      	movs	r0, #0
 800152c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001530:	1814      	adds	r4, r2, r0
 8001532:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001534:	414b      	adcs	r3, r1
 8001536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001538:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800153c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001540:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001544:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001548:	fb03 f102 	mul.w	r1, r3, r2
 800154c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001550:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	18ca      	adds	r2, r1, r3
 800155a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800155e:	fba3 1303 	umull	r1, r3, r3, r3
 8001562:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001566:	460b      	mov	r3, r1
 8001568:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800156c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001570:	18d3      	adds	r3, r2, r3
 8001572:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001576:	4b59      	ldr	r3, [pc, #356]	@ (80016dc <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	b21b      	sxth	r3, r3
 800157e:	17da      	asrs	r2, r3, #31
 8001580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001584:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001588:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800158c:	462b      	mov	r3, r5
 800158e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001592:	4642      	mov	r2, r8
 8001594:	fb02 f203 	mul.w	r2, r2, r3
 8001598:	464b      	mov	r3, r9
 800159a:	4621      	mov	r1, r4
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	4622      	mov	r2, r4
 80015a4:	4641      	mov	r1, r8
 80015a6:	fba2 1201 	umull	r1, r2, r2, r1
 80015aa:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80015ae:	460a      	mov	r2, r1
 80015b0:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80015b4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80015b8:	4413      	add	r3, r2
 80015ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015be:	f04f 0000 	mov.w	r0, #0
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015ca:	4623      	mov	r3, r4
 80015cc:	0a18      	lsrs	r0, r3, #8
 80015ce:	462b      	mov	r3, r5
 80015d0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015d4:	462b      	mov	r3, r5
 80015d6:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80015d8:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <BMP280_ReadTemperatureAndPressure+0x310>)
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	17da      	asrs	r2, r3, #31
 80015e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80015f2:	464a      	mov	r2, r9
 80015f4:	fb02 f203 	mul.w	r2, r2, r3
 80015f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015fc:	4644      	mov	r4, r8
 80015fe:	fb04 f303 	mul.w	r3, r4, r3
 8001602:	441a      	add	r2, r3
 8001604:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001608:	4644      	mov	r4, r8
 800160a:	fba3 4304 	umull	r4, r3, r3, r4
 800160e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001612:	4623      	mov	r3, r4
 8001614:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800162e:	464c      	mov	r4, r9
 8001630:	0323      	lsls	r3, r4, #12
 8001632:	4644      	mov	r4, r8
 8001634:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001638:	4644      	mov	r4, r8
 800163a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800163c:	1884      	adds	r4, r0, r2
 800163e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001640:	eb41 0303 	adc.w	r3, r1, r3
 8001644:	637b      	str	r3, [r7, #52]	@ 0x34
 8001646:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800164a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800164e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001652:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001656:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800165a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800165e:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <BMP280_ReadTemperatureAndPressure+0x314>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	2200      	movs	r2, #0
 8001666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800166a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800166e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001672:	462b      	mov	r3, r5
 8001674:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001678:	4642      	mov	r2, r8
 800167a:	fb02 f203 	mul.w	r2, r2, r3
 800167e:	464b      	mov	r3, r9
 8001680:	4621      	mov	r1, r4
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	4413      	add	r3, r2
 8001688:	4622      	mov	r2, r4
 800168a:	4641      	mov	r1, r8
 800168c:	fba2 1201 	umull	r1, r2, r2, r1
 8001690:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001694:	460a      	mov	r2, r1
 8001696:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800169a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800169e:	4413      	add	r3, r2
 80016a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80016b0:	4629      	mov	r1, r5
 80016b2:	104a      	asrs	r2, r1, #1
 80016b4:	4629      	mov	r1, r5
 80016b6:	17cb      	asrs	r3, r1, #31
 80016b8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 80016bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016c0:	4313      	orrs	r3, r2
 80016c2:	d111      	bne.n	80016e8 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 80016c4:	2300      	movs	r3, #0
 80016c6:	e160      	b.n	800198a <BMP280_ReadTemperatureAndPressure+0x5ba>
 80016c8:	c2c60000 	.word	0xc2c60000
 80016cc:	2000021c 	.word	0x2000021c
 80016d0:	20000210 	.word	0x20000210
 80016d4:	2000020e 	.word	0x2000020e
 80016d8:	2000020c 	.word	0x2000020c
 80016dc:	2000020a 	.word	0x2000020a
 80016e0:	20000208 	.word	0x20000208
 80016e4:	2000021a 	.word	0x2000021a
	  }
	  p = 1048576 - adc_P;
 80016e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016ec:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80016f0:	17da      	asrs	r2, r3, #31
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80016fa:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 80016fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001702:	105b      	asrs	r3, r3, #1
 8001704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001708:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800170c:	07db      	lsls	r3, r3, #31
 800170e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001712:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001716:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800171a:	4621      	mov	r1, r4
 800171c:	1a89      	subs	r1, r1, r2
 800171e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001722:	4629      	mov	r1, r5
 8001724:	eb61 0303 	sbc.w	r3, r1, r3
 8001728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800172c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001730:	4622      	mov	r2, r4
 8001732:	462b      	mov	r3, r5
 8001734:	1891      	adds	r1, r2, r2
 8001736:	6239      	str	r1, [r7, #32]
 8001738:	415b      	adcs	r3, r3
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
 800173c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001740:	4621      	mov	r1, r4
 8001742:	1851      	adds	r1, r2, r1
 8001744:	61b9      	str	r1, [r7, #24]
 8001746:	4629      	mov	r1, r5
 8001748:	414b      	adcs	r3, r1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001758:	4649      	mov	r1, r9
 800175a:	018b      	lsls	r3, r1, #6
 800175c:	4641      	mov	r1, r8
 800175e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001762:	4641      	mov	r1, r8
 8001764:	018a      	lsls	r2, r1, #6
 8001766:	4641      	mov	r1, r8
 8001768:	1889      	adds	r1, r1, r2
 800176a:	6139      	str	r1, [r7, #16]
 800176c:	4649      	mov	r1, r9
 800176e:	eb43 0101 	adc.w	r1, r3, r1
 8001772:	6179      	str	r1, [r7, #20]
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001780:	4649      	mov	r1, r9
 8001782:	008b      	lsls	r3, r1, #2
 8001784:	4641      	mov	r1, r8
 8001786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800178a:	4641      	mov	r1, r8
 800178c:	008a      	lsls	r2, r1, #2
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	4603      	mov	r3, r0
 8001794:	4622      	mov	r2, r4
 8001796:	189b      	adds	r3, r3, r2
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	460b      	mov	r3, r1
 800179c:	462a      	mov	r2, r5
 800179e:	eb42 0303 	adc.w	r3, r2, r3
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017b0:	4649      	mov	r1, r9
 80017b2:	008b      	lsls	r3, r1, #2
 80017b4:	4641      	mov	r1, r8
 80017b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017ba:	4641      	mov	r1, r8
 80017bc:	008a      	lsls	r2, r1, #2
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	4622      	mov	r2, r4
 80017c6:	189b      	adds	r3, r3, r2
 80017c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017ca:	462b      	mov	r3, r5
 80017cc:	460a      	mov	r2, r1
 80017ce:	eb42 0303 	adc.w	r3, r2, r3
 80017d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017dc:	f7ff fa04 	bl	8000be8 <__aeabi_ldivmod>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80017e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001998 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	17da      	asrs	r2, r3, #31
 80017f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80017f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80017f6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	0b50      	lsrs	r0, r2, #13
 8001804:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001808:	1359      	asrs	r1, r3, #13
 800180a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800180e:	462b      	mov	r3, r5
 8001810:	fb00 f203 	mul.w	r2, r0, r3
 8001814:	4623      	mov	r3, r4
 8001816:	fb03 f301 	mul.w	r3, r3, r1
 800181a:	4413      	add	r3, r2
 800181c:	4622      	mov	r2, r4
 800181e:	fba2 1200 	umull	r1, r2, r2, r0
 8001822:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001826:	460a      	mov	r2, r1
 8001828:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800182c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001830:	4413      	add	r3, r2
 8001832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001836:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	0b50      	lsrs	r0, r2, #13
 8001844:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001848:	1359      	asrs	r1, r3, #13
 800184a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800184e:	462b      	mov	r3, r5
 8001850:	fb00 f203 	mul.w	r2, r0, r3
 8001854:	4623      	mov	r3, r4
 8001856:	fb03 f301 	mul.w	r3, r3, r1
 800185a:	4413      	add	r3, r2
 800185c:	4622      	mov	r2, r4
 800185e:	fba2 1200 	umull	r1, r2, r2, r0
 8001862:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001866:	460a      	mov	r2, r1
 8001868:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800186c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001870:	4413      	add	r3, r2
 8001872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001882:	4621      	mov	r1, r4
 8001884:	0e4a      	lsrs	r2, r1, #25
 8001886:	4629      	mov	r1, r5
 8001888:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800188c:	4629      	mov	r1, r5
 800188e:	164b      	asrs	r3, r1, #25
 8001890:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001894:	4b41      	ldr	r3, [pc, #260]	@ (800199c <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8001896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189a:	b21b      	sxth	r3, r3
 800189c:	17da      	asrs	r2, r3, #31
 800189e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018a6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80018aa:	462a      	mov	r2, r5
 80018ac:	fb02 f203 	mul.w	r2, r2, r3
 80018b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018b4:	4621      	mov	r1, r4
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80018c0:	4621      	mov	r1, r4
 80018c2:	fba2 1201 	umull	r1, r2, r2, r1
 80018c6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018ca:	460a      	mov	r2, r1
 80018cc:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018d4:	4413      	add	r3, r2
 80018d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018e6:	4621      	mov	r1, r4
 80018e8:	0cca      	lsrs	r2, r1, #19
 80018ea:	4629      	mov	r1, r5
 80018ec:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018f0:	4629      	mov	r1, r5
 80018f2:	14cb      	asrs	r3, r1, #19
 80018f4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80018f8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80018fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001900:	1884      	adds	r4, r0, r2
 8001902:	663c      	str	r4, [r7, #96]	@ 0x60
 8001904:	eb41 0303 	adc.w	r3, r1, r3
 8001908:	667b      	str	r3, [r7, #100]	@ 0x64
 800190a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800190e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001912:	4621      	mov	r1, r4
 8001914:	1889      	adds	r1, r1, r2
 8001916:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001918:	4629      	mov	r1, r5
 800191a:	eb43 0101 	adc.w	r1, r3, r1
 800191e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001920:	f04f 0000 	mov.w	r0, #0
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800192c:	4623      	mov	r3, r4
 800192e:	0a18      	lsrs	r0, r3, #8
 8001930:	462b      	mov	r3, r5
 8001932:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001936:	462b      	mov	r3, r5
 8001938:	1219      	asrs	r1, r3, #8
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	b21b      	sxth	r3, r3
 8001942:	17da      	asrs	r2, r3, #31
 8001944:	653b      	str	r3, [r7, #80]	@ 0x50
 8001946:	657a      	str	r2, [r7, #84]	@ 0x54
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001954:	464c      	mov	r4, r9
 8001956:	0123      	lsls	r3, r4, #4
 8001958:	4644      	mov	r4, r8
 800195a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800195e:	4644      	mov	r4, r8
 8001960:	0122      	lsls	r2, r4, #4
 8001962:	1884      	adds	r4, r0, r2
 8001964:	603c      	str	r4, [r7, #0]
 8001966:	eb41 0303 	adc.w	r3, r1, r3
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8001974:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001978:	2b00      	cmp	r3, #0
 800197a:	da00      	bge.n	800197e <BMP280_ReadTemperatureAndPressure+0x5ae>
 800197c:	33ff      	adds	r3, #255	@ 0xff
 800197e:	121b      	asrs	r3, r3, #8
 8001980:	461a      	mov	r2, r3
 8001982:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001986:	601a      	str	r2, [r3, #0]

	  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001990:	46bd      	mov	sp, r7
 8001992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001996:	bf00      	nop
 8001998:	20000216 	.word	0x20000216
 800199c:	20000214 	.word	0x20000214
 80019a0:	20000212 	.word	0x20000212

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	@ 0x30
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019aa:	f000 fee4 	bl	8002776 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ae:	f000 f8e7 	bl	8001b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b2:	f000 faa9 	bl	8001f08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80019b6:	f000 fa49 	bl	8001e4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019ba:	f000 fa77 	bl	8001eac <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80019be:	f000 f947 	bl	8001c50 <MX_SPI1_Init>
  MX_TIM3_Init();
 80019c2:	f000 f9dd 	bl	8001d80 <MX_TIM3_Init>
  MX_TIM1_Init();
 80019c6:	f000 f981 	bl	8001ccc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80019ca:	2108      	movs	r1, #8
 80019cc:	485a      	ldr	r0, [pc, #360]	@ (8001b38 <main+0x194>)
 80019ce:	f003 f8b1 	bl	8004b34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019d2:	2100      	movs	r1, #0
 80019d4:	4858      	ldr	r0, [pc, #352]	@ (8001b38 <main+0x194>)
 80019d6:	f003 f8ad 	bl	8004b34 <HAL_TIM_PWM_Start>
  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80019da:	2301      	movs	r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	2101      	movs	r1, #1
 80019e0:	4856      	ldr	r0, [pc, #344]	@ (8001b3c <main+0x198>)
 80019e2:	f7ff fb9d 	bl	8001120 <BMP280_Init>
  #define BMP_CS_GPIO_Port GPIOA
  #define BMP_CS_Pin GPIO_PIN_4

  arm_pid_instance_f32 pid;
  pid.Kp=set_kp;
 80019e6:	4b56      	ldr	r3, [pc, #344]	@ (8001b40 <main+0x19c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	61bb      	str	r3, [r7, #24]
  pid.Kd=set_kd;
 80019ec:	4b55      	ldr	r3, [pc, #340]	@ (8001b44 <main+0x1a0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	623b      	str	r3, [r7, #32]
  pid.Ki=set_ki;
 80019f2:	4b55      	ldr	r3, [pc, #340]	@ (8001b48 <main+0x1a4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	61fb      	str	r3, [r7, #28]
  arm_pid_init_f32(&pid, 1);
 80019f8:	463b      	mov	r3, r7
 80019fa:	2101      	movs	r1, #1
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 f9c9 	bl	8006d94 <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	pid.Kp=set_kp;
 8001a02:	4b4f      	ldr	r3, [pc, #316]	@ (8001b40 <main+0x19c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	61bb      	str	r3, [r7, #24]
	  	pid.Kd=set_kd;
 8001a08:	4b4e      	ldr	r3, [pc, #312]	@ (8001b44 <main+0x1a0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	623b      	str	r3, [r7, #32]
	  	pid.Ki=set_ki;
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b48 <main+0x1a4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	61fb      	str	r3, [r7, #28]

	  HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2110      	movs	r1, #16
 8001a18:	484c      	ldr	r0, [pc, #304]	@ (8001b4c <main+0x1a8>)
 8001a1a:	f001 f9bf 	bl	8002d9c <HAL_GPIO_WritePin>
	  BMP280_ReadTemperatureAndPressure(&temp, &pressure);
 8001a1e:	494c      	ldr	r1, [pc, #304]	@ (8001b50 <main+0x1ac>)
 8001a20:	484c      	ldr	r0, [pc, #304]	@ (8001b54 <main+0x1b0>)
 8001a22:	f7ff fcd5 	bl	80013d0 <BMP280_ReadTemperatureAndPressure>
	  HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	2110      	movs	r1, #16
 8001a2a:	4848      	ldr	r0, [pc, #288]	@ (8001b4c <main+0x1a8>)
 8001a2c:	f001 f9b6 	bl	8002d9c <HAL_GPIO_WritePin>


	  		error = (set_temp-temp);
 8001a30:	4b49      	ldr	r3, [pc, #292]	@ (8001b58 <main+0x1b4>)
 8001a32:	ed93 7a00 	vldr	s14, [r3]
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <main+0x1b0>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a40:	4b46      	ldr	r3, [pc, #280]	@ (8001b5c <main+0x1b8>)
 8001a42:	edc3 7a00 	vstr	s15, [r3]

	  		u = arm_pid_f32(&pid, error);
 8001a46:	4b45      	ldr	r3, [pc, #276]	@ (8001b5c <main+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	463a      	mov	r2, r7
 8001a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a60:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a66:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a74:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a88:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    /* Update state */
    S->state[1] = S->state[0];
 8001a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aa0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa6:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001b60 <main+0x1bc>)
 8001aac:	6013      	str	r3, [r2, #0]

	  		temp_size=sprintf(&buffer, "Temperatura: %f \n\r",temp);
 8001aae:	4b29      	ldr	r3, [pc, #164]	@ (8001b54 <main+0x1b0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd68 	bl	8000588 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4929      	ldr	r1, [pc, #164]	@ (8001b64 <main+0x1c0>)
 8001abe:	482a      	ldr	r0, [pc, #168]	@ (8001b68 <main+0x1c4>)
 8001ac0:	f005 fea0 	bl	8007804 <siprintf>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <main+0x1c8>)
 8001aca:	701a      	strb	r2, [r3, #0]
	  		HAL_UART_Transmit(&huart3, (uint8_t*)buffer, temp_size, 0xffff);
 8001acc:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <main+0x1c8>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ad6:	4924      	ldr	r1, [pc, #144]	@ (8001b68 <main+0x1c4>)
 8001ad8:	4825      	ldr	r0, [pc, #148]	@ (8001b70 <main+0x1cc>)
 8001ada:	f003 feeb 	bl	80058b4 <HAL_UART_Transmit>
	  		HAL_UART_Receive_IT(&huart3, &msg, 2);
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4924      	ldr	r1, [pc, #144]	@ (8001b74 <main+0x1d0>)
 8001ae2:	4823      	ldr	r0, [pc, #140]	@ (8001b70 <main+0x1cc>)
 8001ae4:	f003 ff6f 	bl	80059c6 <HAL_UART_Receive_IT>

	  		if(u<0.0){
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <main+0x1bc>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d503      	bpl.n	8001b00 <main+0x15c>
	  			u=0.0;
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <main+0x1bc>)
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
	  		}
	  		if(u >1000.0){
 8001b00:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <main+0x1bc>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001b78 <main+0x1d4>
 8001b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b12:	dd02      	ble.n	8001b1a <main+0x176>
	  			u=1000.0;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <main+0x1bc>)
 8001b16:	4a19      	ldr	r2, [pc, #100]	@ (8001b7c <main+0x1d8>)
 8001b18:	601a      	str	r2, [r3, #0]
	  		}

	  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,u);
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <main+0x1bc>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <main+0x194>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b28:	ee17 2a90 	vmov	r2, s15
 8001b2c:	635a      	str	r2, [r3, #52]	@ 0x34
	  		HAL_Delay(100);
 8001b2e:	2064      	movs	r0, #100	@ 0x64
 8001b30:	f000 fe7e 	bl	8002830 <HAL_Delay>
  {
 8001b34:	e765      	b.n	8001a02 <main+0x5e>
 8001b36:	bf00      	nop
 8001b38:	200002d0 	.word	0x200002d0
 8001b3c:	20000220 	.word	0x20000220
 8001b40:	20000004 	.word	0x20000004
 8001b44:	200008f8 	.word	0x200008f8
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	200008f4 	.word	0x200008f4
 8001b54:	200008f0 	.word	0x200008f0
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	200008fc 	.word	0x200008fc
 8001b60:	20000900 	.word	0x20000900
 8001b64:	08009a78 	.word	0x08009a78
 8001b68:	20000888 	.word	0x20000888
 8001b6c:	20000884 	.word	0x20000884
 8001b70:	2000031c 	.word	0x2000031c
 8001b74:	200008ec 	.word	0x200008ec
 8001b78:	447a0000 	.word	0x447a0000
 8001b7c:	447a0000 	.word	0x447a0000

08001b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b094      	sub	sp, #80	@ 0x50
 8001b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	2230      	movs	r2, #48	@ 0x30
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f005 fe9b 	bl	80078ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ba4:	f001 fa4e 	bl	8003044 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <SystemClock_Config+0xc8>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	4a26      	ldr	r2, [pc, #152]	@ (8001c48 <SystemClock_Config+0xc8>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb4:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <SystemClock_Config+0xc8>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bc0:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <SystemClock_Config+0xcc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bc8:	4a20      	ldr	r2, [pc, #128]	@ (8001c4c <SystemClock_Config+0xcc>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <SystemClock_Config+0xcc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001be0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be6:	2302      	movs	r3, #2
 8001be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001bf4:	2348      	movs	r3, #72	@ 0x48
 8001bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	f107 0320 	add.w	r3, r7, #32
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fa2d 	bl	8003064 <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c10:	f000 fa7e 	bl	8002110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c14:	230f      	movs	r3, #15
 8001c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 fcbb 	bl	80035ac <HAL_RCC_ClockConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c3c:	f000 fa68 	bl	8002110 <Error_Handler>
  }
}
 8001c40:	bf00      	nop
 8001c42:	3750      	adds	r7, #80	@ 0x50
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000

08001c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c56:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc8 <MX_SPI1_Init+0x78>)
 8001c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c68:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001c6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c76:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c86:	2220      	movs	r2, #32
 8001c88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001caa:	2208      	movs	r2, #8
 8001cac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_SPI1_Init+0x74>)
 8001cb0:	f002 fa92 	bl	80041d8 <HAL_SPI_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cba:	f000 fa29 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000220 	.word	0x20000220
 8001cc8:	40013000 	.word	0x40013000

08001ccc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	@ 0x30
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	2224      	movs	r2, #36	@ 0x24
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f005 fdf5 	bl	80078ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cea:	4b23      	ldr	r3, [pc, #140]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001cec:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <MX_TIM1_Init+0xb0>)
 8001cee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b19      	ldr	r3, [pc, #100]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d16:	2303      	movs	r3, #3
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d26:	230f      	movs	r3, #15
 8001d28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001d36:	230f      	movs	r3, #15
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480d      	ldr	r0, [pc, #52]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001d42:	f002 fff1 	bl	8004d28 <HAL_TIM_Encoder_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001d4c:	f000 f9e0 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d50:	2300      	movs	r3, #0
 8001d52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <MX_TIM1_Init+0xac>)
 8001d62:	f003 fccb 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001d6c:	f000 f9d0 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	3730      	adds	r7, #48	@ 0x30
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000284 	.word	0x20000284
 8001d7c:	40010000 	.word	0x40010000

08001d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d92:	463b      	mov	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da4:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001da6:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <MX_TIM3_Init+0xc8>)
 8001da8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001daa:	4b26      	ldr	r3, [pc, #152]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001dac:	2247      	movs	r2, #71	@ 0x47
 8001dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db0:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001db6:	4b23      	ldr	r3, [pc, #140]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001db8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dca:	481e      	ldr	r0, [pc, #120]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001dcc:	f002 fe5a 	bl	8004a84 <HAL_TIM_PWM_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001dd6:	f000 f99b 	bl	8002110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4619      	mov	r1, r3
 8001de8:	4816      	ldr	r0, [pc, #88]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001dea:	f003 fc87 	bl	80056fc <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001df4:	f000 f98c 	bl	8002110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df8:	2360      	movs	r3, #96	@ 0x60
 8001dfa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001dfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001e12:	f003 f82f 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001e1c:	f000 f978 	bl	8002110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e20:	463b      	mov	r3, r7
 8001e22:	2208      	movs	r2, #8
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001e28:	f003 f824 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001e32:	f000 f96d 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e36:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <MX_TIM3_Init+0xc4>)
 8001e38:	f000 fa5a 	bl	80022f0 <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	@ 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200002d0 	.word	0x200002d0
 8001e48:	40000400 	.word	0x40000400

08001e4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e52:	4a15      	ldr	r2, [pc, #84]	@ (8001ea8 <MX_USART3_UART_Init+0x5c>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e56:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_USART3_UART_Init+0x58>)
 8001e90:	f003 fcc2 	bl	8005818 <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e9a:	f000 f939 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000031c 	.word	0x2000031c
 8001ea8:	40004800 	.word	0x40004800

08001eac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001eb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eba:	2206      	movs	r2, #6
 8001ebc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ecc:	2202      	movs	r2, #2
 8001ece:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ef0:	f000 ff6d 	bl	8002dce <HAL_PCD_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001efa:	f000 f909 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200003a4 	.word	0x200003a4

08001f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	@ 0x30
 8001f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1e:	4b77      	ldr	r3, [pc, #476]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a76      	ldr	r2, [pc, #472]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b74      	ldr	r3, [pc, #464]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f36:	4b71      	ldr	r3, [pc, #452]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a70      	ldr	r2, [pc, #448]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b6e      	ldr	r3, [pc, #440]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b6b      	ldr	r3, [pc, #428]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a6a      	ldr	r2, [pc, #424]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b68      	ldr	r3, [pc, #416]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b65      	ldr	r3, [pc, #404]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a64      	ldr	r2, [pc, #400]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b62      	ldr	r3, [pc, #392]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a5e      	ldr	r2, [pc, #376]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f96:	4b59      	ldr	r3, [pc, #356]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a58      	ldr	r2, [pc, #352]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b56      	ldr	r3, [pc, #344]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fae:	4b53      	ldr	r3, [pc, #332]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a52      	ldr	r2, [pc, #328]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b50      	ldr	r3, [pc, #320]	@ (80020fc <MX_GPIO_Init+0x1f4>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2110      	movs	r1, #16
 8001fca:	484d      	ldr	r0, [pc, #308]	@ (8002100 <MX_GPIO_Init+0x1f8>)
 8001fcc:	f000 fee6 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001fd6:	484b      	ldr	r0, [pc, #300]	@ (8002104 <MX_GPIO_Init+0x1fc>)
 8001fd8:	f000 fee0 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2140      	movs	r1, #64	@ 0x40
 8001fe0:	4849      	ldr	r0, [pc, #292]	@ (8002108 <MX_GPIO_Init+0x200>)
 8001fe2:	f000 fedb 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001fe6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4843      	ldr	r0, [pc, #268]	@ (800210c <MX_GPIO_Init+0x204>)
 8001ffe:	f000 fd21 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002002:	2332      	movs	r3, #50	@ 0x32
 8002004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002012:	230b      	movs	r3, #11
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	483b      	ldr	r0, [pc, #236]	@ (800210c <MX_GPIO_Init+0x204>)
 800201e:	f000 fd11 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002022:	2386      	movs	r3, #134	@ 0x86
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002032:	230b      	movs	r3, #11
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4830      	ldr	r0, [pc, #192]	@ (8002100 <MX_GPIO_Init+0x1f8>)
 800203e:	f000 fd01 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002042:	2310      	movs	r3, #16
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	4829      	ldr	r0, [pc, #164]	@ (8002100 <MX_GPIO_Init+0x1f8>)
 800205a:	f000 fcf3 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800205e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4619      	mov	r1, r3
 8002076:	4823      	ldr	r0, [pc, #140]	@ (8002104 <MX_GPIO_Init+0x1fc>)
 8002078:	f000 fce4 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800207c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800208e:	230b      	movs	r3, #11
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	4619      	mov	r1, r3
 8002098:	481a      	ldr	r0, [pc, #104]	@ (8002104 <MX_GPIO_Init+0x1fc>)
 800209a:	f000 fcd3 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800209e:	2340      	movs	r3, #64	@ 0x40
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a2:	2301      	movs	r3, #1
 80020a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f107 031c 	add.w	r3, r7, #28
 80020b2:	4619      	mov	r1, r3
 80020b4:	4814      	ldr	r0, [pc, #80]	@ (8002108 <MX_GPIO_Init+0x200>)
 80020b6:	f000 fcc5 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	480e      	ldr	r0, [pc, #56]	@ (8002108 <MX_GPIO_Init+0x200>)
 80020ce:	f000 fcb9 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80020d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020e4:	230b      	movs	r3, #11
 80020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	@ (8002108 <MX_GPIO_Init+0x200>)
 80020f0:	f000 fca8 	bl	8002a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020f4:	bf00      	nop
 80020f6:	3730      	adds	r7, #48	@ 0x30
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40021800 	.word	0x40021800
 800210c:	40020800 	.word	0x40020800

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <Error_Handler+0x8>

0800211c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <HAL_MspInit+0x44>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	4a0e      	ldr	r2, [pc, #56]	@ (8002160 <HAL_MspInit+0x44>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	@ 0x40
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <HAL_MspInit+0x44>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_MspInit+0x44>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <HAL_MspInit+0x44>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002144:	6453      	str	r3, [r2, #68]	@ 0x44
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_MspInit+0x44>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a25      	ldr	r2, [pc, #148]	@ (8002218 <HAL_SPI_MspInit+0xb4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d143      	bne.n	800220e <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002186:	4b25      	ldr	r3, [pc, #148]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	4a24      	ldr	r2, [pc, #144]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 800218c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002190:	6453      	str	r3, [r2, #68]	@ 0x44
 8002192:	4b22      	ldr	r3, [pc, #136]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a18      	ldr	r2, [pc, #96]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_SPI_MspInit+0xb8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021ce:	2360      	movs	r3, #96	@ 0x60
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021de:	2305      	movs	r3, #5
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	480d      	ldr	r0, [pc, #52]	@ (8002220 <HAL_SPI_MspInit+0xbc>)
 80021ea:	f000 fc2b 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021ee:	2320      	movs	r3, #32
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021fe:	2305      	movs	r3, #5
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4806      	ldr	r0, [pc, #24]	@ (8002224 <HAL_SPI_MspInit+0xc0>)
 800220a:	f000 fc1b 	bl	8002a44 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	@ 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40013000 	.word	0x40013000
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400

08002228 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d128      	bne.n	800229c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800224a:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x80>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002262:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	6313      	str	r3, [r2, #48]	@ 0x30
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800227a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800228c:	2301      	movs	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	4805      	ldr	r0, [pc, #20]	@ (80022ac <HAL_TIM_Encoder_MspInit+0x84>)
 8002298:	f000 fbd4 	bl	8002a44 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	@ 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40021000 	.word	0x40021000

080022b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x38>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10b      	bne.n	80022da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <HAL_TIM_PWM_MspInit+0x3c>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a09      	ldr	r2, [pc, #36]	@ (80022ec <HAL_TIM_PWM_MspInit+0x3c>)
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <HAL_TIM_PWM_MspInit+0x3c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a11      	ldr	r2, [pc, #68]	@ (8002354 <HAL_TIM_MspPostInit+0x64>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d11c      	bne.n	800234c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_TIM_MspPostInit+0x68>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a10      	ldr	r2, [pc, #64]	@ (8002358 <HAL_TIM_MspPostInit+0x68>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_TIM_MspPostInit+0x68>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800232a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800232e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800233c:	2302      	movs	r3, #2
 800233e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4619      	mov	r1, r3
 8002346:	4805      	ldr	r0, [pc, #20]	@ (800235c <HAL_TIM_MspPostInit+0x6c>)
 8002348:	f000 fb7c 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40000400 	.word	0x40000400
 8002358:	40023800 	.word	0x40023800
 800235c:	40020800 	.word	0x40020800

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0aa      	sub	sp, #168	@ 0xa8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	2284      	movs	r2, #132	@ 0x84
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f005 faa2 	bl	80078ca <memset>
  if(huart->Instance==USART3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a22      	ldr	r2, [pc, #136]	@ (8002414 <HAL_UART_MspInit+0xb4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d13c      	bne.n	800240a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002394:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002396:	2300      	movs	r3, #0
 8002398:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fb2a 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023aa:	f7ff feb1 	bl	8002110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_UART_MspInit+0xb8>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_UART_MspInit+0xb8>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_UART_MspInit+0xb8>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_UART_MspInit+0xb8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <HAL_UART_MspInit+0xb8>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <HAL_UART_MspInit+0xb8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f8:	2307      	movs	r3, #7
 80023fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <HAL_UART_MspInit+0xbc>)
 8002406:	f000 fb1d 	bl	8002a44 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800240a:	bf00      	nop
 800240c:	37a8      	adds	r7, #168	@ 0xa8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40004800 	.word	0x40004800
 8002418:	40023800 	.word	0x40023800
 800241c:	40020c00 	.word	0x40020c00

08002420 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0ac      	sub	sp, #176	@ 0xb0
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	2284      	movs	r2, #132	@ 0x84
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f005 fa42 	bl	80078ca <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800244e:	d159      	bne.n	8002504 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002450:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002454:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245c:	f107 0318 	add.w	r3, r7, #24
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fac9 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800246c:	f7ff fe50 	bl	8002110 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	4b26      	ldr	r3, [pc, #152]	@ (800250c <HAL_PCD_MspInit+0xec>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	4a25      	ldr	r2, [pc, #148]	@ (800250c <HAL_PCD_MspInit+0xec>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6313      	str	r3, [r2, #48]	@ 0x30
 800247c:	4b23      	ldr	r3, [pc, #140]	@ (800250c <HAL_PCD_MspInit+0xec>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002488:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800248c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024a2:	230a      	movs	r3, #10
 80024a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024ac:	4619      	mov	r1, r3
 80024ae:	4818      	ldr	r0, [pc, #96]	@ (8002510 <HAL_PCD_MspInit+0xf0>)
 80024b0:	f000 fac8 	bl	8002a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024cc:	4619      	mov	r1, r3
 80024ce:	4810      	ldr	r0, [pc, #64]	@ (8002510 <HAL_PCD_MspInit+0xf0>)
 80024d0:	f000 fab8 	bl	8002a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HAL_PCD_MspInit+0xec>)
 80024d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d8:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <HAL_PCD_MspInit+0xec>)
 80024da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024de:	6353      	str	r3, [r2, #52]	@ 0x34
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <HAL_PCD_MspInit+0xec>)
 80024e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <HAL_PCD_MspInit+0xec>)
 80024ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f0:	4a06      	ldr	r2, [pc, #24]	@ (800250c <HAL_PCD_MspInit+0xec>)
 80024f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f8:	4b04      	ldr	r3, [pc, #16]	@ (800250c <HAL_PCD_MspInit+0xec>)
 80024fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002504:	bf00      	nop
 8002506:	37b0      	adds	r7, #176	@ 0xb0
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	40020000 	.word	0x40020000

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <NMI_Handler+0x4>

0800251c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <MemManage_Handler+0x4>

0800252c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <UsageFault_Handler+0x4>

0800253c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256a:	f000 f941 	bl	80027f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}

08002572 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  return 1;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <_kill>:

int _kill(int pid, int sig)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800258c:	f005 f9f0 	bl	8007970 <__errno>
 8002590:	4603      	mov	r3, r0
 8002592:	2216      	movs	r2, #22
 8002594:	601a      	str	r2, [r3, #0]
  return -1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_exit>:

void _exit (int status)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025aa:	f04f 31ff 	mov.w	r1, #4294967295
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffe7 	bl	8002582 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <_exit+0x12>

080025b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	e00a      	b.n	80025e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025ca:	f3af 8000 	nop.w
 80025ce:	4601      	mov	r1, r0
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	60ba      	str	r2, [r7, #8]
 80025d6:	b2ca      	uxtb	r2, r1
 80025d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dbf0      	blt.n	80025ca <_read+0x12>
  }

  return len;
 80025e8:	687b      	ldr	r3, [r7, #4]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e009      	b.n	8002618 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	dbf1      	blt.n	8002604 <_write+0x12>
  }
  return len;
 8002620:	687b      	ldr	r3, [r7, #4]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_close>:

int _close(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002652:	605a      	str	r2, [r3, #4]
  return 0;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_isatty>:

int _isatty(int file)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800269c:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <_sbrk+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <_sbrk+0x60>)
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <_sbrk+0x64>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <_sbrk+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c4:	f005 f954 	bl	8007970 <__errno>
 80026c8:	4603      	mov	r3, r0
 80026ca:	220c      	movs	r2, #12
 80026cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	e009      	b.n	80026e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	4a05      	ldr	r2, [pc, #20]	@ (80026f8 <_sbrk+0x64>)
 80026e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20050000 	.word	0x20050000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	20000904 	.word	0x20000904
 80026fc:	20000a58 	.word	0x20000a58

08002700 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <SystemInit+0x20>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	4a05      	ldr	r2, [pc, #20]	@ (8002720 <SystemInit+0x20>)
 800270c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800275c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002728:	f7ff ffea 	bl	8002700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800272c:	480c      	ldr	r0, [pc, #48]	@ (8002760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800272e:	490d      	ldr	r1, [pc, #52]	@ (8002764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002744:	4c0a      	ldr	r4, [pc, #40]	@ (8002770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002752:	f005 f913 	bl	800797c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7ff f925 	bl	80019a4 <main>
  bx  lr    
 800275a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800275c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002768:	08009e28 	.word	0x08009e28
  ldr r2, =_sbss
 800276c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002770:	20000a58 	.word	0x20000a58

08002774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC_IRQHandler>

08002776 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277a:	2003      	movs	r0, #3
 800277c:	f000 f92e 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002780:	2000      	movs	r0, #0
 8002782:	f000 f805 	bl	8002790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002786:	f7ff fcc9 	bl	800211c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_InitTick+0x54>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_InitTick+0x58>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f93b 	bl	8002a2a <HAL_SYSTICK_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00e      	b.n	80027dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b0f      	cmp	r3, #15
 80027c2:	d80a      	bhi.n	80027da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c4:	2200      	movs	r2, #0
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f000 f911 	bl	80029f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d0:	4a06      	ldr	r2, [pc, #24]	@ (80027ec <HAL_InitTick+0x5c>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	2000000c 	.word	0x2000000c
 80027e8:	20000014 	.word	0x20000014
 80027ec:	20000010 	.word	0x20000010

080027f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_IncTick+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_IncTick+0x24>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <HAL_IncTick+0x24>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000014 	.word	0x20000014
 8002814:	20000908 	.word	0x20000908

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000908 	.word	0x20000908

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff ffee 	bl	8002818 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d005      	beq.n	8002856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_Delay+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002856:	bf00      	nop
 8002858:	f7ff ffde 	bl	8002818 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8f7      	bhi.n	8002858 <HAL_Delay+0x28>
  {
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000014 	.word	0x20000014

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <__NVIC_SetPriorityGrouping+0x40>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028a0:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <__NVIC_SetPriorityGrouping+0x40>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00
 80028bc:	05fa0000 	.word	0x05fa0000

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	@ (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	@ (800292c <__NVIC_SetPriority+0x50>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	4313      	orrs	r3, r2
         );
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a8:	d301      	bcc.n	80029ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ae:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <SysTick_Config+0x40>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b6:	210f      	movs	r1, #15
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f7ff ff8e 	bl	80028dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <SysTick_Config+0x40>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c6:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <SysTick_Config+0x40>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	e000e010 	.word	0xe000e010

080029dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff47 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a04:	f7ff ff5c 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7ff ff8e 	bl	8002930 <NVIC_EncodePriority>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff5d 	bl	80028dc <__NVIC_SetPriority>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffb0 	bl	8002998 <SysTick_Config>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	@ 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	e175      	b.n	8002d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a64:	2201      	movs	r2, #1
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	f040 8164 	bne.w	8002d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d005      	beq.n	8002a9a <HAL_GPIO_Init+0x56>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d130      	bne.n	8002afc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 0201 	and.w	r2, r3, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d017      	beq.n	8002b38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d123      	bne.n	8002b8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	08da      	lsrs	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	08da      	lsrs	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3208      	adds	r2, #8
 8002b86:	69b9      	ldr	r1, [r7, #24]
 8002b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0203 	and.w	r2, r3, #3
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80be 	beq.w	8002d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	4b66      	ldr	r3, [pc, #408]	@ (8002d68 <HAL_GPIO_Init+0x324>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	4a65      	ldr	r2, [pc, #404]	@ (8002d68 <HAL_GPIO_Init+0x324>)
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bda:	4b63      	ldr	r3, [pc, #396]	@ (8002d68 <HAL_GPIO_Init+0x324>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002be6:	4a61      	ldr	r2, [pc, #388]	@ (8002d6c <HAL_GPIO_Init+0x328>)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	@ (8002d70 <HAL_GPIO_Init+0x32c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d037      	beq.n	8002c82 <HAL_GPIO_Init+0x23e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a57      	ldr	r2, [pc, #348]	@ (8002d74 <HAL_GPIO_Init+0x330>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d031      	beq.n	8002c7e <HAL_GPIO_Init+0x23a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a56      	ldr	r2, [pc, #344]	@ (8002d78 <HAL_GPIO_Init+0x334>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02b      	beq.n	8002c7a <HAL_GPIO_Init+0x236>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a55      	ldr	r2, [pc, #340]	@ (8002d7c <HAL_GPIO_Init+0x338>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d025      	beq.n	8002c76 <HAL_GPIO_Init+0x232>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a54      	ldr	r2, [pc, #336]	@ (8002d80 <HAL_GPIO_Init+0x33c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01f      	beq.n	8002c72 <HAL_GPIO_Init+0x22e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a53      	ldr	r2, [pc, #332]	@ (8002d84 <HAL_GPIO_Init+0x340>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d019      	beq.n	8002c6e <HAL_GPIO_Init+0x22a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	@ (8002d88 <HAL_GPIO_Init+0x344>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0x226>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a51      	ldr	r2, [pc, #324]	@ (8002d8c <HAL_GPIO_Init+0x348>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a50      	ldr	r2, [pc, #320]	@ (8002d90 <HAL_GPIO_Init+0x34c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4f      	ldr	r2, [pc, #316]	@ (8002d94 <HAL_GPIO_Init+0x350>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_GPIO_Init+0x21a>
 8002c5a:	2309      	movs	r3, #9
 8002c5c:	e012      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c5e:	230a      	movs	r3, #10
 8002c60:	e010      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c62:	2308      	movs	r3, #8
 8002c64:	e00e      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e00c      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	e00a      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c6e:	2305      	movs	r3, #5
 8002c70:	e008      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x240>
 8002c82:	2300      	movs	r3, #0
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f002 0203 	and.w	r2, r2, #3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c94:	4935      	ldr	r1, [pc, #212]	@ (8002d6c <HAL_GPIO_Init+0x328>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8002d98 <HAL_GPIO_Init+0x354>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc6:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <HAL_GPIO_Init+0x354>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_GPIO_Init+0x354>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf0:	4a29      	ldr	r2, [pc, #164]	@ (8002d98 <HAL_GPIO_Init+0x354>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf6:	4b28      	ldr	r3, [pc, #160]	@ (8002d98 <HAL_GPIO_Init+0x354>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d98 <HAL_GPIO_Init+0x354>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d20:	4b1d      	ldr	r3, [pc, #116]	@ (8002d98 <HAL_GPIO_Init+0x354>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d44:	4a14      	ldr	r2, [pc, #80]	@ (8002d98 <HAL_GPIO_Init+0x354>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	f67f ae86 	bls.w	8002a64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3724      	adds	r7, #36	@ 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020c00 	.word	0x40020c00
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40021400 	.word	0x40021400
 8002d88:	40021800 	.word	0x40021800
 8002d8c:	40021c00 	.word	0x40021c00
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40022400 	.word	0x40022400
 8002d98:	40013c00 	.word	0x40013c00

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af02      	add	r7, sp, #8
 8002dd4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e108      	b.n	8002ff2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fb10 	bl	8002420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2203      	movs	r2, #3
 8002e04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e0e:	d102      	bne.n	8002e16 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fd24 	bl	8006868 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7c1a      	ldrb	r2, [r3, #16]
 8002e28:	f88d 2000 	strb.w	r2, [sp]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e30:	f003 fcc0 	bl	80067b4 <USB_CoreInit>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0d5      	b.n	8002ff2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fd1c 	bl	800688a <USB_SetCurrentMode>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0c6      	b.n	8002ff2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e04a      	b.n	8002f00 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3315      	adds	r3, #21
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	b298      	uxth	r0, r3
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	332e      	adds	r3, #46	@ 0x2e
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3318      	adds	r3, #24
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	331c      	adds	r3, #28
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3320      	adds	r3, #32
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3324      	adds	r3, #36	@ 0x24
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3301      	adds	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	791b      	ldrb	r3, [r3, #4]
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d3af      	bcc.n	8002e6a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e044      	b.n	8002f9a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	3301      	adds	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	791b      	ldrb	r3, [r3, #4]
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3b5      	bcc.n	8002f10 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7c1a      	ldrb	r2, [r3, #16]
 8002fac:	f88d 2000 	strb.w	r2, [sp]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb4:	f003 fcb6 	bl	8006924 <USB_DevInit>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e013      	b.n	8002ff2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7b1b      	ldrb	r3, [r3, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f80b 	bl	8002ffc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fe71 	bl	8006cd2 <USB_DevDisconnect>

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_PCDEx_ActivateLPM+0x44>)
 800302c:	4313      	orrs	r3, r2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	10000003 	.word	0x10000003

08003044 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a04      	ldr	r2, [pc, #16]	@ (8003060 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800304e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000

08003064 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e291      	b.n	800359e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8087 	beq.w	8003196 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003088:	4b96      	ldr	r3, [pc, #600]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b04      	cmp	r3, #4
 8003092:	d00c      	beq.n	80030ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003094:	4b93      	ldr	r3, [pc, #588]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d112      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62>
 80030a0:	4b90      	ldr	r3, [pc, #576]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ac:	d10b      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ae:	4b8d      	ldr	r3, [pc, #564]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d06c      	beq.n	8003194 <HAL_RCC_OscConfig+0x130>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d168      	bne.n	8003194 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e26b      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x7a>
 80030d0:	4b84      	ldr	r3, [pc, #528]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a83      	ldr	r2, [pc, #524]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80030d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	e02e      	b.n	800313c <HAL_RCC_OscConfig+0xd8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x9c>
 80030e6:	4b7f      	ldr	r3, [pc, #508]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7e      	ldr	r2, [pc, #504]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80030ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b7c      	ldr	r3, [pc, #496]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7b      	ldr	r2, [pc, #492]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80030f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e01d      	b.n	800313c <HAL_RCC_OscConfig+0xd8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0xc0>
 800310a:	4b76      	ldr	r3, [pc, #472]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b73      	ldr	r3, [pc, #460]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a72      	ldr	r2, [pc, #456]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e00b      	b.n	800313c <HAL_RCC_OscConfig+0xd8>
 8003124:	4b6f      	ldr	r3, [pc, #444]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a6e      	ldr	r2, [pc, #440]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b6c      	ldr	r3, [pc, #432]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a6b      	ldr	r2, [pc, #428]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800313a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7ff fb68 	bl	8002818 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7ff fb64 	bl	8002818 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	@ 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e21f      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b61      	ldr	r3, [pc, #388]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0xe8>
 800316a:	e014      	b.n	8003196 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7ff fb54 	bl	8002818 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003174:	f7ff fb50 	bl	8002818 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	@ 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e20b      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	4b57      	ldr	r3, [pc, #348]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x110>
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d069      	beq.n	8003276 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031a2:	4b50      	ldr	r3, [pc, #320]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ae:	4b4d      	ldr	r3, [pc, #308]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d11c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x190>
 80031ba:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d116      	bne.n	80031f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	4b47      	ldr	r3, [pc, #284]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_RCC_OscConfig+0x17a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e1df      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031de:	4b41      	ldr	r3, [pc, #260]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	493d      	ldr	r1, [pc, #244]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f2:	e040      	b.n	8003276 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d023      	beq.n	8003244 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031fc:	4b39      	ldr	r3, [pc, #228]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a38      	ldr	r2, [pc, #224]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7ff fb06 	bl	8002818 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7ff fb02 	bl	8002818 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1bd      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b2d      	ldr	r3, [pc, #180]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4929      	ldr	r1, [pc, #164]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
 8003242:	e018      	b.n	8003276 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003244:	4b27      	ldr	r3, [pc, #156]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a26      	ldr	r2, [pc, #152]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7ff fae2 	bl	8002818 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003258:	f7ff fade 	bl	8002818 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e199      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1e      	ldr	r3, [pc, #120]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d038      	beq.n	80032f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d019      	beq.n	80032be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b16      	ldr	r3, [pc, #88]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 800328c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328e:	4a15      	ldr	r2, [pc, #84]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7ff fabf 	bl	8002818 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329e:	f7ff fabb 	bl	8002818 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e176      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b0:	4b0c      	ldr	r3, [pc, #48]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80032b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x23a>
 80032bc:	e01a      	b.n	80032f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032be:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80032c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c2:	4a08      	ldr	r2, [pc, #32]	@ (80032e4 <HAL_RCC_OscConfig+0x280>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7ff faa5 	bl	8002818 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d2:	f7ff faa1 	bl	8002818 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d903      	bls.n	80032e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e15c      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
 80032e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b91      	ldr	r3, [pc, #580]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ee      	bne.n	80032d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a4 	beq.w	800344a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b8b      	ldr	r3, [pc, #556]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b88      	ldr	r3, [pc, #544]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	4a87      	ldr	r2, [pc, #540]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	@ 0x40
 800331a:	4b85      	ldr	r3, [pc, #532]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332a:	4b82      	ldr	r3, [pc, #520]	@ (8003534 <HAL_RCC_OscConfig+0x4d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003336:	4b7f      	ldr	r3, [pc, #508]	@ (8003534 <HAL_RCC_OscConfig+0x4d0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7e      	ldr	r2, [pc, #504]	@ (8003534 <HAL_RCC_OscConfig+0x4d0>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7ff fa69 	bl	8002818 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7ff fa65 	bl	8002818 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b64      	cmp	r3, #100	@ 0x64
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e120      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335c:	4b75      	ldr	r3, [pc, #468]	@ (8003534 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x31a>
 8003370:	4b6f      	ldr	r3, [pc, #444]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003374:	4a6e      	ldr	r2, [pc, #440]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	@ 0x70
 800337c:	e02d      	b.n	80033da <HAL_RCC_OscConfig+0x376>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x33c>
 8003386:	4b6a      	ldr	r3, [pc, #424]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338a:	4a69      	ldr	r2, [pc, #420]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	@ 0x70
 8003392:	4b67      	ldr	r3, [pc, #412]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	4a66      	ldr	r2, [pc, #408]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	6713      	str	r3, [r2, #112]	@ 0x70
 800339e:	e01c      	b.n	80033da <HAL_RCC_OscConfig+0x376>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x35e>
 80033a8:	4b61      	ldr	r3, [pc, #388]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ac:	4a60      	ldr	r2, [pc, #384]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c0:	e00b      	b.n	80033da <HAL_RCC_OscConfig+0x376>
 80033c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ce:	4b58      	ldr	r3, [pc, #352]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	4a57      	ldr	r2, [pc, #348]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80033d4:	f023 0304 	bic.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d015      	beq.n	800340e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7ff fa19 	bl	8002818 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7ff fa15 	bl	8002818 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0ce      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	4b4b      	ldr	r3, [pc, #300]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ee      	beq.n	80033ea <HAL_RCC_OscConfig+0x386>
 800340c:	e014      	b.n	8003438 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7ff fa03 	bl	8002818 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7ff f9ff 	bl	8002818 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e0b8      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	4b40      	ldr	r3, [pc, #256]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ee      	bne.n	8003416 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4b3c      	ldr	r3, [pc, #240]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	4a3b      	ldr	r2, [pc, #236]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80a4 	beq.w	800359c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003454:	4b36      	ldr	r3, [pc, #216]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d06b      	beq.n	8003538 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d149      	bne.n	80034fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a30      	ldr	r2, [pc, #192]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 800346e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7ff f9d0 	bl	8002818 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7ff f9cc 	bl	8002818 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e087      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	4313      	orrs	r3, r2
 80034c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80034c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c8:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a18      	ldr	r2, [pc, #96]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7ff f9a0 	bl	8002818 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7ff f99c 	bl	8002818 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e057      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ee:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x478>
 80034fa:	e04f      	b.n	800359c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0b      	ldr	r2, [pc, #44]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7ff f986 	bl	8002818 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7ff f982 	bl	8002818 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e03d      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	4b03      	ldr	r3, [pc, #12]	@ (8003530 <HAL_RCC_OscConfig+0x4cc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x4ac>
 800352e:	e035      	b.n	800359c <HAL_RCC_OscConfig+0x538>
 8003530:	40023800 	.word	0x40023800
 8003534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_RCC_OscConfig+0x544>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d028      	beq.n	8003598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d121      	bne.n	8003598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11a      	bne.n	8003598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800356e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003570:	4293      	cmp	r3, r2
 8003572:	d111      	bne.n	8003598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	3b01      	subs	r3, #1
 8003582:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003592:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d0      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b67      	ldr	r3, [pc, #412]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	4965      	ldr	r1, [pc, #404]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b63      	ldr	r3, [pc, #396]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b59      	ldr	r3, [pc, #356]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a58      	ldr	r2, [pc, #352]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b53      	ldr	r3, [pc, #332]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a52      	ldr	r2, [pc, #328]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800362e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b50      	ldr	r3, [pc, #320]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494d      	ldr	r1, [pc, #308]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d040      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b47      	ldr	r3, [pc, #284]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e073      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3d      	ldr	r3, [pc, #244]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06b      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b39      	ldr	r3, [pc, #228]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4936      	ldr	r1, [pc, #216]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a0:	f7ff f8ba 	bl	8002818 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7ff f8b6 	bl	8002818 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e053      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	4922      	ldr	r1, [pc, #136]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e032      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372a:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490e      	ldr	r1, [pc, #56]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f821 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490a      	ldr	r1, [pc, #40]	@ (8003778 <HAL_RCC_ClockConfig+0x1cc>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	4a09      	ldr	r2, [pc, #36]	@ (800377c <HAL_RCC_ClockConfig+0x1d0>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375a:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <HAL_RCC_ClockConfig+0x1d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f816 	bl	8002790 <HAL_InitTick>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023c00 	.word	0x40023c00
 8003774:	40023800 	.word	0x40023800
 8003778:	08009a8c 	.word	0x08009a8c
 800377c:	2000000c 	.word	0x2000000c
 8003780:	20000010 	.word	0x20000010

08003784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003788:	b094      	sub	sp, #80	@ 0x50
 800378a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003790:	2300      	movs	r3, #0
 8003792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003794:	2300      	movs	r3, #0
 8003796:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379c:	4b79      	ldr	r3, [pc, #484]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d00d      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x40>
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	f200 80e1 	bhi.w	8003970 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x34>
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d003      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0x3a>
 80037b6:	e0db      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b73      	ldr	r3, [pc, #460]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037bc:	e0db      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037be:	4b73      	ldr	r3, [pc, #460]	@ (800398c <HAL_RCC_GetSysClockFreq+0x208>)
 80037c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c2:	e0d8      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037da:	4b6a      	ldr	r3, [pc, #424]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	099b      	lsrs	r3, r3, #6
 80037e0:	2200      	movs	r2, #0
 80037e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	f04f 0000 	mov.w	r0, #0
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	0159      	lsls	r1, r3, #5
 8003804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003808:	0150      	lsls	r0, r2, #5
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4621      	mov	r1, r4
 8003810:	1a51      	subs	r1, r2, r1
 8003812:	6139      	str	r1, [r7, #16]
 8003814:	4629      	mov	r1, r5
 8003816:	eb63 0301 	sbc.w	r3, r3, r1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003828:	4659      	mov	r1, fp
 800382a:	018b      	lsls	r3, r1, #6
 800382c:	4651      	mov	r1, sl
 800382e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003832:	4651      	mov	r1, sl
 8003834:	018a      	lsls	r2, r1, #6
 8003836:	4651      	mov	r1, sl
 8003838:	ebb2 0801 	subs.w	r8, r2, r1
 800383c:	4659      	mov	r1, fp
 800383e:	eb63 0901 	sbc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	462b      	mov	r3, r5
 8003864:	eb49 0303 	adc.w	r3, r9, r3
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003876:	4629      	mov	r1, r5
 8003878:	024b      	lsls	r3, r1, #9
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003880:	4621      	mov	r1, r4
 8003882:	024a      	lsls	r2, r1, #9
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388a:	2200      	movs	r2, #0
 800388c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800388e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003894:	f7fd f9f8 	bl	8000c88 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038a0:	e058      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b38      	ldr	r3, [pc, #224]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	2200      	movs	r2, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	4611      	mov	r1, r2
 80038ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	f04f 0000 	mov.w	r0, #0
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	0159      	lsls	r1, r3, #5
 80038ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ce:	0150      	lsls	r0, r2, #5
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4641      	mov	r1, r8
 80038d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038da:	4649      	mov	r1, r9
 80038dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f4:	ebb2 040a 	subs.w	r4, r2, sl
 80038f8:	eb63 050b 	sbc.w	r5, r3, fp
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	00eb      	lsls	r3, r5, #3
 8003906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390a:	00e2      	lsls	r2, r4, #3
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4643      	mov	r3, r8
 8003912:	18e3      	adds	r3, r4, r3
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	464b      	mov	r3, r9
 8003918:	eb45 0303 	adc.w	r3, r5, r3
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392a:	4629      	mov	r1, r5
 800392c:	028b      	lsls	r3, r1, #10
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003934:	4621      	mov	r1, r4
 8003936:	028a      	lsls	r2, r1, #10
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	61fa      	str	r2, [r7, #28]
 8003944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003948:	f7fd f99e 	bl	8000c88 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003964:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800396e:	e002      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x204>)
 8003972:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003978:	4618      	mov	r0, r3
 800397a:	3750      	adds	r7, #80	@ 0x50
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	00f42400 	.word	0x00f42400
 800398c:	007a1200 	.word	0x007a1200

08003990 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2000000c 	.word	0x2000000c

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039ac:	f7ff fff0 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4903      	ldr	r1, [pc, #12]	@ (80039cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	08009a9c 	.word	0x08009a9c

080039d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d4:	f7ff ffdc 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0b5b      	lsrs	r3, r3, #13
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	@ (80039f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	08009a9c 	.word	0x08009a9c

080039f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a20:	4b69      	ldr	r3, [pc, #420]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a68      	ldr	r2, [pc, #416]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a2a:	6093      	str	r3, [r2, #8]
 8003a2c:	4b66      	ldr	r3, [pc, #408]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a34:	4964      	ldr	r1, [pc, #400]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a52:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	4959      	ldr	r1, [pc, #356]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a70:	d101      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	494a      	ldr	r1, [pc, #296]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808b 	beq.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	4a39      	ldr	r2, [pc, #228]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae8:	4b37      	ldr	r3, [pc, #220]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af4:	4b35      	ldr	r3, [pc, #212]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a34      	ldr	r2, [pc, #208]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fe fe8a 	bl	8002818 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fe fe86 	bl	8002818 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	@ 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e357      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b26:	4b28      	ldr	r3, [pc, #160]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d035      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d02e      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b44:	4b20      	ldr	r3, [pc, #128]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b66:	4a18      	ldr	r2, [pc, #96]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b6c:	4b16      	ldr	r3, [pc, #88]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d114      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fe4e 	bl	8002818 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fe fe4a 	bl	8002818 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e319      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ee      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bae:	d111      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bb0:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bbc:	4b04      	ldr	r3, [pc, #16]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	4901      	ldr	r1, [pc, #4]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	0ffffcff 	.word	0x0ffffcff
 8003bd4:	4baa      	ldr	r3, [pc, #680]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4aa9      	ldr	r2, [pc, #676]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bda:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bde:	6093      	str	r3, [r2, #8]
 8003be0:	4ba7      	ldr	r3, [pc, #668]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	49a4      	ldr	r1, [pc, #656]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d010      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfe:	4ba0      	ldr	r3, [pc, #640]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c04:	4a9e      	ldr	r2, [pc, #632]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	4999      	ldr	r1, [pc, #612]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2c:	4b94      	ldr	r3, [pc, #592]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c3a:	4991      	ldr	r1, [pc, #580]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4e:	4b8c      	ldr	r3, [pc, #560]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c5c:	4988      	ldr	r1, [pc, #544]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c70:	4b83      	ldr	r3, [pc, #524]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7e:	4980      	ldr	r1, [pc, #512]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c92:	4b7b      	ldr	r3, [pc, #492]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca0:	4977      	ldr	r1, [pc, #476]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb4:	4b72      	ldr	r3, [pc, #456]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	496f      	ldr	r1, [pc, #444]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f023 020c 	bic.w	r2, r3, #12
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce4:	4966      	ldr	r1, [pc, #408]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf8:	4b61      	ldr	r3, [pc, #388]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d06:	495e      	ldr	r1, [pc, #376]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d1a:	4b59      	ldr	r3, [pc, #356]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d20:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d28:	4955      	ldr	r1, [pc, #340]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3c:	4b50      	ldr	r3, [pc, #320]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	494d      	ldr	r1, [pc, #308]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d5e:	4b48      	ldr	r3, [pc, #288]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	4944      	ldr	r1, [pc, #272]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d80:	4b3f      	ldr	r3, [pc, #252]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8e:	493c      	ldr	r1, [pc, #240]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003da2:	4b37      	ldr	r3, [pc, #220]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db0:	4933      	ldr	r1, [pc, #204]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dd2:	492b      	ldr	r1, [pc, #172]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de6:	4b26      	ldr	r3, [pc, #152]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df4:	4922      	ldr	r1, [pc, #136]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e26:	4b16      	ldr	r3, [pc, #88]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e34:	4912      	ldr	r1, [pc, #72]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e48:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e58:	4909      	ldr	r1, [pc, #36]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d006      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80d9 	beq.w	8004026 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e74:	4b02      	ldr	r3, [pc, #8]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a01      	ldr	r2, [pc, #4]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e7e:	e001      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e86:	f7fe fcc7 	bl	8002818 <HAL_GetTick>
 8003e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e8e:	f7fe fcc3 	bl	8002818 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b64      	cmp	r3, #100	@ 0x64
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e194      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d021      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d11d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ec0:	4b64      	ldr	r3, [pc, #400]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ece:	4b61      	ldr	r3, [pc, #388]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed4:	0e1b      	lsrs	r3, r3, #24
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	019a      	lsls	r2, r3, #6
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	061b      	lsls	r3, r3, #24
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	071b      	lsls	r3, r3, #28
 8003ef4:	4957      	ldr	r1, [pc, #348]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d02e      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f26:	d129      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f28:	4b4a      	ldr	r3, [pc, #296]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f2e:	0c1b      	lsrs	r3, r3, #16
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f36:	4b47      	ldr	r3, [pc, #284]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3c:	0f1b      	lsrs	r3, r3, #28
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	019a      	lsls	r2, r3, #6
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	071b      	lsls	r3, r3, #28
 8003f5c:	493d      	ldr	r1, [pc, #244]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f64:	4b3b      	ldr	r3, [pc, #236]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6a:	f023 021f 	bic.w	r2, r3, #31
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	3b01      	subs	r3, #1
 8003f74:	4937      	ldr	r1, [pc, #220]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01d      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f88:	4b32      	ldr	r3, [pc, #200]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f8e:	0e1b      	lsrs	r3, r3, #24
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f96:	4b2f      	ldr	r3, [pc, #188]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f9c:	0f1b      	lsrs	r3, r3, #28
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	019a      	lsls	r2, r3, #6
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	071b      	lsls	r3, r3, #28
 8003fbc:	4925      	ldr	r1, [pc, #148]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d011      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	019a      	lsls	r2, r3, #6
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	061b      	lsls	r3, r3, #24
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	071b      	lsls	r3, r3, #28
 8003fec:	4919      	ldr	r1, [pc, #100]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff4:	4b17      	ldr	r3, [pc, #92]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a16      	ldr	r2, [pc, #88]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fe fc0a 	bl	8002818 <HAL_GetTick>
 8004004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004008:	f7fe fc06 	bl	8002818 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	@ 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e0d7      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800401a:	4b0e      	ldr	r3, [pc, #56]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b01      	cmp	r3, #1
 800402a:	f040 80cd 	bne.w	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800402e:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a08      	ldr	r2, [pc, #32]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403a:	f7fe fbed 	bl	8002818 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004042:	f7fe fbe9 	bl	8002818 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b64      	cmp	r3, #100	@ 0x64
 800404e:	d903      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0ba      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004054:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004058:	4b5e      	ldr	r3, [pc, #376]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004064:	d0ed      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004082:	2b00      	cmp	r3, #0
 8004084:	d02e      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d12a      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800408e:	4b51      	ldr	r3, [pc, #324]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800409c:	4b4d      	ldr	r3, [pc, #308]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	0f1b      	lsrs	r3, r3, #28
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	019a      	lsls	r2, r3, #6
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	061b      	lsls	r3, r3, #24
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	071b      	lsls	r3, r3, #28
 80040c2:	4944      	ldr	r1, [pc, #272]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040ca:	4b42      	ldr	r3, [pc, #264]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	493d      	ldr	r1, [pc, #244]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d022      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f8:	d11d      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040fa:	4b36      	ldr	r3, [pc, #216]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	0e1b      	lsrs	r3, r3, #24
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004108:	4b32      	ldr	r3, [pc, #200]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	0f1b      	lsrs	r3, r3, #28
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	019a      	lsls	r2, r3, #6
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	431a      	orrs	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	071b      	lsls	r3, r3, #28
 800412e:	4929      	ldr	r1, [pc, #164]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d028      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004142:	4b24      	ldr	r3, [pc, #144]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004148:	0e1b      	lsrs	r3, r3, #24
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004150:	4b20      	ldr	r3, [pc, #128]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004156:	0c1b      	lsrs	r3, r3, #16
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	019a      	lsls	r2, r3, #6
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	431a      	orrs	r2, r3
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	071b      	lsls	r3, r3, #28
 8004176:	4917      	ldr	r1, [pc, #92]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800417e:	4b15      	ldr	r3, [pc, #84]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004184:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	4911      	ldr	r1, [pc, #68]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004194:	4b0f      	ldr	r3, [pc, #60]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0e      	ldr	r2, [pc, #56]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800419e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fe fb3a 	bl	8002818 <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a8:	f7fe fb36 	bl	8002818 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	@ 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e007      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041ba:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041c6:	d1ef      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e09d      	b.n	8004326 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d108      	bne.n	8004204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041fa:	d009      	beq.n	8004210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	61da      	str	r2, [r3, #28]
 8004202:	e005      	b.n	8004210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fd ff9a 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004246:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004250:	d902      	bls.n	8004258 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e002      	b.n	800425e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800425c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004266:	d007      	beq.n	8004278 <HAL_SPI_Init+0xa0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004270:	d002      	beq.n	8004278 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	ea42 0103 	orr.w	r1, r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	0c1b      	lsrs	r3, r3, #16
 80042d4:	f003 0204 	and.w	r2, r3, #4
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80042f4:	ea42 0103 	orr.w	r1, r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004314:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b08a      	sub	sp, #40	@ 0x28
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800433c:	2301      	movs	r3, #1
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_SPI_TransmitReceive+0x26>
 8004350:	2302      	movs	r3, #2
 8004352:	e20a      	b.n	800476a <HAL_SPI_TransmitReceive+0x43c>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800435c:	f7fe fa5c 	bl	8002818 <HAL_GetTick>
 8004360:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004368:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004374:	887b      	ldrh	r3, [r7, #2]
 8004376:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004378:	7efb      	ldrb	r3, [r7, #27]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d00e      	beq.n	800439c <HAL_SPI_TransmitReceive+0x6e>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004384:	d106      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x66>
 800438e:	7efb      	ldrb	r3, [r7, #27]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d003      	beq.n	800439c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004394:	2302      	movs	r3, #2
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800439a:	e1e0      	b.n	800475e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_SPI_TransmitReceive+0x80>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_SPI_TransmitReceive+0x80>
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80043b4:	e1d3      	b.n	800475e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d003      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2205      	movs	r2, #5
 80043c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	887a      	ldrh	r2, [r7, #2]
 80043da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	887a      	ldrh	r2, [r7, #2]
 80043f6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800440c:	d802      	bhi.n	8004414 <HAL_SPI_TransmitReceive+0xe6>
 800440e:	8a3b      	ldrh	r3, [r7, #16]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d908      	bls.n	8004426 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	e007      	b.n	8004436 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004434:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d007      	beq.n	8004454 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800445c:	f240 8081 	bls.w	8004562 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_SPI_TransmitReceive+0x140>
 8004468:	8a7b      	ldrh	r3, [r7, #18]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d16d      	bne.n	800454a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447e:	1c9a      	adds	r2, r3, #2
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004492:	e05a      	b.n	800454a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d11b      	bne.n	80044da <HAL_SPI_TransmitReceive+0x1ac>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d016      	beq.n	80044da <HAL_SPI_TransmitReceive+0x1ac>
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d113      	bne.n	80044da <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	881a      	ldrh	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c2:	1c9a      	adds	r2, r3, #2
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d11c      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x1f4>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d016      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	b292      	uxth	r2, r2
 8004500:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	1c9a      	adds	r2, r3, #2
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800451e:	2301      	movs	r3, #1
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004522:	f7fe f979 	bl	8002818 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452e:	429a      	cmp	r2, r3
 8004530:	d80b      	bhi.n	800454a <HAL_SPI_TransmitReceive+0x21c>
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d007      	beq.n	800454a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004548:	e109      	b.n	800475e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d19f      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x166>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d199      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x166>
 8004560:	e0e3      	b.n	800472a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x244>
 800456a:	8a7b      	ldrh	r3, [r7, #18]
 800456c:	2b01      	cmp	r3, #1
 800456e:	f040 80cf 	bne.w	8004710 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d912      	bls.n	80045a2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b02      	subs	r3, #2
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045a0:	e0b6      	b.n	8004710 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c8:	e0a2      	b.n	8004710 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d134      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x314>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02f      	beq.n	8004642 <HAL_SPI_TransmitReceive+0x314>
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d12c      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d912      	bls.n	8004618 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	881a      	ldrh	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	1c9a      	adds	r2, r3, #2
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b02      	subs	r3, #2
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004616:	e012      	b.n	800463e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d148      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x3b4>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d042      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d923      	bls.n	80046b0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	b292      	uxth	r2, r2
 8004674:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	1c9a      	adds	r2, r3, #2
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b02      	subs	r3, #2
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d81f      	bhi.n	80046de <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	e016      	b.n	80046de <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f103 020c 	add.w	r2, r3, #12
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046de:	2301      	movs	r3, #1
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046e2:	f7fe f899 	bl	8002818 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d803      	bhi.n	80046fa <HAL_SPI_TransmitReceive+0x3cc>
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d102      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x3d2>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d107      	bne.n	8004710 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800470e:	e026      	b.n	800475e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	f47f af57 	bne.w	80045ca <HAL_SPI_TransmitReceive+0x29c>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	f47f af50 	bne.w	80045ca <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f93e 	bl	80049b0 <SPI_EndRxTxTransaction>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004754:	e003      	b.n	800475e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004766:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	@ 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004784:	f7fe f848 	bl	8002818 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	4413      	add	r3, r2
 8004792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004794:	f7fe f840 	bl	8002818 <HAL_GetTick>
 8004798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800479a:	4b39      	ldr	r3, [pc, #228]	@ (8004880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	015b      	lsls	r3, r3, #5
 80047a0:	0d1b      	lsrs	r3, r3, #20
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047aa:	e054      	b.n	8004856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d050      	beq.n	8004856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b4:	f7fe f830 	bl	8002818 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d902      	bls.n	80047ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d13d      	bne.n	8004846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e2:	d111      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ec:	d004      	beq.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f6:	d107      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004810:	d10f      	bne.n	8004832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e017      	b.n	8004876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	3b01      	subs	r3, #1
 8004854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4013      	ands	r3, r2
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	bf0c      	ite	eq
 8004866:	2301      	moveq	r3, #1
 8004868:	2300      	movne	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	429a      	cmp	r2, r3
 8004872:	d19b      	bne.n	80047ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000000c 	.word	0x2000000c

08004884 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	@ 0x28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004896:	f7fd ffbf 	bl	8002818 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	4413      	add	r3, r2
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80048a6:	f7fd ffb7 	bl	8002818 <HAL_GetTick>
 80048aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048b4:	4b3d      	ldr	r3, [pc, #244]	@ (80049ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	00da      	lsls	r2, r3, #3
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	0d1b      	lsrs	r3, r3, #20
 80048c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048cc:	e060      	b.n	8004990 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048d4:	d107      	bne.n	80048e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d050      	beq.n	8004990 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048ee:	f7fd ff93 	bl	8002818 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d902      	bls.n	8004904 <SPI_WaitFifoStateUntilTimeout+0x80>
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	d13d      	bne.n	8004980 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800491c:	d111      	bne.n	8004942 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004926:	d004      	beq.n	8004932 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004930:	d107      	bne.n	8004942 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004940:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494a:	d10f      	bne.n	800496c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800496a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e010      	b.n	80049a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	3b01      	subs	r3, #1
 800498e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d196      	bne.n	80048ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3728      	adds	r7, #40	@ 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	2000000c 	.word	0x2000000c

080049b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff ff5b 	bl	8004884 <SPI_WaitFifoStateUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e046      	b.n	8004a72 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049e4:	4b25      	ldr	r3, [pc, #148]	@ (8004a7c <SPI_EndRxTxTransaction+0xcc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a25      	ldr	r2, [pc, #148]	@ (8004a80 <SPI_EndRxTxTransaction+0xd0>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0d5b      	lsrs	r3, r3, #21
 80049f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a02:	d112      	bne.n	8004a2a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2180      	movs	r1, #128	@ 0x80
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff feb0 	bl	8004774 <SPI_WaitFlagStateUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e023      	b.n	8004a72 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a40:	2b80      	cmp	r3, #128	@ 0x80
 8004a42:	d0f2      	beq.n	8004a2a <SPI_EndRxTxTransaction+0x7a>
 8004a44:	e000      	b.n	8004a48 <SPI_EndRxTxTransaction+0x98>
        break;
 8004a46:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7ff ff15 	bl	8004884 <SPI_WaitFifoStateUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e000      	b.n	8004a72 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2000000c 	.word	0x2000000c
 8004a80:	165e9f81 	.word	0x165e9f81

08004a84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e049      	b.n	8004b2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd fc00 	bl	80022b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	f000 faea 	bl	800509c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <HAL_TIM_PWM_Start+0x24>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	bf14      	ite	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	2300      	moveq	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e03c      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x9e>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d109      	bne.n	8004b72 <HAL_TIM_PWM_Start+0x3e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	e02f      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x9e>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d109      	bne.n	8004b8c <HAL_TIM_PWM_Start+0x58>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e022      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x9e>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	d109      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x72>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e015      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x9e>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d109      	bne.n	8004bc0 <HAL_TIM_PWM_Start+0x8c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e008      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x9e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e092      	b.n	8004d00 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_PWM_Start+0xb6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be8:	e023      	b.n	8004c32 <HAL_TIM_PWM_Start+0xfe>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_PWM_Start+0xc6>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf8:	e01b      	b.n	8004c32 <HAL_TIM_PWM_Start+0xfe>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0xd6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c08:	e013      	b.n	8004c32 <HAL_TIM_PWM_Start+0xfe>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0xe6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c18:	e00b      	b.n	8004c32 <HAL_TIM_PWM_Start+0xfe>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0xf6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c28:	e003      	b.n	8004c32 <HAL_TIM_PWM_Start+0xfe>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fd38 	bl	80056b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a30      	ldr	r2, [pc, #192]	@ (8004d08 <HAL_TIM_PWM_Start+0x1d4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIM_PWM_Start+0x120>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d0c <HAL_TIM_PWM_Start+0x1d8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <HAL_TIM_PWM_Start+0x124>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_TIM_PWM_Start+0x126>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a25      	ldr	r2, [pc, #148]	@ (8004d08 <HAL_TIM_PWM_Start+0x1d4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x18a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c80:	d01d      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x18a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a22      	ldr	r2, [pc, #136]	@ (8004d10 <HAL_TIM_PWM_Start+0x1dc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x18a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a20      	ldr	r2, [pc, #128]	@ (8004d14 <HAL_TIM_PWM_Start+0x1e0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x18a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d18 <HAL_TIM_PWM_Start+0x1e4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x18a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a19      	ldr	r2, [pc, #100]	@ (8004d0c <HAL_TIM_PWM_Start+0x1d8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x18a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	@ (8004d1c <HAL_TIM_PWM_Start+0x1e8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIM_PWM_Start+0x18a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <HAL_TIM_PWM_Start+0x1ec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d115      	bne.n	8004cea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	4b17      	ldr	r3, [pc, #92]	@ (8004d24 <HAL_TIM_PWM_Start+0x1f0>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d015      	beq.n	8004cfc <HAL_TIM_PWM_Start+0x1c8>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd6:	d011      	beq.n	8004cfc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	e008      	b.n	8004cfc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e000      	b.n	8004cfe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	40010400 	.word	0x40010400
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40014000 	.word	0x40014000
 8004d20:	40001800 	.word	0x40001800
 8004d24:	00010007 	.word	0x00010007

08004d28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e08f      	b.n	8004e5c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fd fa69 	bl	8002228 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6899      	ldr	r1, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b3e      	ldr	r3, [pc, #248]	@ (8004e64 <HAL_TIM_Encoder_Init+0x13c>)
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f000 f98f 	bl	800509c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4b31      	ldr	r3, [pc, #196]	@ (8004e68 <HAL_TIM_Encoder_Init+0x140>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	4313      	orrs	r3, r2
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_TIM_Encoder_Init+0x144>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e70 <HAL_TIM_Encoder_Init+0x148>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	011a      	lsls	r2, r3, #4
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	4313      	orrs	r3, r2
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	fffebff8 	.word	0xfffebff8
 8004e68:	fffffcfc 	.word	0xfffffcfc
 8004e6c:	fffff3f3 	.word	0xfffff3f3
 8004e70:	ffff0f0f 	.word	0xffff0f0f

08004e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0ff      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b14      	cmp	r3, #20
 8004e9e:	f200 80f0 	bhi.w	8005082 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08005083 	.word	0x08005083
 8004eb0:	08005083 	.word	0x08005083
 8004eb4:	08005083 	.word	0x08005083
 8004eb8:	08004f3d 	.word	0x08004f3d
 8004ebc:	08005083 	.word	0x08005083
 8004ec0:	08005083 	.word	0x08005083
 8004ec4:	08005083 	.word	0x08005083
 8004ec8:	08004f7f 	.word	0x08004f7f
 8004ecc:	08005083 	.word	0x08005083
 8004ed0:	08005083 	.word	0x08005083
 8004ed4:	08005083 	.word	0x08005083
 8004ed8:	08004fbf 	.word	0x08004fbf
 8004edc:	08005083 	.word	0x08005083
 8004ee0:	08005083 	.word	0x08005083
 8004ee4:	08005083 	.word	0x08005083
 8004ee8:	08005001 	.word	0x08005001
 8004eec:	08005083 	.word	0x08005083
 8004ef0:	08005083 	.word	0x08005083
 8004ef4:	08005083 	.word	0x08005083
 8004ef8:	08005041 	.word	0x08005041
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f976 	bl	80051f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0208 	orr.w	r2, r2, #8
 8004f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0204 	bic.w	r2, r2, #4
 8004f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6999      	ldr	r1, [r3, #24]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	619a      	str	r2, [r3, #24]
      break;
 8004f3a:	e0a5      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f9c8 	bl	80052d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6999      	ldr	r1, [r3, #24]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	619a      	str	r2, [r3, #24]
      break;
 8004f7c:	e084      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fa1f 	bl	80053c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0208 	orr.w	r2, r2, #8
 8004f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0204 	bic.w	r2, r2, #4
 8004fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69d9      	ldr	r1, [r3, #28]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	61da      	str	r2, [r3, #28]
      break;
 8004fbc:	e064      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fa75 	bl	80054b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69d9      	ldr	r1, [r3, #28]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	021a      	lsls	r2, r3, #8
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	61da      	str	r2, [r3, #28]
      break;
 8004ffe:	e043      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 faac 	bl	8005564 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0208 	orr.w	r2, r2, #8
 800501a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0204 	bic.w	r2, r2, #4
 800502a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800503e:	e023      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fade 	bl	8005608 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800505a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800506a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	021a      	lsls	r2, r3, #8
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005080:	e002      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
      break;
 8005086:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005090:	7dfb      	ldrb	r3, [r7, #23]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop

0800509c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a46      	ldr	r2, [pc, #280]	@ (80051c8 <TIM_Base_SetConfig+0x12c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a43      	ldr	r2, [pc, #268]	@ (80051cc <TIM_Base_SetConfig+0x130>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a42      	ldr	r2, [pc, #264]	@ (80051d0 <TIM_Base_SetConfig+0x134>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a41      	ldr	r2, [pc, #260]	@ (80051d4 <TIM_Base_SetConfig+0x138>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a40      	ldr	r2, [pc, #256]	@ (80051d8 <TIM_Base_SetConfig+0x13c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a35      	ldr	r2, [pc, #212]	@ (80051c8 <TIM_Base_SetConfig+0x12c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fc:	d027      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a32      	ldr	r2, [pc, #200]	@ (80051cc <TIM_Base_SetConfig+0x130>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d023      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a31      	ldr	r2, [pc, #196]	@ (80051d0 <TIM_Base_SetConfig+0x134>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01f      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a30      	ldr	r2, [pc, #192]	@ (80051d4 <TIM_Base_SetConfig+0x138>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2f      	ldr	r2, [pc, #188]	@ (80051d8 <TIM_Base_SetConfig+0x13c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d017      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2e      	ldr	r2, [pc, #184]	@ (80051dc <TIM_Base_SetConfig+0x140>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2d      	ldr	r2, [pc, #180]	@ (80051e0 <TIM_Base_SetConfig+0x144>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00f      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2c      	ldr	r2, [pc, #176]	@ (80051e4 <TIM_Base_SetConfig+0x148>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2b      	ldr	r2, [pc, #172]	@ (80051e8 <TIM_Base_SetConfig+0x14c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2a      	ldr	r2, [pc, #168]	@ (80051ec <TIM_Base_SetConfig+0x150>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a29      	ldr	r2, [pc, #164]	@ (80051f0 <TIM_Base_SetConfig+0x154>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a10      	ldr	r2, [pc, #64]	@ (80051c8 <TIM_Base_SetConfig+0x12c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a12      	ldr	r2, [pc, #72]	@ (80051d8 <TIM_Base_SetConfig+0x13c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	611a      	str	r2, [r3, #16]
  }
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40010400 	.word	0x40010400
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800
 80051e8:	40001800 	.word	0x40001800
 80051ec:	40001c00 	.word	0x40001c00
 80051f0:	40002000 	.word	0x40002000

080051f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f023 0201 	bic.w	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4b2b      	ldr	r3, [pc, #172]	@ (80052cc <TIM_OC1_SetConfig+0xd8>)
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 0302 	bic.w	r3, r3, #2
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a21      	ldr	r2, [pc, #132]	@ (80052d0 <TIM_OC1_SetConfig+0xdc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC1_SetConfig+0x64>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a20      	ldr	r2, [pc, #128]	@ (80052d4 <TIM_OC1_SetConfig+0xe0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d10c      	bne.n	8005272 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0308 	bic.w	r3, r3, #8
 800525e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 0304 	bic.w	r3, r3, #4
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a16      	ldr	r2, [pc, #88]	@ (80052d0 <TIM_OC1_SetConfig+0xdc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_OC1_SetConfig+0x8e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a15      	ldr	r2, [pc, #84]	@ (80052d4 <TIM_OC1_SetConfig+0xe0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d111      	bne.n	80052a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	fffeff8f 	.word	0xfffeff8f
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400

080052d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	f023 0210 	bic.w	r2, r3, #16
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4b2e      	ldr	r3, [pc, #184]	@ (80053bc <TIM_OC2_SetConfig+0xe4>)
 8005304:	4013      	ands	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800530e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0320 	bic.w	r3, r3, #32
 8005322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a23      	ldr	r2, [pc, #140]	@ (80053c0 <TIM_OC2_SetConfig+0xe8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC2_SetConfig+0x68>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a22      	ldr	r2, [pc, #136]	@ (80053c4 <TIM_OC2_SetConfig+0xec>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10d      	bne.n	800535c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800535a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a18      	ldr	r2, [pc, #96]	@ (80053c0 <TIM_OC2_SetConfig+0xe8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC2_SetConfig+0x94>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a17      	ldr	r2, [pc, #92]	@ (80053c4 <TIM_OC2_SetConfig+0xec>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d113      	bne.n	8005394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800537a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	feff8fff 	.word	0xfeff8fff
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40010400 	.word	0x40010400

080053c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4b2d      	ldr	r3, [pc, #180]	@ (80054a8 <TIM_OC3_SetConfig+0xe0>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a22      	ldr	r2, [pc, #136]	@ (80054ac <TIM_OC3_SetConfig+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_OC3_SetConfig+0x66>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a21      	ldr	r2, [pc, #132]	@ (80054b0 <TIM_OC3_SetConfig+0xe8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10d      	bne.n	800544a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a17      	ldr	r2, [pc, #92]	@ (80054ac <TIM_OC3_SetConfig+0xe4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_OC3_SetConfig+0x92>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <TIM_OC3_SetConfig+0xe8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d113      	bne.n	8005482 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	fffeff8f 	.word	0xfffeff8f
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40010400 	.word	0x40010400

080054b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4b1e      	ldr	r3, [pc, #120]	@ (8005558 <TIM_OC4_SetConfig+0xa4>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	031b      	lsls	r3, r3, #12
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a13      	ldr	r2, [pc, #76]	@ (800555c <TIM_OC4_SetConfig+0xa8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_OC4_SetConfig+0x68>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a12      	ldr	r2, [pc, #72]	@ (8005560 <TIM_OC4_SetConfig+0xac>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d109      	bne.n	8005530 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	019b      	lsls	r3, r3, #6
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	feff8fff 	.word	0xfeff8fff
 800555c:	40010000 	.word	0x40010000
 8005560:	40010400 	.word	0x40010400

08005564 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <TIM_OC5_SetConfig+0x98>)
 8005590:	4013      	ands	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80055a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a12      	ldr	r2, [pc, #72]	@ (8005600 <TIM_OC5_SetConfig+0x9c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC5_SetConfig+0x5e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a11      	ldr	r2, [pc, #68]	@ (8005604 <TIM_OC5_SetConfig+0xa0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d109      	bne.n	80055d6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	fffeff8f 	.word	0xfffeff8f
 8005600:	40010000 	.word	0x40010000
 8005604:	40010400 	.word	0x40010400

08005608 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4b1c      	ldr	r3, [pc, #112]	@ (80056a4 <TIM_OC6_SetConfig+0x9c>)
 8005634:	4013      	ands	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800564a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	051b      	lsls	r3, r3, #20
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <TIM_OC6_SetConfig+0xa0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC6_SetConfig+0x60>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a12      	ldr	r2, [pc, #72]	@ (80056ac <TIM_OC6_SetConfig+0xa4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d109      	bne.n	800567c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800566e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	feff8fff 	.word	0xfeff8fff
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40010400 	.word	0x40010400

080056b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	2201      	movs	r2, #1
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	43db      	mvns	r3, r3
 80056d2:	401a      	ands	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1a      	ldr	r2, [r3, #32]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	fa01 f303 	lsl.w	r3, r1, r3
 80056e8:	431a      	orrs	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
}
 80056ee:	bf00      	nop
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005710:	2302      	movs	r3, #2
 8005712:	e06d      	b.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a30      	ldr	r2, [pc, #192]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2f      	ldr	r2, [pc, #188]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d108      	bne.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800574e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005760:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a20      	ldr	r2, [pc, #128]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005786:	d01d      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1d      	ldr	r2, [pc, #116]	@ (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1c      	ldr	r2, [pc, #112]	@ (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1a      	ldr	r2, [pc, #104]	@ (800580c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a16      	ldr	r2, [pc, #88]	@ (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a15      	ldr	r2, [pc, #84]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10c      	bne.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40010000 	.word	0x40010000
 8005800:	40010400 	.word	0x40010400
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40000c00 	.word	0x40000c00
 8005810:	40014000 	.word	0x40014000
 8005814:	40001800 	.word	0x40001800

08005818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e040      	b.n	80058ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fc fd90 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2224      	movs	r2, #36	@ 0x24
 8005844:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0201 	bic.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fb70 	bl	8005f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f909 	bl	8005a7c <UART_SetConfig>
 800586a:	4603      	mov	r3, r0
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e01b      	b.n	80058ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fbef 	bl	8006088 <UART_CheckIdleState>
 80058aa:	4603      	mov	r3, r0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	@ 0x28
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d177      	bne.n	80059bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_UART_Transmit+0x24>
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e070      	b.n	80059be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2221      	movs	r2, #33	@ 0x21
 80058e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ea:	f7fc ff95 	bl	8002818 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005908:	d108      	bne.n	800591c <HAL_UART_Transmit+0x68>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	e003      	b.n	8005924 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005924:	e02f      	b.n	8005986 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2200      	movs	r2, #0
 800592e:	2180      	movs	r1, #128	@ 0x80
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fc00 	bl	8006136 <UART_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e03b      	b.n	80059be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800595a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	3302      	adds	r3, #2
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	e007      	b.n	8005974 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	781a      	ldrb	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	3301      	adds	r3, #1
 8005972:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1c9      	bne.n	8005926 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2200      	movs	r2, #0
 800599a:	2140      	movs	r1, #64	@ 0x40
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fbca 	bl	8006136 <UART_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e005      	b.n	80059be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e000      	b.n	80059be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80059bc:	2302      	movs	r3, #2
  }
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08a      	sub	sp, #40	@ 0x28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	4613      	mov	r3, r2
 80059d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d132      	bne.n	8005a44 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_UART_Receive_IT+0x24>
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e02b      	b.n	8005a46 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d018      	beq.n	8005a34 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	623b      	str	r3, [r7, #32]
 8005a22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	69f9      	ldr	r1, [r7, #28]
 8005a26:	6a3a      	ldr	r2, [r7, #32]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	461a      	mov	r2, r3
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fbe8 	bl	8006210 <UART_Start_Receive_IT>
 8005a40:	4603      	mov	r3, r0
 8005a42:	e000      	b.n	8005a46 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3728      	adds	r7, #40	@ 0x28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4ba6      	ldr	r3, [pc, #664]	@ (8005d40 <UART_SetConfig+0x2c4>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a94      	ldr	r2, [pc, #592]	@ (8005d44 <UART_SetConfig+0x2c8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d120      	bne.n	8005b3a <UART_SetConfig+0xbe>
 8005af8:	4b93      	ldr	r3, [pc, #588]	@ (8005d48 <UART_SetConfig+0x2cc>)
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d816      	bhi.n	8005b34 <UART_SetConfig+0xb8>
 8005b06:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <UART_SetConfig+0x90>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b23 	.word	0x08005b23
 8005b18:	08005b2f 	.word	0x08005b2f
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e150      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005b22:	2302      	movs	r3, #2
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e14d      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e14a      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005b2e:	2308      	movs	r3, #8
 8005b30:	77fb      	strb	r3, [r7, #31]
 8005b32:	e147      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005b34:	2310      	movs	r3, #16
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e144      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a83      	ldr	r2, [pc, #524]	@ (8005d4c <UART_SetConfig+0x2d0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d132      	bne.n	8005baa <UART_SetConfig+0x12e>
 8005b44:	4b80      	ldr	r3, [pc, #512]	@ (8005d48 <UART_SetConfig+0x2cc>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	d828      	bhi.n	8005ba4 <UART_SetConfig+0x128>
 8005b52:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <UART_SetConfig+0xdc>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005ba5 	.word	0x08005ba5
 8005b60:	08005ba5 	.word	0x08005ba5
 8005b64:	08005ba5 	.word	0x08005ba5
 8005b68:	08005b99 	.word	0x08005b99
 8005b6c:	08005ba5 	.word	0x08005ba5
 8005b70:	08005ba5 	.word	0x08005ba5
 8005b74:	08005ba5 	.word	0x08005ba5
 8005b78:	08005b93 	.word	0x08005b93
 8005b7c:	08005ba5 	.word	0x08005ba5
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005ba5 	.word	0x08005ba5
 8005b88:	08005b9f 	.word	0x08005b9f
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e118      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005b92:	2302      	movs	r3, #2
 8005b94:	77fb      	strb	r3, [r7, #31]
 8005b96:	e115      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005b98:	2304      	movs	r3, #4
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e112      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	77fb      	strb	r3, [r7, #31]
 8005ba2:	e10f      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e10c      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a68      	ldr	r2, [pc, #416]	@ (8005d50 <UART_SetConfig+0x2d4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d120      	bne.n	8005bf6 <UART_SetConfig+0x17a>
 8005bb4:	4b64      	ldr	r3, [pc, #400]	@ (8005d48 <UART_SetConfig+0x2cc>)
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bbe:	2b30      	cmp	r3, #48	@ 0x30
 8005bc0:	d013      	beq.n	8005bea <UART_SetConfig+0x16e>
 8005bc2:	2b30      	cmp	r3, #48	@ 0x30
 8005bc4:	d814      	bhi.n	8005bf0 <UART_SetConfig+0x174>
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d009      	beq.n	8005bde <UART_SetConfig+0x162>
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d810      	bhi.n	8005bf0 <UART_SetConfig+0x174>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <UART_SetConfig+0x15c>
 8005bd2:	2b10      	cmp	r3, #16
 8005bd4:	d006      	beq.n	8005be4 <UART_SetConfig+0x168>
 8005bd6:	e00b      	b.n	8005bf0 <UART_SetConfig+0x174>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e0f2      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005bde:	2302      	movs	r3, #2
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e0ef      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005be4:	2304      	movs	r3, #4
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e0ec      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005bea:	2308      	movs	r3, #8
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e0e9      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e0e6      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a56      	ldr	r2, [pc, #344]	@ (8005d54 <UART_SetConfig+0x2d8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d120      	bne.n	8005c42 <UART_SetConfig+0x1c6>
 8005c00:	4b51      	ldr	r3, [pc, #324]	@ (8005d48 <UART_SetConfig+0x2cc>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c0c:	d013      	beq.n	8005c36 <UART_SetConfig+0x1ba>
 8005c0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x1c0>
 8005c12:	2b80      	cmp	r3, #128	@ 0x80
 8005c14:	d009      	beq.n	8005c2a <UART_SetConfig+0x1ae>
 8005c16:	2b80      	cmp	r3, #128	@ 0x80
 8005c18:	d810      	bhi.n	8005c3c <UART_SetConfig+0x1c0>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <UART_SetConfig+0x1a8>
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	d006      	beq.n	8005c30 <UART_SetConfig+0x1b4>
 8005c22:	e00b      	b.n	8005c3c <UART_SetConfig+0x1c0>
 8005c24:	2300      	movs	r3, #0
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e0cc      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e0c9      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c30:	2304      	movs	r3, #4
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e0c6      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c36:	2308      	movs	r3, #8
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e0c3      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e0c0      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a44      	ldr	r2, [pc, #272]	@ (8005d58 <UART_SetConfig+0x2dc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d125      	bne.n	8005c98 <UART_SetConfig+0x21c>
 8005c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d48 <UART_SetConfig+0x2cc>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c5a:	d017      	beq.n	8005c8c <UART_SetConfig+0x210>
 8005c5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c60:	d817      	bhi.n	8005c92 <UART_SetConfig+0x216>
 8005c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c66:	d00b      	beq.n	8005c80 <UART_SetConfig+0x204>
 8005c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c6c:	d811      	bhi.n	8005c92 <UART_SetConfig+0x216>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <UART_SetConfig+0x1fe>
 8005c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c76:	d006      	beq.n	8005c86 <UART_SetConfig+0x20a>
 8005c78:	e00b      	b.n	8005c92 <UART_SetConfig+0x216>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e0a1      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c80:	2302      	movs	r3, #2
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e09e      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c86:	2304      	movs	r3, #4
 8005c88:	77fb      	strb	r3, [r7, #31]
 8005c8a:	e09b      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e098      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c92:	2310      	movs	r3, #16
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e095      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8005d5c <UART_SetConfig+0x2e0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d125      	bne.n	8005cee <UART_SetConfig+0x272>
 8005ca2:	4b29      	ldr	r3, [pc, #164]	@ (8005d48 <UART_SetConfig+0x2cc>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005cac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cb0:	d017      	beq.n	8005ce2 <UART_SetConfig+0x266>
 8005cb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cb6:	d817      	bhi.n	8005ce8 <UART_SetConfig+0x26c>
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cbc:	d00b      	beq.n	8005cd6 <UART_SetConfig+0x25a>
 8005cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cc2:	d811      	bhi.n	8005ce8 <UART_SetConfig+0x26c>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <UART_SetConfig+0x254>
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ccc:	d006      	beq.n	8005cdc <UART_SetConfig+0x260>
 8005cce:	e00b      	b.n	8005ce8 <UART_SetConfig+0x26c>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e076      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e073      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e070      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e06d      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	77fb      	strb	r3, [r7, #31]
 8005cec:	e06a      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <UART_SetConfig+0x2e4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d138      	bne.n	8005d6a <UART_SetConfig+0x2ee>
 8005cf8:	4b13      	ldr	r3, [pc, #76]	@ (8005d48 <UART_SetConfig+0x2cc>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005d02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d06:	d017      	beq.n	8005d38 <UART_SetConfig+0x2bc>
 8005d08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d0c:	d82a      	bhi.n	8005d64 <UART_SetConfig+0x2e8>
 8005d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d12:	d00b      	beq.n	8005d2c <UART_SetConfig+0x2b0>
 8005d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d18:	d824      	bhi.n	8005d64 <UART_SetConfig+0x2e8>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <UART_SetConfig+0x2aa>
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d22:	d006      	beq.n	8005d32 <UART_SetConfig+0x2b6>
 8005d24:	e01e      	b.n	8005d64 <UART_SetConfig+0x2e8>
 8005d26:	2300      	movs	r3, #0
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e04b      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e048      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005d32:	2304      	movs	r3, #4
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e045      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e042      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005d3e:	bf00      	nop
 8005d40:	efff69f3 	.word	0xefff69f3
 8005d44:	40011000 	.word	0x40011000
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	40004400 	.word	0x40004400
 8005d50:	40004800 	.word	0x40004800
 8005d54:	40004c00 	.word	0x40004c00
 8005d58:	40005000 	.word	0x40005000
 8005d5c:	40011400 	.word	0x40011400
 8005d60:	40007800 	.word	0x40007800
 8005d64:	2310      	movs	r3, #16
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e02c      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a72      	ldr	r2, [pc, #456]	@ (8005f38 <UART_SetConfig+0x4bc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d125      	bne.n	8005dc0 <UART_SetConfig+0x344>
 8005d74:	4b71      	ldr	r3, [pc, #452]	@ (8005f3c <UART_SetConfig+0x4c0>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005d7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d82:	d017      	beq.n	8005db4 <UART_SetConfig+0x338>
 8005d84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d88:	d817      	bhi.n	8005dba <UART_SetConfig+0x33e>
 8005d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d8e:	d00b      	beq.n	8005da8 <UART_SetConfig+0x32c>
 8005d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d94:	d811      	bhi.n	8005dba <UART_SetConfig+0x33e>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <UART_SetConfig+0x326>
 8005d9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d9e:	d006      	beq.n	8005dae <UART_SetConfig+0x332>
 8005da0:	e00b      	b.n	8005dba <UART_SetConfig+0x33e>
 8005da2:	2300      	movs	r3, #0
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e00d      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005da8:	2302      	movs	r3, #2
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e00a      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005dae:	2304      	movs	r3, #4
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e007      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005db4:	2308      	movs	r3, #8
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e004      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	77fb      	strb	r3, [r7, #31]
 8005dbe:	e001      	b.n	8005dc4 <UART_SetConfig+0x348>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dcc:	d15b      	bne.n	8005e86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005dce:	7ffb      	ldrb	r3, [r7, #31]
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d828      	bhi.n	8005e26 <UART_SetConfig+0x3aa>
 8005dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x360>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	08005e27 	.word	0x08005e27
 8005dec:	08005e17 	.word	0x08005e17
 8005df0:	08005e27 	.word	0x08005e27
 8005df4:	08005e27 	.word	0x08005e27
 8005df8:	08005e27 	.word	0x08005e27
 8005dfc:	08005e1f 	.word	0x08005e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e00:	f7fd fdd2 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8005e04:	61b8      	str	r0, [r7, #24]
        break;
 8005e06:	e013      	b.n	8005e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e08:	f7fd fde2 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 8005e0c:	61b8      	str	r0, [r7, #24]
        break;
 8005e0e:	e00f      	b.n	8005e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e10:	4b4b      	ldr	r3, [pc, #300]	@ (8005f40 <UART_SetConfig+0x4c4>)
 8005e12:	61bb      	str	r3, [r7, #24]
        break;
 8005e14:	e00c      	b.n	8005e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e16:	f7fd fcb5 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8005e1a:	61b8      	str	r0, [r7, #24]
        break;
 8005e1c:	e008      	b.n	8005e30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e22:	61bb      	str	r3, [r7, #24]
        break;
 8005e24:	e004      	b.n	8005e30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d074      	beq.n	8005f20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	005a      	lsls	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	441a      	add	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b0f      	cmp	r3, #15
 8005e50:	d916      	bls.n	8005e80 <UART_SetConfig+0x404>
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e58:	d212      	bcs.n	8005e80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f023 030f 	bic.w	r3, r3, #15
 8005e62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	89fa      	ldrh	r2, [r7, #14]
 8005e7c:	60da      	str	r2, [r3, #12]
 8005e7e:	e04f      	b.n	8005f20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	77bb      	strb	r3, [r7, #30]
 8005e84:	e04c      	b.n	8005f20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e86:	7ffb      	ldrb	r3, [r7, #31]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d828      	bhi.n	8005ede <UART_SetConfig+0x462>
 8005e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e94 <UART_SetConfig+0x418>)
 8005e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e92:	bf00      	nop
 8005e94:	08005eb9 	.word	0x08005eb9
 8005e98:	08005ec1 	.word	0x08005ec1
 8005e9c:	08005ec9 	.word	0x08005ec9
 8005ea0:	08005edf 	.word	0x08005edf
 8005ea4:	08005ecf 	.word	0x08005ecf
 8005ea8:	08005edf 	.word	0x08005edf
 8005eac:	08005edf 	.word	0x08005edf
 8005eb0:	08005edf 	.word	0x08005edf
 8005eb4:	08005ed7 	.word	0x08005ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb8:	f7fd fd76 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8005ebc:	61b8      	str	r0, [r7, #24]
        break;
 8005ebe:	e013      	b.n	8005ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec0:	f7fd fd86 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 8005ec4:	61b8      	str	r0, [r7, #24]
        break;
 8005ec6:	e00f      	b.n	8005ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <UART_SetConfig+0x4c4>)
 8005eca:	61bb      	str	r3, [r7, #24]
        break;
 8005ecc:	e00c      	b.n	8005ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ece:	f7fd fc59 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8005ed2:	61b8      	str	r0, [r7, #24]
        break;
 8005ed4:	e008      	b.n	8005ee8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eda:	61bb      	str	r3, [r7, #24]
        break;
 8005edc:	e004      	b.n	8005ee8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ee6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d018      	beq.n	8005f20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	085a      	lsrs	r2, r3, #1
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	441a      	add	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b0f      	cmp	r3, #15
 8005f06:	d909      	bls.n	8005f1c <UART_SetConfig+0x4a0>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f0e:	d205      	bcs.n	8005f1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	e001      	b.n	8005f20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40007c00 	.word	0x40007c00
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	00f42400 	.word	0x00f42400

08005f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01a      	beq.n	800605a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006042:	d10a      	bne.n	800605a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08c      	sub	sp, #48	@ 0x30
 800608c:	af02      	add	r7, sp, #8
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006098:	f7fc fbbe 	bl	8002818 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d12e      	bne.n	800610a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	2200      	movs	r2, #0
 80060b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f83b 	bl	8006136 <UART_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d021      	beq.n	800610a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060da:	623b      	str	r3, [r7, #32]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	69b9      	ldr	r1, [r7, #24]
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	617b      	str	r3, [r7, #20]
   return(result);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e6      	bne.n	80060c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e011      	b.n	800612e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	@ 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006146:	e04f      	b.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d04b      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006150:	f7fc fb62 	bl	8002818 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	429a      	cmp	r2, r3
 800615e:	d302      	bcc.n	8006166 <UART_WaitOnFlagUntilTimeout+0x30>
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e04e      	b.n	8006208 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d037      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b80      	cmp	r3, #128	@ 0x80
 800617c:	d034      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b40      	cmp	r3, #64	@ 0x40
 8006182:	d031      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b08      	cmp	r3, #8
 8006190:	d110      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2208      	movs	r2, #8
 8006198:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f8fe 	bl	800639c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2208      	movs	r2, #8
 80061a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e029      	b.n	8006208 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c2:	d111      	bne.n	80061e8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f8e4 	bl	800639c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e00f      	b.n	8006208 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69da      	ldr	r2, [r3, #28]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	429a      	cmp	r2, r3
 8006204:	d0a0      	beq.n	8006148 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006210:	b480      	push	{r7}
 8006212:	b097      	sub	sp, #92	@ 0x5c
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	88fa      	ldrh	r2, [r7, #6]
 8006230:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006242:	d10e      	bne.n	8006262 <UART_Start_Receive_IT+0x52>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <UART_Start_Receive_IT+0x48>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006252:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006256:	e02d      	b.n	80062b4 <UART_Start_Receive_IT+0xa4>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	22ff      	movs	r2, #255	@ 0xff
 800625c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006260:	e028      	b.n	80062b4 <UART_Start_Receive_IT+0xa4>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10d      	bne.n	8006286 <UART_Start_Receive_IT+0x76>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <UART_Start_Receive_IT+0x6c>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	22ff      	movs	r2, #255	@ 0xff
 8006276:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800627a:	e01b      	b.n	80062b4 <UART_Start_Receive_IT+0xa4>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	227f      	movs	r2, #127	@ 0x7f
 8006280:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006284:	e016      	b.n	80062b4 <UART_Start_Receive_IT+0xa4>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800628e:	d10d      	bne.n	80062ac <UART_Start_Receive_IT+0x9c>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <UART_Start_Receive_IT+0x92>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	227f      	movs	r2, #127	@ 0x7f
 800629c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062a0:	e008      	b.n	80062b4 <UART_Start_Receive_IT+0xa4>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	223f      	movs	r2, #63	@ 0x3f
 80062a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062aa:	e003      	b.n	80062b4 <UART_Start_Receive_IT+0xa4>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2222      	movs	r2, #34	@ 0x22
 80062c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	657b      	str	r3, [r7, #84]	@ 0x54
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3308      	adds	r3, #8
 80062e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80062e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80062f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e5      	bne.n	80062c4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006300:	d107      	bne.n	8006312 <UART_Start_Receive_IT+0x102>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d103      	bne.n	8006312 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a21      	ldr	r2, [pc, #132]	@ (8006394 <UART_Start_Receive_IT+0x184>)
 800630e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006310:	e002      	b.n	8006318 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4a20      	ldr	r2, [pc, #128]	@ (8006398 <UART_Start_Receive_IT+0x188>)
 8006316:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d019      	beq.n	8006354 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800633e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006340:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800634c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e6      	bne.n	8006320 <UART_Start_Receive_IT+0x110>
 8006352:	e018      	b.n	8006386 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	613b      	str	r3, [r7, #16]
   return(result);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f043 0320 	orr.w	r3, r3, #32
 8006368:	653b      	str	r3, [r7, #80]	@ 0x50
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006372:	623b      	str	r3, [r7, #32]
 8006374:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	69f9      	ldr	r1, [r7, #28]
 8006378:	6a3a      	ldr	r2, [r7, #32]
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e6      	bne.n	8006354 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	375c      	adds	r7, #92	@ 0x5c
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	0800660d 	.word	0x0800660d
 8006398:	08006465 	.word	0x08006465

0800639c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b095      	sub	sp, #84	@ 0x54
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80063c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e6      	bne.n	80063a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e5      	bne.n	80063d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800640e:	2b01      	cmp	r3, #1
 8006410:	d118      	bne.n	8006444 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f023 0310 	bic.w	r3, r3, #16
 8006426:	647b      	str	r3, [r7, #68]	@ 0x44
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6979      	ldr	r1, [r7, #20]
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	613b      	str	r3, [r7, #16]
   return(result);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006458:	bf00      	nop
 800645a:	3754      	adds	r7, #84	@ 0x54
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b09c      	sub	sp, #112	@ 0x70
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006472:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647c:	2b22      	cmp	r3, #34	@ 0x22
 800647e:	f040 80b9 	bne.w	80065f4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800648c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006490:	b2d9      	uxtb	r1, r3
 8006492:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006496:	b2da      	uxtb	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649c:	400a      	ands	r2, r1
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 809c 	bne.w	8006604 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3308      	adds	r3, #8
 8006504:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	667b      	str	r3, [r7, #100]	@ 0x64
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3308      	adds	r3, #8
 800651c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800651e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006520:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006524:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800652c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d018      	beq.n	8006586 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	623b      	str	r3, [r7, #32]
   return(result);
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006568:	663b      	str	r3, [r7, #96]	@ 0x60
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006572:	633b      	str	r3, [r7, #48]	@ 0x30
 8006574:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e6      	bne.n	8006554 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800658a:	2b01      	cmp	r3, #1
 800658c:	d12e      	bne.n	80065ec <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f023 0310 	bic.w	r3, r3, #16
 80065a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	69b9      	ldr	r1, [r7, #24]
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	617b      	str	r3, [r7, #20]
   return(result);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e6      	bne.n	8006594 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d103      	bne.n	80065dc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2210      	movs	r2, #16
 80065da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fa3c 	bl	8005a62 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065ea:	e00b      	b.n	8006604 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff fa2e 	bl	8005a4e <HAL_UART_RxCpltCallback>
}
 80065f2:	e007      	b.n	8006604 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0208 	orr.w	r2, r2, #8
 8006602:	619a      	str	r2, [r3, #24]
}
 8006604:	bf00      	nop
 8006606:	3770      	adds	r7, #112	@ 0x70
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b09c      	sub	sp, #112	@ 0x70
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800661a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006624:	2b22      	cmp	r3, #34	@ 0x22
 8006626:	f040 80b9 	bne.w	800679c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006630:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006638:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800663a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800663e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006642:	4013      	ands	r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006648:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664e:	1c9a      	adds	r2, r3, #2
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	f040 809c 	bne.w	80067ac <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006688:	667b      	str	r3, [r7, #100]	@ 0x64
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006692:	657b      	str	r3, [r7, #84]	@ 0x54
 8006694:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006698:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e6      	bne.n	8006674 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3308      	adds	r3, #8
 80066c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e5      	bne.n	80066a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d018      	beq.n	800672e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	61fb      	str	r3, [r7, #28]
   return(result);
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800671a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800671c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e6      	bne.n	80066fc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006732:	2b01      	cmp	r3, #1
 8006734:	d12e      	bne.n	8006794 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	60bb      	str	r3, [r7, #8]
   return(result);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 0310 	bic.w	r3, r3, #16
 8006750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	613b      	str	r3, [r7, #16]
   return(result);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e6      	bne.n	800673c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b10      	cmp	r3, #16
 800677a:	d103      	bne.n	8006784 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2210      	movs	r2, #16
 8006782:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff f968 	bl	8005a62 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006792:	e00b      	b.n	80067ac <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff f95a 	bl	8005a4e <HAL_UART_RxCpltCallback>
}
 800679a:	e007      	b.n	80067ac <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0208 	orr.w	r2, r2, #8
 80067aa:	619a      	str	r2, [r3, #24]
}
 80067ac:	bf00      	nop
 80067ae:	3770      	adds	r7, #112	@ 0x70
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067b4:	b084      	sub	sp, #16
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	f107 001c 	add.w	r0, r7, #28
 80067c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d121      	bne.n	8006812 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	4b21      	ldr	r3, [pc, #132]	@ (8006864 <USB_CoreInit+0xb0>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d105      	bne.n	8006806 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa92 	bl	8006d30 <USB_CoreReset>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]
 8006810:	e010      	b.n	8006834 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa86 	bl	8006d30 <USB_CoreReset>
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006834:	7fbb      	ldrb	r3, [r7, #30]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10b      	bne.n	8006852 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f043 0206 	orr.w	r2, r3, #6
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006852:	7bfb      	ldrb	r3, [r7, #15]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800685e:	b004      	add	sp, #16
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	ffbdffbf 	.word	0xffbdffbf

08006868 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f023 0201 	bic.w	r2, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d115      	bne.n	80068d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068b8:	200a      	movs	r0, #10
 80068ba:	f7fb ffb9 	bl	8002830 <HAL_Delay>
      ms += 10U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	330a      	adds	r3, #10
 80068c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fa25 	bl	8006d14 <USB_GetMode>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d01e      	beq.n	800690e <USB_SetCurrentMode+0x84>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80068d4:	d9f0      	bls.n	80068b8 <USB_SetCurrentMode+0x2e>
 80068d6:	e01a      	b.n	800690e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d115      	bne.n	800690a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80068ea:	200a      	movs	r0, #10
 80068ec:	f7fb ffa0 	bl	8002830 <HAL_Delay>
      ms += 10U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	330a      	adds	r3, #10
 80068f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fa0c 	bl	8006d14 <USB_GetMode>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <USB_SetCurrentMode+0x84>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2bc7      	cmp	r3, #199	@ 0xc7
 8006906:	d9f0      	bls.n	80068ea <USB_SetCurrentMode+0x60>
 8006908:	e001      	b.n	800690e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e005      	b.n	800691a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2bc8      	cmp	r3, #200	@ 0xc8
 8006912:	d101      	bne.n	8006918 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006924:	b084      	sub	sp, #16
 8006926:	b580      	push	{r7, lr}
 8006928:	b086      	sub	sp, #24
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	e009      	b.n	8006958 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3340      	adds	r3, #64	@ 0x40
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	2200      	movs	r2, #0
 8006950:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	3301      	adds	r3, #1
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b0e      	cmp	r3, #14
 800695c:	d9f2      	bls.n	8006944 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800695e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006962:	2b00      	cmp	r3, #0
 8006964:	d11c      	bne.n	80069a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	e005      	b.n	80069ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069b2:	461a      	mov	r2, r3
 80069b4:	2300      	movs	r3, #0
 80069b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10d      	bne.n	80069dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069c8:	2100      	movs	r1, #0
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f968 	bl	8006ca0 <USB_SetDevSpeed>
 80069d0:	e008      	b.n	80069e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069d2:	2101      	movs	r1, #1
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f963 	bl	8006ca0 <USB_SetDevSpeed>
 80069da:	e003      	b.n	80069e4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069dc:	2103      	movs	r1, #3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f95e 	bl	8006ca0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069e4:	2110      	movs	r1, #16
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f8fa 	bl	8006be0 <USB_FlushTxFifo>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f924 	bl	8006c44 <USB_FlushRxFifo>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a24:	461a      	mov	r2, r3
 8006a26:	2300      	movs	r3, #0
 8006a28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	e043      	b.n	8006ab8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a46:	d118      	bne.n	8006a7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e013      	b.n	8006a8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a70:	461a      	mov	r2, r3
 8006a72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	e008      	b.n	8006a8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a86:	461a      	mov	r2, r3
 8006a88:	2300      	movs	r3, #0
 8006a8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006abc:	461a      	mov	r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d3b5      	bcc.n	8006a30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	e043      	b.n	8006b52 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006adc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ae0:	d118      	bne.n	8006b14 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af4:	461a      	mov	r2, r3
 8006af6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	e013      	b.n	8006b26 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e008      	b.n	8006b26 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b20:	461a      	mov	r2, r3
 8006b22:	2300      	movs	r3, #0
 8006b24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b32:	461a      	mov	r2, r3
 8006b34:	2300      	movs	r3, #0
 8006b36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b44:	461a      	mov	r2, r3
 8006b46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b56:	461a      	mov	r2, r3
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d3b5      	bcc.n	8006aca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006b7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d105      	bne.n	8006b94 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	f043 0210 	orr.w	r2, r3, #16
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699a      	ldr	r2, [r3, #24]
 8006b98:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd8 <USB_DevInit+0x2b4>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ba0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f043 0208 	orr.w	r2, r3, #8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d105      	bne.n	8006bc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <USB_DevInit+0x2b8>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bd4:	b004      	add	sp, #16
 8006bd6:	4770      	bx	lr
 8006bd8:	803c3800 	.word	0x803c3800
 8006bdc:	40000004 	.word	0x40000004

08006be0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bfa:	d901      	bls.n	8006c00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e01b      	b.n	8006c38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	daf2      	bge.n	8006bee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	019b      	lsls	r3, r3, #6
 8006c10:	f043 0220 	orr.w	r2, r3, #32
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c24:	d901      	bls.n	8006c2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e006      	b.n	8006c38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0320 	and.w	r3, r3, #32
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d0f0      	beq.n	8006c18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c5c:	d901      	bls.n	8006c62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e018      	b.n	8006c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	daf2      	bge.n	8006c50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2210      	movs	r2, #16
 8006c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c80:	d901      	bls.n	8006c86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e006      	b.n	8006c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0310 	and.w	r3, r3, #16
 8006c8e:	2b10      	cmp	r3, #16
 8006c90:	d0f0      	beq.n	8006c74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006cec:	f023 0303 	bic.w	r3, r3, #3
 8006cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d00:	f043 0302 	orr.w	r3, r3, #2
 8006d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f003 0301 	and.w	r3, r3, #1
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d48:	d901      	bls.n	8006d4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e01b      	b.n	8006d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	daf2      	bge.n	8006d3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f043 0201 	orr.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d72:	d901      	bls.n	8006d78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e006      	b.n	8006d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d0f0      	beq.n	8006d66 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <arm_pid_init_f32>:
 8006d94:	ed90 7a08 	vldr	s14, [r0, #32]
 8006d98:	edd0 7a06 	vldr	s15, [r0, #24]
 8006d9c:	ed90 6a07 	vldr	s12, [r0, #28]
 8006da0:	eef1 6a67 	vneg.f32	s13, s15
 8006da4:	ed80 7a02 	vstr	s14, [r0, #8]
 8006da8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006dac:	ee37 6a07 	vadd.f32	s12, s14, s14
 8006db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006db4:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8006db8:	edc0 7a00 	vstr	s15, [r0]
 8006dbc:	ed80 7a01 	vstr	s14, [r0, #4]
 8006dc0:	b901      	cbnz	r1, 8006dc4 <arm_pid_init_f32+0x30>
 8006dc2:	4770      	bx	lr
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60c3      	str	r3, [r0, #12]
 8006dc8:	6103      	str	r3, [r0, #16]
 8006dca:	6143      	str	r3, [r0, #20]
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop

08006dd0 <__cvt>:
 8006dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd4:	ec57 6b10 	vmov	r6, r7, d0
 8006dd8:	2f00      	cmp	r7, #0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4619      	mov	r1, r3
 8006dde:	463b      	mov	r3, r7
 8006de0:	bfbb      	ittet	lt
 8006de2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006de6:	461f      	movlt	r7, r3
 8006de8:	2300      	movge	r3, #0
 8006dea:	232d      	movlt	r3, #45	@ 0x2d
 8006dec:	700b      	strb	r3, [r1, #0]
 8006dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006df0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006df4:	4691      	mov	r9, r2
 8006df6:	f023 0820 	bic.w	r8, r3, #32
 8006dfa:	bfbc      	itt	lt
 8006dfc:	4632      	movlt	r2, r6
 8006dfe:	4616      	movlt	r6, r2
 8006e00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e04:	d005      	beq.n	8006e12 <__cvt+0x42>
 8006e06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e0a:	d100      	bne.n	8006e0e <__cvt+0x3e>
 8006e0c:	3401      	adds	r4, #1
 8006e0e:	2102      	movs	r1, #2
 8006e10:	e000      	b.n	8006e14 <__cvt+0x44>
 8006e12:	2103      	movs	r1, #3
 8006e14:	ab03      	add	r3, sp, #12
 8006e16:	9301      	str	r3, [sp, #4]
 8006e18:	ab02      	add	r3, sp, #8
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	ec47 6b10 	vmov	d0, r6, r7
 8006e20:	4653      	mov	r3, sl
 8006e22:	4622      	mov	r2, r4
 8006e24:	f000 fe5c 	bl	8007ae0 <_dtoa_r>
 8006e28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	d119      	bne.n	8006e64 <__cvt+0x94>
 8006e30:	f019 0f01 	tst.w	r9, #1
 8006e34:	d00e      	beq.n	8006e54 <__cvt+0x84>
 8006e36:	eb00 0904 	add.w	r9, r0, r4
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4630      	mov	r0, r6
 8006e40:	4639      	mov	r1, r7
 8006e42:	f7f9 fe61 	bl	8000b08 <__aeabi_dcmpeq>
 8006e46:	b108      	cbz	r0, 8006e4c <__cvt+0x7c>
 8006e48:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e4c:	2230      	movs	r2, #48	@ 0x30
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	454b      	cmp	r3, r9
 8006e52:	d31e      	bcc.n	8006e92 <__cvt+0xc2>
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e58:	1b5b      	subs	r3, r3, r5
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	b004      	add	sp, #16
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e68:	eb00 0904 	add.w	r9, r0, r4
 8006e6c:	d1e5      	bne.n	8006e3a <__cvt+0x6a>
 8006e6e:	7803      	ldrb	r3, [r0, #0]
 8006e70:	2b30      	cmp	r3, #48	@ 0x30
 8006e72:	d10a      	bne.n	8006e8a <__cvt+0xba>
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fe44 	bl	8000b08 <__aeabi_dcmpeq>
 8006e80:	b918      	cbnz	r0, 8006e8a <__cvt+0xba>
 8006e82:	f1c4 0401 	rsb	r4, r4, #1
 8006e86:	f8ca 4000 	str.w	r4, [sl]
 8006e8a:	f8da 3000 	ldr.w	r3, [sl]
 8006e8e:	4499      	add	r9, r3
 8006e90:	e7d3      	b.n	8006e3a <__cvt+0x6a>
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	9103      	str	r1, [sp, #12]
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e7d9      	b.n	8006e4e <__cvt+0x7e>

08006e9a <__exponent>:
 8006e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	bfba      	itte	lt
 8006ea0:	4249      	neglt	r1, r1
 8006ea2:	232d      	movlt	r3, #45	@ 0x2d
 8006ea4:	232b      	movge	r3, #43	@ 0x2b
 8006ea6:	2909      	cmp	r1, #9
 8006ea8:	7002      	strb	r2, [r0, #0]
 8006eaa:	7043      	strb	r3, [r0, #1]
 8006eac:	dd29      	ble.n	8006f02 <__exponent+0x68>
 8006eae:	f10d 0307 	add.w	r3, sp, #7
 8006eb2:	461d      	mov	r5, r3
 8006eb4:	270a      	movs	r7, #10
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ebc:	fb07 1416 	mls	r4, r7, r6, r1
 8006ec0:	3430      	adds	r4, #48	@ 0x30
 8006ec2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	2c63      	cmp	r4, #99	@ 0x63
 8006eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ece:	4631      	mov	r1, r6
 8006ed0:	dcf1      	bgt.n	8006eb6 <__exponent+0x1c>
 8006ed2:	3130      	adds	r1, #48	@ 0x30
 8006ed4:	1e94      	subs	r4, r2, #2
 8006ed6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006eda:	1c41      	adds	r1, r0, #1
 8006edc:	4623      	mov	r3, r4
 8006ede:	42ab      	cmp	r3, r5
 8006ee0:	d30a      	bcc.n	8006ef8 <__exponent+0x5e>
 8006ee2:	f10d 0309 	add.w	r3, sp, #9
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	42ac      	cmp	r4, r5
 8006eea:	bf88      	it	hi
 8006eec:	2300      	movhi	r3, #0
 8006eee:	3302      	adds	r3, #2
 8006ef0:	4403      	add	r3, r0
 8006ef2:	1a18      	subs	r0, r3, r0
 8006ef4:	b003      	add	sp, #12
 8006ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006efc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f00:	e7ed      	b.n	8006ede <__exponent+0x44>
 8006f02:	2330      	movs	r3, #48	@ 0x30
 8006f04:	3130      	adds	r1, #48	@ 0x30
 8006f06:	7083      	strb	r3, [r0, #2]
 8006f08:	70c1      	strb	r1, [r0, #3]
 8006f0a:	1d03      	adds	r3, r0, #4
 8006f0c:	e7f1      	b.n	8006ef2 <__exponent+0x58>
	...

08006f10 <_printf_float>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	b08d      	sub	sp, #52	@ 0x34
 8006f16:	460c      	mov	r4, r1
 8006f18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	461f      	mov	r7, r3
 8006f20:	4605      	mov	r5, r0
 8006f22:	f000 fcdb 	bl	80078dc <_localeconv_r>
 8006f26:	6803      	ldr	r3, [r0, #0]
 8006f28:	9304      	str	r3, [sp, #16]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7f9 f9c0 	bl	80002b0 <strlen>
 8006f30:	2300      	movs	r3, #0
 8006f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f34:	f8d8 3000 	ldr.w	r3, [r8]
 8006f38:	9005      	str	r0, [sp, #20]
 8006f3a:	3307      	adds	r3, #7
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	f103 0208 	add.w	r2, r3, #8
 8006f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f48:	f8d4 b000 	ldr.w	fp, [r4]
 8006f4c:	f8c8 2000 	str.w	r2, [r8]
 8006f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f58:	9307      	str	r3, [sp, #28]
 8006f5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f66:	4b9c      	ldr	r3, [pc, #624]	@ (80071d8 <_printf_float+0x2c8>)
 8006f68:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6c:	f7f9 fdfe 	bl	8000b6c <__aeabi_dcmpun>
 8006f70:	bb70      	cbnz	r0, 8006fd0 <_printf_float+0xc0>
 8006f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f76:	4b98      	ldr	r3, [pc, #608]	@ (80071d8 <_printf_float+0x2c8>)
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	f7f9 fdd8 	bl	8000b30 <__aeabi_dcmple>
 8006f80:	bb30      	cbnz	r0, 8006fd0 <_printf_float+0xc0>
 8006f82:	2200      	movs	r2, #0
 8006f84:	2300      	movs	r3, #0
 8006f86:	4640      	mov	r0, r8
 8006f88:	4649      	mov	r1, r9
 8006f8a:	f7f9 fdc7 	bl	8000b1c <__aeabi_dcmplt>
 8006f8e:	b110      	cbz	r0, 8006f96 <_printf_float+0x86>
 8006f90:	232d      	movs	r3, #45	@ 0x2d
 8006f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f96:	4a91      	ldr	r2, [pc, #580]	@ (80071dc <_printf_float+0x2cc>)
 8006f98:	4b91      	ldr	r3, [pc, #580]	@ (80071e0 <_printf_float+0x2d0>)
 8006f9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f9e:	bf94      	ite	ls
 8006fa0:	4690      	movls	r8, r2
 8006fa2:	4698      	movhi	r8, r3
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	f02b 0304 	bic.w	r3, fp, #4
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	f04f 0900 	mov.w	r9, #0
 8006fb2:	9700      	str	r7, [sp, #0]
 8006fb4:	4633      	mov	r3, r6
 8006fb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f000 f9d2 	bl	8007364 <_printf_common>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f040 808d 	bne.w	80070e0 <_printf_float+0x1d0>
 8006fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fca:	b00d      	add	sp, #52	@ 0x34
 8006fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 fdc8 	bl	8000b6c <__aeabi_dcmpun>
 8006fdc:	b140      	cbz	r0, 8006ff0 <_printf_float+0xe0>
 8006fde:	464b      	mov	r3, r9
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bfbc      	itt	lt
 8006fe4:	232d      	movlt	r3, #45	@ 0x2d
 8006fe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fea:	4a7e      	ldr	r2, [pc, #504]	@ (80071e4 <_printf_float+0x2d4>)
 8006fec:	4b7e      	ldr	r3, [pc, #504]	@ (80071e8 <_printf_float+0x2d8>)
 8006fee:	e7d4      	b.n	8006f9a <_printf_float+0x8a>
 8006ff0:	6863      	ldr	r3, [r4, #4]
 8006ff2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006ff6:	9206      	str	r2, [sp, #24]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	d13b      	bne.n	8007074 <_printf_float+0x164>
 8006ffc:	2306      	movs	r3, #6
 8006ffe:	6063      	str	r3, [r4, #4]
 8007000:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007004:	2300      	movs	r3, #0
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	9303      	str	r3, [sp, #12]
 800700a:	ab0a      	add	r3, sp, #40	@ 0x28
 800700c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007010:	ab09      	add	r3, sp, #36	@ 0x24
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	6861      	ldr	r1, [r4, #4]
 8007016:	ec49 8b10 	vmov	d0, r8, r9
 800701a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800701e:	4628      	mov	r0, r5
 8007020:	f7ff fed6 	bl	8006dd0 <__cvt>
 8007024:	9b06      	ldr	r3, [sp, #24]
 8007026:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007028:	2b47      	cmp	r3, #71	@ 0x47
 800702a:	4680      	mov	r8, r0
 800702c:	d129      	bne.n	8007082 <_printf_float+0x172>
 800702e:	1cc8      	adds	r0, r1, #3
 8007030:	db02      	blt.n	8007038 <_printf_float+0x128>
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	4299      	cmp	r1, r3
 8007036:	dd41      	ble.n	80070bc <_printf_float+0x1ac>
 8007038:	f1aa 0a02 	sub.w	sl, sl, #2
 800703c:	fa5f fa8a 	uxtb.w	sl, sl
 8007040:	3901      	subs	r1, #1
 8007042:	4652      	mov	r2, sl
 8007044:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007048:	9109      	str	r1, [sp, #36]	@ 0x24
 800704a:	f7ff ff26 	bl	8006e9a <__exponent>
 800704e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007050:	1813      	adds	r3, r2, r0
 8007052:	2a01      	cmp	r2, #1
 8007054:	4681      	mov	r9, r0
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	dc02      	bgt.n	8007060 <_printf_float+0x150>
 800705a:	6822      	ldr	r2, [r4, #0]
 800705c:	07d2      	lsls	r2, r2, #31
 800705e:	d501      	bpl.n	8007064 <_printf_float+0x154>
 8007060:	3301      	adds	r3, #1
 8007062:	6123      	str	r3, [r4, #16]
 8007064:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0a2      	beq.n	8006fb2 <_printf_float+0xa2>
 800706c:	232d      	movs	r3, #45	@ 0x2d
 800706e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007072:	e79e      	b.n	8006fb2 <_printf_float+0xa2>
 8007074:	9a06      	ldr	r2, [sp, #24]
 8007076:	2a47      	cmp	r2, #71	@ 0x47
 8007078:	d1c2      	bne.n	8007000 <_printf_float+0xf0>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1c0      	bne.n	8007000 <_printf_float+0xf0>
 800707e:	2301      	movs	r3, #1
 8007080:	e7bd      	b.n	8006ffe <_printf_float+0xee>
 8007082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007086:	d9db      	bls.n	8007040 <_printf_float+0x130>
 8007088:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800708c:	d118      	bne.n	80070c0 <_printf_float+0x1b0>
 800708e:	2900      	cmp	r1, #0
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	dd0b      	ble.n	80070ac <_printf_float+0x19c>
 8007094:	6121      	str	r1, [r4, #16]
 8007096:	b913      	cbnz	r3, 800709e <_printf_float+0x18e>
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	07d0      	lsls	r0, r2, #31
 800709c:	d502      	bpl.n	80070a4 <_printf_float+0x194>
 800709e:	3301      	adds	r3, #1
 80070a0:	440b      	add	r3, r1
 80070a2:	6123      	str	r3, [r4, #16]
 80070a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	e7db      	b.n	8007064 <_printf_float+0x154>
 80070ac:	b913      	cbnz	r3, 80070b4 <_printf_float+0x1a4>
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	07d2      	lsls	r2, r2, #31
 80070b2:	d501      	bpl.n	80070b8 <_printf_float+0x1a8>
 80070b4:	3302      	adds	r3, #2
 80070b6:	e7f4      	b.n	80070a2 <_printf_float+0x192>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e7f2      	b.n	80070a2 <_printf_float+0x192>
 80070bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c2:	4299      	cmp	r1, r3
 80070c4:	db05      	blt.n	80070d2 <_printf_float+0x1c2>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	6121      	str	r1, [r4, #16]
 80070ca:	07d8      	lsls	r0, r3, #31
 80070cc:	d5ea      	bpl.n	80070a4 <_printf_float+0x194>
 80070ce:	1c4b      	adds	r3, r1, #1
 80070d0:	e7e7      	b.n	80070a2 <_printf_float+0x192>
 80070d2:	2900      	cmp	r1, #0
 80070d4:	bfd4      	ite	le
 80070d6:	f1c1 0202 	rsble	r2, r1, #2
 80070da:	2201      	movgt	r2, #1
 80070dc:	4413      	add	r3, r2
 80070de:	e7e0      	b.n	80070a2 <_printf_float+0x192>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	055a      	lsls	r2, r3, #21
 80070e4:	d407      	bmi.n	80070f6 <_printf_float+0x1e6>
 80070e6:	6923      	ldr	r3, [r4, #16]
 80070e8:	4642      	mov	r2, r8
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	d12b      	bne.n	800714c <_printf_float+0x23c>
 80070f4:	e767      	b.n	8006fc6 <_printf_float+0xb6>
 80070f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070fa:	f240 80dd 	bls.w	80072b8 <_printf_float+0x3a8>
 80070fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007102:	2200      	movs	r2, #0
 8007104:	2300      	movs	r3, #0
 8007106:	f7f9 fcff 	bl	8000b08 <__aeabi_dcmpeq>
 800710a:	2800      	cmp	r0, #0
 800710c:	d033      	beq.n	8007176 <_printf_float+0x266>
 800710e:	4a37      	ldr	r2, [pc, #220]	@ (80071ec <_printf_float+0x2dc>)
 8007110:	2301      	movs	r3, #1
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	f43f af54 	beq.w	8006fc6 <_printf_float+0xb6>
 800711e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007122:	4543      	cmp	r3, r8
 8007124:	db02      	blt.n	800712c <_printf_float+0x21c>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	07d8      	lsls	r0, r3, #31
 800712a:	d50f      	bpl.n	800714c <_printf_float+0x23c>
 800712c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af45 	beq.w	8006fc6 <_printf_float+0xb6>
 800713c:	f04f 0900 	mov.w	r9, #0
 8007140:	f108 38ff 	add.w	r8, r8, #4294967295
 8007144:	f104 0a1a 	add.w	sl, r4, #26
 8007148:	45c8      	cmp	r8, r9
 800714a:	dc09      	bgt.n	8007160 <_printf_float+0x250>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	079b      	lsls	r3, r3, #30
 8007150:	f100 8103 	bmi.w	800735a <_printf_float+0x44a>
 8007154:	68e0      	ldr	r0, [r4, #12]
 8007156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007158:	4298      	cmp	r0, r3
 800715a:	bfb8      	it	lt
 800715c:	4618      	movlt	r0, r3
 800715e:	e734      	b.n	8006fca <_printf_float+0xba>
 8007160:	2301      	movs	r3, #1
 8007162:	4652      	mov	r2, sl
 8007164:	4631      	mov	r1, r6
 8007166:	4628      	mov	r0, r5
 8007168:	47b8      	blx	r7
 800716a:	3001      	adds	r0, #1
 800716c:	f43f af2b 	beq.w	8006fc6 <_printf_float+0xb6>
 8007170:	f109 0901 	add.w	r9, r9, #1
 8007174:	e7e8      	b.n	8007148 <_printf_float+0x238>
 8007176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	dc39      	bgt.n	80071f0 <_printf_float+0x2e0>
 800717c:	4a1b      	ldr	r2, [pc, #108]	@ (80071ec <_printf_float+0x2dc>)
 800717e:	2301      	movs	r3, #1
 8007180:	4631      	mov	r1, r6
 8007182:	4628      	mov	r0, r5
 8007184:	47b8      	blx	r7
 8007186:	3001      	adds	r0, #1
 8007188:	f43f af1d 	beq.w	8006fc6 <_printf_float+0xb6>
 800718c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007190:	ea59 0303 	orrs.w	r3, r9, r3
 8007194:	d102      	bne.n	800719c <_printf_float+0x28c>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	07d9      	lsls	r1, r3, #31
 800719a:	d5d7      	bpl.n	800714c <_printf_float+0x23c>
 800719c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f af0d 	beq.w	8006fc6 <_printf_float+0xb6>
 80071ac:	f04f 0a00 	mov.w	sl, #0
 80071b0:	f104 0b1a 	add.w	fp, r4, #26
 80071b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b6:	425b      	negs	r3, r3
 80071b8:	4553      	cmp	r3, sl
 80071ba:	dc01      	bgt.n	80071c0 <_printf_float+0x2b0>
 80071bc:	464b      	mov	r3, r9
 80071be:	e793      	b.n	80070e8 <_printf_float+0x1d8>
 80071c0:	2301      	movs	r3, #1
 80071c2:	465a      	mov	r2, fp
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f aefb 	beq.w	8006fc6 <_printf_float+0xb6>
 80071d0:	f10a 0a01 	add.w	sl, sl, #1
 80071d4:	e7ee      	b.n	80071b4 <_printf_float+0x2a4>
 80071d6:	bf00      	nop
 80071d8:	7fefffff 	.word	0x7fefffff
 80071dc:	08009aa4 	.word	0x08009aa4
 80071e0:	08009aa8 	.word	0x08009aa8
 80071e4:	08009aac 	.word	0x08009aac
 80071e8:	08009ab0 	.word	0x08009ab0
 80071ec:	08009ab4 	.word	0x08009ab4
 80071f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80071f6:	4553      	cmp	r3, sl
 80071f8:	bfa8      	it	ge
 80071fa:	4653      	movge	r3, sl
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	4699      	mov	r9, r3
 8007200:	dc36      	bgt.n	8007270 <_printf_float+0x360>
 8007202:	f04f 0b00 	mov.w	fp, #0
 8007206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800720a:	f104 021a 	add.w	r2, r4, #26
 800720e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007210:	9306      	str	r3, [sp, #24]
 8007212:	eba3 0309 	sub.w	r3, r3, r9
 8007216:	455b      	cmp	r3, fp
 8007218:	dc31      	bgt.n	800727e <_printf_float+0x36e>
 800721a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800721c:	459a      	cmp	sl, r3
 800721e:	dc3a      	bgt.n	8007296 <_printf_float+0x386>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	07da      	lsls	r2, r3, #31
 8007224:	d437      	bmi.n	8007296 <_printf_float+0x386>
 8007226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007228:	ebaa 0903 	sub.w	r9, sl, r3
 800722c:	9b06      	ldr	r3, [sp, #24]
 800722e:	ebaa 0303 	sub.w	r3, sl, r3
 8007232:	4599      	cmp	r9, r3
 8007234:	bfa8      	it	ge
 8007236:	4699      	movge	r9, r3
 8007238:	f1b9 0f00 	cmp.w	r9, #0
 800723c:	dc33      	bgt.n	80072a6 <_printf_float+0x396>
 800723e:	f04f 0800 	mov.w	r8, #0
 8007242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007246:	f104 0b1a 	add.w	fp, r4, #26
 800724a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724c:	ebaa 0303 	sub.w	r3, sl, r3
 8007250:	eba3 0309 	sub.w	r3, r3, r9
 8007254:	4543      	cmp	r3, r8
 8007256:	f77f af79 	ble.w	800714c <_printf_float+0x23c>
 800725a:	2301      	movs	r3, #1
 800725c:	465a      	mov	r2, fp
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	47b8      	blx	r7
 8007264:	3001      	adds	r0, #1
 8007266:	f43f aeae 	beq.w	8006fc6 <_printf_float+0xb6>
 800726a:	f108 0801 	add.w	r8, r8, #1
 800726e:	e7ec      	b.n	800724a <_printf_float+0x33a>
 8007270:	4642      	mov	r2, r8
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	d1c2      	bne.n	8007202 <_printf_float+0x2f2>
 800727c:	e6a3      	b.n	8006fc6 <_printf_float+0xb6>
 800727e:	2301      	movs	r3, #1
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	9206      	str	r2, [sp, #24]
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae9c 	beq.w	8006fc6 <_printf_float+0xb6>
 800728e:	9a06      	ldr	r2, [sp, #24]
 8007290:	f10b 0b01 	add.w	fp, fp, #1
 8007294:	e7bb      	b.n	800720e <_printf_float+0x2fe>
 8007296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800729a:	4631      	mov	r1, r6
 800729c:	4628      	mov	r0, r5
 800729e:	47b8      	blx	r7
 80072a0:	3001      	adds	r0, #1
 80072a2:	d1c0      	bne.n	8007226 <_printf_float+0x316>
 80072a4:	e68f      	b.n	8006fc6 <_printf_float+0xb6>
 80072a6:	9a06      	ldr	r2, [sp, #24]
 80072a8:	464b      	mov	r3, r9
 80072aa:	4442      	add	r2, r8
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	d1c3      	bne.n	800723e <_printf_float+0x32e>
 80072b6:	e686      	b.n	8006fc6 <_printf_float+0xb6>
 80072b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072bc:	f1ba 0f01 	cmp.w	sl, #1
 80072c0:	dc01      	bgt.n	80072c6 <_printf_float+0x3b6>
 80072c2:	07db      	lsls	r3, r3, #31
 80072c4:	d536      	bpl.n	8007334 <_printf_float+0x424>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4642      	mov	r2, r8
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	f43f ae78 	beq.w	8006fc6 <_printf_float+0xb6>
 80072d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	47b8      	blx	r7
 80072e0:	3001      	adds	r0, #1
 80072e2:	f43f ae70 	beq.w	8006fc6 <_printf_float+0xb6>
 80072e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072f2:	f7f9 fc09 	bl	8000b08 <__aeabi_dcmpeq>
 80072f6:	b9c0      	cbnz	r0, 800732a <_printf_float+0x41a>
 80072f8:	4653      	mov	r3, sl
 80072fa:	f108 0201 	add.w	r2, r8, #1
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	d10c      	bne.n	8007322 <_printf_float+0x412>
 8007308:	e65d      	b.n	8006fc6 <_printf_float+0xb6>
 800730a:	2301      	movs	r3, #1
 800730c:	465a      	mov	r2, fp
 800730e:	4631      	mov	r1, r6
 8007310:	4628      	mov	r0, r5
 8007312:	47b8      	blx	r7
 8007314:	3001      	adds	r0, #1
 8007316:	f43f ae56 	beq.w	8006fc6 <_printf_float+0xb6>
 800731a:	f108 0801 	add.w	r8, r8, #1
 800731e:	45d0      	cmp	r8, sl
 8007320:	dbf3      	blt.n	800730a <_printf_float+0x3fa>
 8007322:	464b      	mov	r3, r9
 8007324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007328:	e6df      	b.n	80070ea <_printf_float+0x1da>
 800732a:	f04f 0800 	mov.w	r8, #0
 800732e:	f104 0b1a 	add.w	fp, r4, #26
 8007332:	e7f4      	b.n	800731e <_printf_float+0x40e>
 8007334:	2301      	movs	r3, #1
 8007336:	4642      	mov	r2, r8
 8007338:	e7e1      	b.n	80072fe <_printf_float+0x3ee>
 800733a:	2301      	movs	r3, #1
 800733c:	464a      	mov	r2, r9
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	f43f ae3e 	beq.w	8006fc6 <_printf_float+0xb6>
 800734a:	f108 0801 	add.w	r8, r8, #1
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007352:	1a5b      	subs	r3, r3, r1
 8007354:	4543      	cmp	r3, r8
 8007356:	dcf0      	bgt.n	800733a <_printf_float+0x42a>
 8007358:	e6fc      	b.n	8007154 <_printf_float+0x244>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	f104 0919 	add.w	r9, r4, #25
 8007362:	e7f4      	b.n	800734e <_printf_float+0x43e>

08007364 <_printf_common>:
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	4616      	mov	r6, r2
 800736a:	4698      	mov	r8, r3
 800736c:	688a      	ldr	r2, [r1, #8]
 800736e:	690b      	ldr	r3, [r1, #16]
 8007370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007374:	4293      	cmp	r3, r2
 8007376:	bfb8      	it	lt
 8007378:	4613      	movlt	r3, r2
 800737a:	6033      	str	r3, [r6, #0]
 800737c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007380:	4607      	mov	r7, r0
 8007382:	460c      	mov	r4, r1
 8007384:	b10a      	cbz	r2, 800738a <_printf_common+0x26>
 8007386:	3301      	adds	r3, #1
 8007388:	6033      	str	r3, [r6, #0]
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	0699      	lsls	r1, r3, #26
 800738e:	bf42      	ittt	mi
 8007390:	6833      	ldrmi	r3, [r6, #0]
 8007392:	3302      	addmi	r3, #2
 8007394:	6033      	strmi	r3, [r6, #0]
 8007396:	6825      	ldr	r5, [r4, #0]
 8007398:	f015 0506 	ands.w	r5, r5, #6
 800739c:	d106      	bne.n	80073ac <_printf_common+0x48>
 800739e:	f104 0a19 	add.w	sl, r4, #25
 80073a2:	68e3      	ldr	r3, [r4, #12]
 80073a4:	6832      	ldr	r2, [r6, #0]
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	42ab      	cmp	r3, r5
 80073aa:	dc26      	bgt.n	80073fa <_printf_common+0x96>
 80073ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073b0:	6822      	ldr	r2, [r4, #0]
 80073b2:	3b00      	subs	r3, #0
 80073b4:	bf18      	it	ne
 80073b6:	2301      	movne	r3, #1
 80073b8:	0692      	lsls	r2, r2, #26
 80073ba:	d42b      	bmi.n	8007414 <_printf_common+0xb0>
 80073bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073c0:	4641      	mov	r1, r8
 80073c2:	4638      	mov	r0, r7
 80073c4:	47c8      	blx	r9
 80073c6:	3001      	adds	r0, #1
 80073c8:	d01e      	beq.n	8007408 <_printf_common+0xa4>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	f003 0306 	and.w	r3, r3, #6
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	bf02      	ittt	eq
 80073d6:	68e5      	ldreq	r5, [r4, #12]
 80073d8:	6833      	ldreq	r3, [r6, #0]
 80073da:	1aed      	subeq	r5, r5, r3
 80073dc:	68a3      	ldr	r3, [r4, #8]
 80073de:	bf0c      	ite	eq
 80073e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073e4:	2500      	movne	r5, #0
 80073e6:	4293      	cmp	r3, r2
 80073e8:	bfc4      	itt	gt
 80073ea:	1a9b      	subgt	r3, r3, r2
 80073ec:	18ed      	addgt	r5, r5, r3
 80073ee:	2600      	movs	r6, #0
 80073f0:	341a      	adds	r4, #26
 80073f2:	42b5      	cmp	r5, r6
 80073f4:	d11a      	bne.n	800742c <_printf_common+0xc8>
 80073f6:	2000      	movs	r0, #0
 80073f8:	e008      	b.n	800740c <_printf_common+0xa8>
 80073fa:	2301      	movs	r3, #1
 80073fc:	4652      	mov	r2, sl
 80073fe:	4641      	mov	r1, r8
 8007400:	4638      	mov	r0, r7
 8007402:	47c8      	blx	r9
 8007404:	3001      	adds	r0, #1
 8007406:	d103      	bne.n	8007410 <_printf_common+0xac>
 8007408:	f04f 30ff 	mov.w	r0, #4294967295
 800740c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007410:	3501      	adds	r5, #1
 8007412:	e7c6      	b.n	80073a2 <_printf_common+0x3e>
 8007414:	18e1      	adds	r1, r4, r3
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	2030      	movs	r0, #48	@ 0x30
 800741a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800741e:	4422      	add	r2, r4
 8007420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007428:	3302      	adds	r3, #2
 800742a:	e7c7      	b.n	80073bc <_printf_common+0x58>
 800742c:	2301      	movs	r3, #1
 800742e:	4622      	mov	r2, r4
 8007430:	4641      	mov	r1, r8
 8007432:	4638      	mov	r0, r7
 8007434:	47c8      	blx	r9
 8007436:	3001      	adds	r0, #1
 8007438:	d0e6      	beq.n	8007408 <_printf_common+0xa4>
 800743a:	3601      	adds	r6, #1
 800743c:	e7d9      	b.n	80073f2 <_printf_common+0x8e>
	...

08007440 <_printf_i>:
 8007440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007444:	7e0f      	ldrb	r7, [r1, #24]
 8007446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007448:	2f78      	cmp	r7, #120	@ 0x78
 800744a:	4691      	mov	r9, r2
 800744c:	4680      	mov	r8, r0
 800744e:	460c      	mov	r4, r1
 8007450:	469a      	mov	sl, r3
 8007452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007456:	d807      	bhi.n	8007468 <_printf_i+0x28>
 8007458:	2f62      	cmp	r7, #98	@ 0x62
 800745a:	d80a      	bhi.n	8007472 <_printf_i+0x32>
 800745c:	2f00      	cmp	r7, #0
 800745e:	f000 80d2 	beq.w	8007606 <_printf_i+0x1c6>
 8007462:	2f58      	cmp	r7, #88	@ 0x58
 8007464:	f000 80b9 	beq.w	80075da <_printf_i+0x19a>
 8007468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800746c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007470:	e03a      	b.n	80074e8 <_printf_i+0xa8>
 8007472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007476:	2b15      	cmp	r3, #21
 8007478:	d8f6      	bhi.n	8007468 <_printf_i+0x28>
 800747a:	a101      	add	r1, pc, #4	@ (adr r1, 8007480 <_printf_i+0x40>)
 800747c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007480:	080074d9 	.word	0x080074d9
 8007484:	080074ed 	.word	0x080074ed
 8007488:	08007469 	.word	0x08007469
 800748c:	08007469 	.word	0x08007469
 8007490:	08007469 	.word	0x08007469
 8007494:	08007469 	.word	0x08007469
 8007498:	080074ed 	.word	0x080074ed
 800749c:	08007469 	.word	0x08007469
 80074a0:	08007469 	.word	0x08007469
 80074a4:	08007469 	.word	0x08007469
 80074a8:	08007469 	.word	0x08007469
 80074ac:	080075ed 	.word	0x080075ed
 80074b0:	08007517 	.word	0x08007517
 80074b4:	080075a7 	.word	0x080075a7
 80074b8:	08007469 	.word	0x08007469
 80074bc:	08007469 	.word	0x08007469
 80074c0:	0800760f 	.word	0x0800760f
 80074c4:	08007469 	.word	0x08007469
 80074c8:	08007517 	.word	0x08007517
 80074cc:	08007469 	.word	0x08007469
 80074d0:	08007469 	.word	0x08007469
 80074d4:	080075af 	.word	0x080075af
 80074d8:	6833      	ldr	r3, [r6, #0]
 80074da:	1d1a      	adds	r2, r3, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6032      	str	r2, [r6, #0]
 80074e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074e8:	2301      	movs	r3, #1
 80074ea:	e09d      	b.n	8007628 <_printf_i+0x1e8>
 80074ec:	6833      	ldr	r3, [r6, #0]
 80074ee:	6820      	ldr	r0, [r4, #0]
 80074f0:	1d19      	adds	r1, r3, #4
 80074f2:	6031      	str	r1, [r6, #0]
 80074f4:	0606      	lsls	r6, r0, #24
 80074f6:	d501      	bpl.n	80074fc <_printf_i+0xbc>
 80074f8:	681d      	ldr	r5, [r3, #0]
 80074fa:	e003      	b.n	8007504 <_printf_i+0xc4>
 80074fc:	0645      	lsls	r5, r0, #25
 80074fe:	d5fb      	bpl.n	80074f8 <_printf_i+0xb8>
 8007500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007504:	2d00      	cmp	r5, #0
 8007506:	da03      	bge.n	8007510 <_printf_i+0xd0>
 8007508:	232d      	movs	r3, #45	@ 0x2d
 800750a:	426d      	negs	r5, r5
 800750c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007510:	4859      	ldr	r0, [pc, #356]	@ (8007678 <_printf_i+0x238>)
 8007512:	230a      	movs	r3, #10
 8007514:	e011      	b.n	800753a <_printf_i+0xfa>
 8007516:	6821      	ldr	r1, [r4, #0]
 8007518:	6833      	ldr	r3, [r6, #0]
 800751a:	0608      	lsls	r0, r1, #24
 800751c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007520:	d402      	bmi.n	8007528 <_printf_i+0xe8>
 8007522:	0649      	lsls	r1, r1, #25
 8007524:	bf48      	it	mi
 8007526:	b2ad      	uxthmi	r5, r5
 8007528:	2f6f      	cmp	r7, #111	@ 0x6f
 800752a:	4853      	ldr	r0, [pc, #332]	@ (8007678 <_printf_i+0x238>)
 800752c:	6033      	str	r3, [r6, #0]
 800752e:	bf14      	ite	ne
 8007530:	230a      	movne	r3, #10
 8007532:	2308      	moveq	r3, #8
 8007534:	2100      	movs	r1, #0
 8007536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800753a:	6866      	ldr	r6, [r4, #4]
 800753c:	60a6      	str	r6, [r4, #8]
 800753e:	2e00      	cmp	r6, #0
 8007540:	bfa2      	ittt	ge
 8007542:	6821      	ldrge	r1, [r4, #0]
 8007544:	f021 0104 	bicge.w	r1, r1, #4
 8007548:	6021      	strge	r1, [r4, #0]
 800754a:	b90d      	cbnz	r5, 8007550 <_printf_i+0x110>
 800754c:	2e00      	cmp	r6, #0
 800754e:	d04b      	beq.n	80075e8 <_printf_i+0x1a8>
 8007550:	4616      	mov	r6, r2
 8007552:	fbb5 f1f3 	udiv	r1, r5, r3
 8007556:	fb03 5711 	mls	r7, r3, r1, r5
 800755a:	5dc7      	ldrb	r7, [r0, r7]
 800755c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007560:	462f      	mov	r7, r5
 8007562:	42bb      	cmp	r3, r7
 8007564:	460d      	mov	r5, r1
 8007566:	d9f4      	bls.n	8007552 <_printf_i+0x112>
 8007568:	2b08      	cmp	r3, #8
 800756a:	d10b      	bne.n	8007584 <_printf_i+0x144>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	07df      	lsls	r7, r3, #31
 8007570:	d508      	bpl.n	8007584 <_printf_i+0x144>
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	6861      	ldr	r1, [r4, #4]
 8007576:	4299      	cmp	r1, r3
 8007578:	bfde      	ittt	le
 800757a:	2330      	movle	r3, #48	@ 0x30
 800757c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007584:	1b92      	subs	r2, r2, r6
 8007586:	6122      	str	r2, [r4, #16]
 8007588:	f8cd a000 	str.w	sl, [sp]
 800758c:	464b      	mov	r3, r9
 800758e:	aa03      	add	r2, sp, #12
 8007590:	4621      	mov	r1, r4
 8007592:	4640      	mov	r0, r8
 8007594:	f7ff fee6 	bl	8007364 <_printf_common>
 8007598:	3001      	adds	r0, #1
 800759a:	d14a      	bne.n	8007632 <_printf_i+0x1f2>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	b004      	add	sp, #16
 80075a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	f043 0320 	orr.w	r3, r3, #32
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	4833      	ldr	r0, [pc, #204]	@ (800767c <_printf_i+0x23c>)
 80075b0:	2778      	movs	r7, #120	@ 0x78
 80075b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	6831      	ldr	r1, [r6, #0]
 80075ba:	061f      	lsls	r7, r3, #24
 80075bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80075c0:	d402      	bmi.n	80075c8 <_printf_i+0x188>
 80075c2:	065f      	lsls	r7, r3, #25
 80075c4:	bf48      	it	mi
 80075c6:	b2ad      	uxthmi	r5, r5
 80075c8:	6031      	str	r1, [r6, #0]
 80075ca:	07d9      	lsls	r1, r3, #31
 80075cc:	bf44      	itt	mi
 80075ce:	f043 0320 	orrmi.w	r3, r3, #32
 80075d2:	6023      	strmi	r3, [r4, #0]
 80075d4:	b11d      	cbz	r5, 80075de <_printf_i+0x19e>
 80075d6:	2310      	movs	r3, #16
 80075d8:	e7ac      	b.n	8007534 <_printf_i+0xf4>
 80075da:	4827      	ldr	r0, [pc, #156]	@ (8007678 <_printf_i+0x238>)
 80075dc:	e7e9      	b.n	80075b2 <_printf_i+0x172>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	f023 0320 	bic.w	r3, r3, #32
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	e7f6      	b.n	80075d6 <_printf_i+0x196>
 80075e8:	4616      	mov	r6, r2
 80075ea:	e7bd      	b.n	8007568 <_printf_i+0x128>
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	6825      	ldr	r5, [r4, #0]
 80075f0:	6961      	ldr	r1, [r4, #20]
 80075f2:	1d18      	adds	r0, r3, #4
 80075f4:	6030      	str	r0, [r6, #0]
 80075f6:	062e      	lsls	r6, r5, #24
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	d501      	bpl.n	8007600 <_printf_i+0x1c0>
 80075fc:	6019      	str	r1, [r3, #0]
 80075fe:	e002      	b.n	8007606 <_printf_i+0x1c6>
 8007600:	0668      	lsls	r0, r5, #25
 8007602:	d5fb      	bpl.n	80075fc <_printf_i+0x1bc>
 8007604:	8019      	strh	r1, [r3, #0]
 8007606:	2300      	movs	r3, #0
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	4616      	mov	r6, r2
 800760c:	e7bc      	b.n	8007588 <_printf_i+0x148>
 800760e:	6833      	ldr	r3, [r6, #0]
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	6032      	str	r2, [r6, #0]
 8007614:	681e      	ldr	r6, [r3, #0]
 8007616:	6862      	ldr	r2, [r4, #4]
 8007618:	2100      	movs	r1, #0
 800761a:	4630      	mov	r0, r6
 800761c:	f7f8 fdf8 	bl	8000210 <memchr>
 8007620:	b108      	cbz	r0, 8007626 <_printf_i+0x1e6>
 8007622:	1b80      	subs	r0, r0, r6
 8007624:	6060      	str	r0, [r4, #4]
 8007626:	6863      	ldr	r3, [r4, #4]
 8007628:	6123      	str	r3, [r4, #16]
 800762a:	2300      	movs	r3, #0
 800762c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007630:	e7aa      	b.n	8007588 <_printf_i+0x148>
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	4632      	mov	r2, r6
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	47d0      	blx	sl
 800763c:	3001      	adds	r0, #1
 800763e:	d0ad      	beq.n	800759c <_printf_i+0x15c>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	079b      	lsls	r3, r3, #30
 8007644:	d413      	bmi.n	800766e <_printf_i+0x22e>
 8007646:	68e0      	ldr	r0, [r4, #12]
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	4298      	cmp	r0, r3
 800764c:	bfb8      	it	lt
 800764e:	4618      	movlt	r0, r3
 8007650:	e7a6      	b.n	80075a0 <_printf_i+0x160>
 8007652:	2301      	movs	r3, #1
 8007654:	4632      	mov	r2, r6
 8007656:	4649      	mov	r1, r9
 8007658:	4640      	mov	r0, r8
 800765a:	47d0      	blx	sl
 800765c:	3001      	adds	r0, #1
 800765e:	d09d      	beq.n	800759c <_printf_i+0x15c>
 8007660:	3501      	adds	r5, #1
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	9903      	ldr	r1, [sp, #12]
 8007666:	1a5b      	subs	r3, r3, r1
 8007668:	42ab      	cmp	r3, r5
 800766a:	dcf2      	bgt.n	8007652 <_printf_i+0x212>
 800766c:	e7eb      	b.n	8007646 <_printf_i+0x206>
 800766e:	2500      	movs	r5, #0
 8007670:	f104 0619 	add.w	r6, r4, #25
 8007674:	e7f5      	b.n	8007662 <_printf_i+0x222>
 8007676:	bf00      	nop
 8007678:	08009ab6 	.word	0x08009ab6
 800767c:	08009ac7 	.word	0x08009ac7

08007680 <std>:
 8007680:	2300      	movs	r3, #0
 8007682:	b510      	push	{r4, lr}
 8007684:	4604      	mov	r4, r0
 8007686:	e9c0 3300 	strd	r3, r3, [r0]
 800768a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800768e:	6083      	str	r3, [r0, #8]
 8007690:	8181      	strh	r1, [r0, #12]
 8007692:	6643      	str	r3, [r0, #100]	@ 0x64
 8007694:	81c2      	strh	r2, [r0, #14]
 8007696:	6183      	str	r3, [r0, #24]
 8007698:	4619      	mov	r1, r3
 800769a:	2208      	movs	r2, #8
 800769c:	305c      	adds	r0, #92	@ 0x5c
 800769e:	f000 f914 	bl	80078ca <memset>
 80076a2:	4b0d      	ldr	r3, [pc, #52]	@ (80076d8 <std+0x58>)
 80076a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80076a6:	4b0d      	ldr	r3, [pc, #52]	@ (80076dc <std+0x5c>)
 80076a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <std+0x60>)
 80076ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076ae:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <std+0x64>)
 80076b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <std+0x68>)
 80076b4:	6224      	str	r4, [r4, #32]
 80076b6:	429c      	cmp	r4, r3
 80076b8:	d006      	beq.n	80076c8 <std+0x48>
 80076ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076be:	4294      	cmp	r4, r2
 80076c0:	d002      	beq.n	80076c8 <std+0x48>
 80076c2:	33d0      	adds	r3, #208	@ 0xd0
 80076c4:	429c      	cmp	r4, r3
 80076c6:	d105      	bne.n	80076d4 <std+0x54>
 80076c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d0:	f000 b978 	b.w	80079c4 <__retarget_lock_init_recursive>
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	bf00      	nop
 80076d8:	08007845 	.word	0x08007845
 80076dc:	08007867 	.word	0x08007867
 80076e0:	0800789f 	.word	0x0800789f
 80076e4:	080078c3 	.word	0x080078c3
 80076e8:	2000090c 	.word	0x2000090c

080076ec <stdio_exit_handler>:
 80076ec:	4a02      	ldr	r2, [pc, #8]	@ (80076f8 <stdio_exit_handler+0xc>)
 80076ee:	4903      	ldr	r1, [pc, #12]	@ (80076fc <stdio_exit_handler+0x10>)
 80076f0:	4803      	ldr	r0, [pc, #12]	@ (8007700 <stdio_exit_handler+0x14>)
 80076f2:	f000 b869 	b.w	80077c8 <_fwalk_sglue>
 80076f6:	bf00      	nop
 80076f8:	20000018 	.word	0x20000018
 80076fc:	08009325 	.word	0x08009325
 8007700:	20000028 	.word	0x20000028

08007704 <cleanup_stdio>:
 8007704:	6841      	ldr	r1, [r0, #4]
 8007706:	4b0c      	ldr	r3, [pc, #48]	@ (8007738 <cleanup_stdio+0x34>)
 8007708:	4299      	cmp	r1, r3
 800770a:	b510      	push	{r4, lr}
 800770c:	4604      	mov	r4, r0
 800770e:	d001      	beq.n	8007714 <cleanup_stdio+0x10>
 8007710:	f001 fe08 	bl	8009324 <_fflush_r>
 8007714:	68a1      	ldr	r1, [r4, #8]
 8007716:	4b09      	ldr	r3, [pc, #36]	@ (800773c <cleanup_stdio+0x38>)
 8007718:	4299      	cmp	r1, r3
 800771a:	d002      	beq.n	8007722 <cleanup_stdio+0x1e>
 800771c:	4620      	mov	r0, r4
 800771e:	f001 fe01 	bl	8009324 <_fflush_r>
 8007722:	68e1      	ldr	r1, [r4, #12]
 8007724:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <cleanup_stdio+0x3c>)
 8007726:	4299      	cmp	r1, r3
 8007728:	d004      	beq.n	8007734 <cleanup_stdio+0x30>
 800772a:	4620      	mov	r0, r4
 800772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007730:	f001 bdf8 	b.w	8009324 <_fflush_r>
 8007734:	bd10      	pop	{r4, pc}
 8007736:	bf00      	nop
 8007738:	2000090c 	.word	0x2000090c
 800773c:	20000974 	.word	0x20000974
 8007740:	200009dc 	.word	0x200009dc

08007744 <global_stdio_init.part.0>:
 8007744:	b510      	push	{r4, lr}
 8007746:	4b0b      	ldr	r3, [pc, #44]	@ (8007774 <global_stdio_init.part.0+0x30>)
 8007748:	4c0b      	ldr	r4, [pc, #44]	@ (8007778 <global_stdio_init.part.0+0x34>)
 800774a:	4a0c      	ldr	r2, [pc, #48]	@ (800777c <global_stdio_init.part.0+0x38>)
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	4620      	mov	r0, r4
 8007750:	2200      	movs	r2, #0
 8007752:	2104      	movs	r1, #4
 8007754:	f7ff ff94 	bl	8007680 <std>
 8007758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800775c:	2201      	movs	r2, #1
 800775e:	2109      	movs	r1, #9
 8007760:	f7ff ff8e 	bl	8007680 <std>
 8007764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007768:	2202      	movs	r2, #2
 800776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776e:	2112      	movs	r1, #18
 8007770:	f7ff bf86 	b.w	8007680 <std>
 8007774:	20000a44 	.word	0x20000a44
 8007778:	2000090c 	.word	0x2000090c
 800777c:	080076ed 	.word	0x080076ed

08007780 <__sfp_lock_acquire>:
 8007780:	4801      	ldr	r0, [pc, #4]	@ (8007788 <__sfp_lock_acquire+0x8>)
 8007782:	f000 b920 	b.w	80079c6 <__retarget_lock_acquire_recursive>
 8007786:	bf00      	nop
 8007788:	20000a4d 	.word	0x20000a4d

0800778c <__sfp_lock_release>:
 800778c:	4801      	ldr	r0, [pc, #4]	@ (8007794 <__sfp_lock_release+0x8>)
 800778e:	f000 b91b 	b.w	80079c8 <__retarget_lock_release_recursive>
 8007792:	bf00      	nop
 8007794:	20000a4d 	.word	0x20000a4d

08007798 <__sinit>:
 8007798:	b510      	push	{r4, lr}
 800779a:	4604      	mov	r4, r0
 800779c:	f7ff fff0 	bl	8007780 <__sfp_lock_acquire>
 80077a0:	6a23      	ldr	r3, [r4, #32]
 80077a2:	b11b      	cbz	r3, 80077ac <__sinit+0x14>
 80077a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a8:	f7ff bff0 	b.w	800778c <__sfp_lock_release>
 80077ac:	4b04      	ldr	r3, [pc, #16]	@ (80077c0 <__sinit+0x28>)
 80077ae:	6223      	str	r3, [r4, #32]
 80077b0:	4b04      	ldr	r3, [pc, #16]	@ (80077c4 <__sinit+0x2c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f5      	bne.n	80077a4 <__sinit+0xc>
 80077b8:	f7ff ffc4 	bl	8007744 <global_stdio_init.part.0>
 80077bc:	e7f2      	b.n	80077a4 <__sinit+0xc>
 80077be:	bf00      	nop
 80077c0:	08007705 	.word	0x08007705
 80077c4:	20000a44 	.word	0x20000a44

080077c8 <_fwalk_sglue>:
 80077c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077cc:	4607      	mov	r7, r0
 80077ce:	4688      	mov	r8, r1
 80077d0:	4614      	mov	r4, r2
 80077d2:	2600      	movs	r6, #0
 80077d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077d8:	f1b9 0901 	subs.w	r9, r9, #1
 80077dc:	d505      	bpl.n	80077ea <_fwalk_sglue+0x22>
 80077de:	6824      	ldr	r4, [r4, #0]
 80077e0:	2c00      	cmp	r4, #0
 80077e2:	d1f7      	bne.n	80077d4 <_fwalk_sglue+0xc>
 80077e4:	4630      	mov	r0, r6
 80077e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ea:	89ab      	ldrh	r3, [r5, #12]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d907      	bls.n	8007800 <_fwalk_sglue+0x38>
 80077f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077f4:	3301      	adds	r3, #1
 80077f6:	d003      	beq.n	8007800 <_fwalk_sglue+0x38>
 80077f8:	4629      	mov	r1, r5
 80077fa:	4638      	mov	r0, r7
 80077fc:	47c0      	blx	r8
 80077fe:	4306      	orrs	r6, r0
 8007800:	3568      	adds	r5, #104	@ 0x68
 8007802:	e7e9      	b.n	80077d8 <_fwalk_sglue+0x10>

08007804 <siprintf>:
 8007804:	b40e      	push	{r1, r2, r3}
 8007806:	b500      	push	{lr}
 8007808:	b09c      	sub	sp, #112	@ 0x70
 800780a:	ab1d      	add	r3, sp, #116	@ 0x74
 800780c:	9002      	str	r0, [sp, #8]
 800780e:	9006      	str	r0, [sp, #24]
 8007810:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007814:	4809      	ldr	r0, [pc, #36]	@ (800783c <siprintf+0x38>)
 8007816:	9107      	str	r1, [sp, #28]
 8007818:	9104      	str	r1, [sp, #16]
 800781a:	4909      	ldr	r1, [pc, #36]	@ (8007840 <siprintf+0x3c>)
 800781c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007820:	9105      	str	r1, [sp, #20]
 8007822:	6800      	ldr	r0, [r0, #0]
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	a902      	add	r1, sp, #8
 8007828:	f001 fbfc 	bl	8009024 <_svfiprintf_r>
 800782c:	9b02      	ldr	r3, [sp, #8]
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	b01c      	add	sp, #112	@ 0x70
 8007834:	f85d eb04 	ldr.w	lr, [sp], #4
 8007838:	b003      	add	sp, #12
 800783a:	4770      	bx	lr
 800783c:	20000024 	.word	0x20000024
 8007840:	ffff0208 	.word	0xffff0208

08007844 <__sread>:
 8007844:	b510      	push	{r4, lr}
 8007846:	460c      	mov	r4, r1
 8007848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800784c:	f000 f86c 	bl	8007928 <_read_r>
 8007850:	2800      	cmp	r0, #0
 8007852:	bfab      	itete	ge
 8007854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007856:	89a3      	ldrhlt	r3, [r4, #12]
 8007858:	181b      	addge	r3, r3, r0
 800785a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800785e:	bfac      	ite	ge
 8007860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007862:	81a3      	strhlt	r3, [r4, #12]
 8007864:	bd10      	pop	{r4, pc}

08007866 <__swrite>:
 8007866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786a:	461f      	mov	r7, r3
 800786c:	898b      	ldrh	r3, [r1, #12]
 800786e:	05db      	lsls	r3, r3, #23
 8007870:	4605      	mov	r5, r0
 8007872:	460c      	mov	r4, r1
 8007874:	4616      	mov	r6, r2
 8007876:	d505      	bpl.n	8007884 <__swrite+0x1e>
 8007878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787c:	2302      	movs	r3, #2
 800787e:	2200      	movs	r2, #0
 8007880:	f000 f840 	bl	8007904 <_lseek_r>
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800788a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	4632      	mov	r2, r6
 8007892:	463b      	mov	r3, r7
 8007894:	4628      	mov	r0, r5
 8007896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800789a:	f000 b857 	b.w	800794c <_write_r>

0800789e <__sseek>:
 800789e:	b510      	push	{r4, lr}
 80078a0:	460c      	mov	r4, r1
 80078a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a6:	f000 f82d 	bl	8007904 <_lseek_r>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	bf15      	itete	ne
 80078b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078ba:	81a3      	strheq	r3, [r4, #12]
 80078bc:	bf18      	it	ne
 80078be:	81a3      	strhne	r3, [r4, #12]
 80078c0:	bd10      	pop	{r4, pc}

080078c2 <__sclose>:
 80078c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c6:	f000 b80d 	b.w	80078e4 <_close_r>

080078ca <memset>:
 80078ca:	4402      	add	r2, r0
 80078cc:	4603      	mov	r3, r0
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d100      	bne.n	80078d4 <memset+0xa>
 80078d2:	4770      	bx	lr
 80078d4:	f803 1b01 	strb.w	r1, [r3], #1
 80078d8:	e7f9      	b.n	80078ce <memset+0x4>
	...

080078dc <_localeconv_r>:
 80078dc:	4800      	ldr	r0, [pc, #0]	@ (80078e0 <_localeconv_r+0x4>)
 80078de:	4770      	bx	lr
 80078e0:	20000164 	.word	0x20000164

080078e4 <_close_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4d06      	ldr	r5, [pc, #24]	@ (8007900 <_close_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	f7fa fe9b 	bl	800262a <_close>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_close_r+0x1a>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_close_r+0x1a>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20000a48 	.word	0x20000a48

08007904 <_lseek_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d07      	ldr	r5, [pc, #28]	@ (8007924 <_lseek_r+0x20>)
 8007908:	4604      	mov	r4, r0
 800790a:	4608      	mov	r0, r1
 800790c:	4611      	mov	r1, r2
 800790e:	2200      	movs	r2, #0
 8007910:	602a      	str	r2, [r5, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	f7fa feb0 	bl	8002678 <_lseek>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_lseek_r+0x1e>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	b103      	cbz	r3, 8007922 <_lseek_r+0x1e>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	20000a48 	.word	0x20000a48

08007928 <_read_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d07      	ldr	r5, [pc, #28]	@ (8007948 <_read_r+0x20>)
 800792c:	4604      	mov	r4, r0
 800792e:	4608      	mov	r0, r1
 8007930:	4611      	mov	r1, r2
 8007932:	2200      	movs	r2, #0
 8007934:	602a      	str	r2, [r5, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	f7fa fe3e 	bl	80025b8 <_read>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_read_r+0x1e>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_read_r+0x1e>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	20000a48 	.word	0x20000a48

0800794c <_write_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d07      	ldr	r5, [pc, #28]	@ (800796c <_write_r+0x20>)
 8007950:	4604      	mov	r4, r0
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	2200      	movs	r2, #0
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f7fa fe49 	bl	80025f2 <_write>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_write_r+0x1e>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_write_r+0x1e>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20000a48 	.word	0x20000a48

08007970 <__errno>:
 8007970:	4b01      	ldr	r3, [pc, #4]	@ (8007978 <__errno+0x8>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000024 	.word	0x20000024

0800797c <__libc_init_array>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4d0d      	ldr	r5, [pc, #52]	@ (80079b4 <__libc_init_array+0x38>)
 8007980:	4c0d      	ldr	r4, [pc, #52]	@ (80079b8 <__libc_init_array+0x3c>)
 8007982:	1b64      	subs	r4, r4, r5
 8007984:	10a4      	asrs	r4, r4, #2
 8007986:	2600      	movs	r6, #0
 8007988:	42a6      	cmp	r6, r4
 800798a:	d109      	bne.n	80079a0 <__libc_init_array+0x24>
 800798c:	4d0b      	ldr	r5, [pc, #44]	@ (80079bc <__libc_init_array+0x40>)
 800798e:	4c0c      	ldr	r4, [pc, #48]	@ (80079c0 <__libc_init_array+0x44>)
 8007990:	f002 f866 	bl	8009a60 <_init>
 8007994:	1b64      	subs	r4, r4, r5
 8007996:	10a4      	asrs	r4, r4, #2
 8007998:	2600      	movs	r6, #0
 800799a:	42a6      	cmp	r6, r4
 800799c:	d105      	bne.n	80079aa <__libc_init_array+0x2e>
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a4:	4798      	blx	r3
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7ee      	b.n	8007988 <__libc_init_array+0xc>
 80079aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ae:	4798      	blx	r3
 80079b0:	3601      	adds	r6, #1
 80079b2:	e7f2      	b.n	800799a <__libc_init_array+0x1e>
 80079b4:	08009e20 	.word	0x08009e20
 80079b8:	08009e20 	.word	0x08009e20
 80079bc:	08009e20 	.word	0x08009e20
 80079c0:	08009e24 	.word	0x08009e24

080079c4 <__retarget_lock_init_recursive>:
 80079c4:	4770      	bx	lr

080079c6 <__retarget_lock_acquire_recursive>:
 80079c6:	4770      	bx	lr

080079c8 <__retarget_lock_release_recursive>:
 80079c8:	4770      	bx	lr

080079ca <quorem>:
 80079ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ce:	6903      	ldr	r3, [r0, #16]
 80079d0:	690c      	ldr	r4, [r1, #16]
 80079d2:	42a3      	cmp	r3, r4
 80079d4:	4607      	mov	r7, r0
 80079d6:	db7e      	blt.n	8007ad6 <quorem+0x10c>
 80079d8:	3c01      	subs	r4, #1
 80079da:	f101 0814 	add.w	r8, r1, #20
 80079de:	00a3      	lsls	r3, r4, #2
 80079e0:	f100 0514 	add.w	r5, r0, #20
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079f4:	3301      	adds	r3, #1
 80079f6:	429a      	cmp	r2, r3
 80079f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a00:	d32e      	bcc.n	8007a60 <quorem+0x96>
 8007a02:	f04f 0a00 	mov.w	sl, #0
 8007a06:	46c4      	mov	ip, r8
 8007a08:	46ae      	mov	lr, r5
 8007a0a:	46d3      	mov	fp, sl
 8007a0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a10:	b298      	uxth	r0, r3
 8007a12:	fb06 a000 	mla	r0, r6, r0, sl
 8007a16:	0c02      	lsrs	r2, r0, #16
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	fb06 2303 	mla	r3, r6, r3, r2
 8007a1e:	f8de 2000 	ldr.w	r2, [lr]
 8007a22:	b280      	uxth	r0, r0
 8007a24:	b292      	uxth	r2, r2
 8007a26:	1a12      	subs	r2, r2, r0
 8007a28:	445a      	add	r2, fp
 8007a2a:	f8de 0000 	ldr.w	r0, [lr]
 8007a2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a3c:	b292      	uxth	r2, r2
 8007a3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a42:	45e1      	cmp	r9, ip
 8007a44:	f84e 2b04 	str.w	r2, [lr], #4
 8007a48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a4c:	d2de      	bcs.n	8007a0c <quorem+0x42>
 8007a4e:	9b00      	ldr	r3, [sp, #0]
 8007a50:	58eb      	ldr	r3, [r5, r3]
 8007a52:	b92b      	cbnz	r3, 8007a60 <quorem+0x96>
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	3b04      	subs	r3, #4
 8007a58:	429d      	cmp	r5, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	d32f      	bcc.n	8007abe <quorem+0xf4>
 8007a5e:	613c      	str	r4, [r7, #16]
 8007a60:	4638      	mov	r0, r7
 8007a62:	f001 f97b 	bl	8008d5c <__mcmp>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	db25      	blt.n	8007ab6 <quorem+0xec>
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a72:	f8d1 c000 	ldr.w	ip, [r1]
 8007a76:	fa1f fe82 	uxth.w	lr, r2
 8007a7a:	fa1f f38c 	uxth.w	r3, ip
 8007a7e:	eba3 030e 	sub.w	r3, r3, lr
 8007a82:	4403      	add	r3, r0
 8007a84:	0c12      	lsrs	r2, r2, #16
 8007a86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a94:	45c1      	cmp	r9, r8
 8007a96:	f841 3b04 	str.w	r3, [r1], #4
 8007a9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a9e:	d2e6      	bcs.n	8007a6e <quorem+0xa4>
 8007aa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa8:	b922      	cbnz	r2, 8007ab4 <quorem+0xea>
 8007aaa:	3b04      	subs	r3, #4
 8007aac:	429d      	cmp	r5, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	d30b      	bcc.n	8007aca <quorem+0x100>
 8007ab2:	613c      	str	r4, [r7, #16]
 8007ab4:	3601      	adds	r6, #1
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	b003      	add	sp, #12
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	3b04      	subs	r3, #4
 8007ac2:	2a00      	cmp	r2, #0
 8007ac4:	d1cb      	bne.n	8007a5e <quorem+0x94>
 8007ac6:	3c01      	subs	r4, #1
 8007ac8:	e7c6      	b.n	8007a58 <quorem+0x8e>
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	d1ef      	bne.n	8007ab2 <quorem+0xe8>
 8007ad2:	3c01      	subs	r4, #1
 8007ad4:	e7ea      	b.n	8007aac <quorem+0xe2>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e7ee      	b.n	8007ab8 <quorem+0xee>
 8007ada:	0000      	movs	r0, r0
 8007adc:	0000      	movs	r0, r0
	...

08007ae0 <_dtoa_r>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	69c7      	ldr	r7, [r0, #28]
 8007ae6:	b099      	sub	sp, #100	@ 0x64
 8007ae8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007aec:	ec55 4b10 	vmov	r4, r5, d0
 8007af0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007af2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007af4:	4683      	mov	fp, r0
 8007af6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007af8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007afa:	b97f      	cbnz	r7, 8007b1c <_dtoa_r+0x3c>
 8007afc:	2010      	movs	r0, #16
 8007afe:	f000 fdfd 	bl	80086fc <malloc>
 8007b02:	4602      	mov	r2, r0
 8007b04:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b08:	b920      	cbnz	r0, 8007b14 <_dtoa_r+0x34>
 8007b0a:	4ba7      	ldr	r3, [pc, #668]	@ (8007da8 <_dtoa_r+0x2c8>)
 8007b0c:	21ef      	movs	r1, #239	@ 0xef
 8007b0e:	48a7      	ldr	r0, [pc, #668]	@ (8007dac <_dtoa_r+0x2cc>)
 8007b10:	f001 fc68 	bl	80093e4 <__assert_func>
 8007b14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b18:	6007      	str	r7, [r0, #0]
 8007b1a:	60c7      	str	r7, [r0, #12]
 8007b1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b20:	6819      	ldr	r1, [r3, #0]
 8007b22:	b159      	cbz	r1, 8007b3c <_dtoa_r+0x5c>
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	604a      	str	r2, [r1, #4]
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4093      	lsls	r3, r2
 8007b2c:	608b      	str	r3, [r1, #8]
 8007b2e:	4658      	mov	r0, fp
 8007b30:	f000 feda 	bl	80088e8 <_Bfree>
 8007b34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	1e2b      	subs	r3, r5, #0
 8007b3e:	bfb9      	ittee	lt
 8007b40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b44:	9303      	strlt	r3, [sp, #12]
 8007b46:	2300      	movge	r3, #0
 8007b48:	6033      	strge	r3, [r6, #0]
 8007b4a:	9f03      	ldr	r7, [sp, #12]
 8007b4c:	4b98      	ldr	r3, [pc, #608]	@ (8007db0 <_dtoa_r+0x2d0>)
 8007b4e:	bfbc      	itt	lt
 8007b50:	2201      	movlt	r2, #1
 8007b52:	6032      	strlt	r2, [r6, #0]
 8007b54:	43bb      	bics	r3, r7
 8007b56:	d112      	bne.n	8007b7e <_dtoa_r+0x9e>
 8007b58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b64:	4323      	orrs	r3, r4
 8007b66:	f000 854d 	beq.w	8008604 <_dtoa_r+0xb24>
 8007b6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007dc4 <_dtoa_r+0x2e4>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 854f 	beq.w	8008614 <_dtoa_r+0xb34>
 8007b76:	f10a 0303 	add.w	r3, sl, #3
 8007b7a:	f000 bd49 	b.w	8008610 <_dtoa_r+0xb30>
 8007b7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	ec51 0b17 	vmov	r0, r1, d7
 8007b88:	2300      	movs	r3, #0
 8007b8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b8e:	f7f8 ffbb 	bl	8000b08 <__aeabi_dcmpeq>
 8007b92:	4680      	mov	r8, r0
 8007b94:	b158      	cbz	r0, 8007bae <_dtoa_r+0xce>
 8007b96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b98:	2301      	movs	r3, #1
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b9e:	b113      	cbz	r3, 8007ba6 <_dtoa_r+0xc6>
 8007ba0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ba2:	4b84      	ldr	r3, [pc, #528]	@ (8007db4 <_dtoa_r+0x2d4>)
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007dc8 <_dtoa_r+0x2e8>
 8007baa:	f000 bd33 	b.w	8008614 <_dtoa_r+0xb34>
 8007bae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007bb2:	aa16      	add	r2, sp, #88	@ 0x58
 8007bb4:	a917      	add	r1, sp, #92	@ 0x5c
 8007bb6:	4658      	mov	r0, fp
 8007bb8:	f001 f980 	bl	8008ebc <__d2b>
 8007bbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007bc0:	4681      	mov	r9, r0
 8007bc2:	2e00      	cmp	r6, #0
 8007bc4:	d077      	beq.n	8007cb6 <_dtoa_r+0x1d6>
 8007bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007bd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007bdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007be0:	4619      	mov	r1, r3
 8007be2:	2200      	movs	r2, #0
 8007be4:	4b74      	ldr	r3, [pc, #464]	@ (8007db8 <_dtoa_r+0x2d8>)
 8007be6:	f7f8 fb6f 	bl	80002c8 <__aeabi_dsub>
 8007bea:	a369      	add	r3, pc, #420	@ (adr r3, 8007d90 <_dtoa_r+0x2b0>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fd22 	bl	8000638 <__aeabi_dmul>
 8007bf4:	a368      	add	r3, pc, #416	@ (adr r3, 8007d98 <_dtoa_r+0x2b8>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 fb67 	bl	80002cc <__adddf3>
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4630      	mov	r0, r6
 8007c02:	460d      	mov	r5, r1
 8007c04:	f7f8 fcae 	bl	8000564 <__aeabi_i2d>
 8007c08:	a365      	add	r3, pc, #404	@ (adr r3, 8007da0 <_dtoa_r+0x2c0>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 fd13 	bl	8000638 <__aeabi_dmul>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4620      	mov	r0, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 fb57 	bl	80002cc <__adddf3>
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	f7f8 ffb9 	bl	8000b98 <__aeabi_d2iz>
 8007c26:	2200      	movs	r2, #0
 8007c28:	4607      	mov	r7, r0
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	4629      	mov	r1, r5
 8007c30:	f7f8 ff74 	bl	8000b1c <__aeabi_dcmplt>
 8007c34:	b140      	cbz	r0, 8007c48 <_dtoa_r+0x168>
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7f8 fc94 	bl	8000564 <__aeabi_i2d>
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	462b      	mov	r3, r5
 8007c40:	f7f8 ff62 	bl	8000b08 <__aeabi_dcmpeq>
 8007c44:	b900      	cbnz	r0, 8007c48 <_dtoa_r+0x168>
 8007c46:	3f01      	subs	r7, #1
 8007c48:	2f16      	cmp	r7, #22
 8007c4a:	d851      	bhi.n	8007cf0 <_dtoa_r+0x210>
 8007c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8007dbc <_dtoa_r+0x2dc>)
 8007c4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c5a:	f7f8 ff5f 	bl	8000b1c <__aeabi_dcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d048      	beq.n	8007cf4 <_dtoa_r+0x214>
 8007c62:	3f01      	subs	r7, #1
 8007c64:	2300      	movs	r3, #0
 8007c66:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c6a:	1b9b      	subs	r3, r3, r6
 8007c6c:	1e5a      	subs	r2, r3, #1
 8007c6e:	bf44      	itt	mi
 8007c70:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c74:	2300      	movmi	r3, #0
 8007c76:	9208      	str	r2, [sp, #32]
 8007c78:	bf54      	ite	pl
 8007c7a:	f04f 0800 	movpl.w	r8, #0
 8007c7e:	9308      	strmi	r3, [sp, #32]
 8007c80:	2f00      	cmp	r7, #0
 8007c82:	db39      	blt.n	8007cf8 <_dtoa_r+0x218>
 8007c84:	9b08      	ldr	r3, [sp, #32]
 8007c86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c88:	443b      	add	r3, r7
 8007c8a:	9308      	str	r3, [sp, #32]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c92:	2b09      	cmp	r3, #9
 8007c94:	d864      	bhi.n	8007d60 <_dtoa_r+0x280>
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	bfc4      	itt	gt
 8007c9a:	3b04      	subgt	r3, #4
 8007c9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca0:	f1a3 0302 	sub.w	r3, r3, #2
 8007ca4:	bfcc      	ite	gt
 8007ca6:	2400      	movgt	r4, #0
 8007ca8:	2401      	movle	r4, #1
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d863      	bhi.n	8007d76 <_dtoa_r+0x296>
 8007cae:	e8df f003 	tbb	[pc, r3]
 8007cb2:	372a      	.short	0x372a
 8007cb4:	5535      	.short	0x5535
 8007cb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007cba:	441e      	add	r6, r3
 8007cbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	bfc1      	itttt	gt
 8007cc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cc8:	409f      	lslgt	r7, r3
 8007cca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007cd2:	bfd6      	itet	le
 8007cd4:	f1c3 0320 	rsble	r3, r3, #32
 8007cd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007cdc:	fa04 f003 	lslle.w	r0, r4, r3
 8007ce0:	f7f8 fc30 	bl	8000544 <__aeabi_ui2d>
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cea:	3e01      	subs	r6, #1
 8007cec:	9214      	str	r2, [sp, #80]	@ 0x50
 8007cee:	e777      	b.n	8007be0 <_dtoa_r+0x100>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e7b8      	b.n	8007c66 <_dtoa_r+0x186>
 8007cf4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007cf6:	e7b7      	b.n	8007c68 <_dtoa_r+0x188>
 8007cf8:	427b      	negs	r3, r7
 8007cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	eba8 0807 	sub.w	r8, r8, r7
 8007d02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d04:	e7c4      	b.n	8007c90 <_dtoa_r+0x1b0>
 8007d06:	2300      	movs	r3, #0
 8007d08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dc35      	bgt.n	8007d7c <_dtoa_r+0x29c>
 8007d10:	2301      	movs	r3, #1
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	9307      	str	r3, [sp, #28]
 8007d16:	461a      	mov	r2, r3
 8007d18:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d1a:	e00b      	b.n	8007d34 <_dtoa_r+0x254>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e7f3      	b.n	8007d08 <_dtoa_r+0x228>
 8007d20:	2300      	movs	r3, #0
 8007d22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d26:	18fb      	adds	r3, r7, r3
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	9307      	str	r3, [sp, #28]
 8007d30:	bfb8      	it	lt
 8007d32:	2301      	movlt	r3, #1
 8007d34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d38:	2100      	movs	r1, #0
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	f102 0514 	add.w	r5, r2, #20
 8007d40:	429d      	cmp	r5, r3
 8007d42:	d91f      	bls.n	8007d84 <_dtoa_r+0x2a4>
 8007d44:	6041      	str	r1, [r0, #4]
 8007d46:	4658      	mov	r0, fp
 8007d48:	f000 fd8e 	bl	8008868 <_Balloc>
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d13c      	bne.n	8007dcc <_dtoa_r+0x2ec>
 8007d52:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc0 <_dtoa_r+0x2e0>)
 8007d54:	4602      	mov	r2, r0
 8007d56:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d5a:	e6d8      	b.n	8007b0e <_dtoa_r+0x2e>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e7e0      	b.n	8007d22 <_dtoa_r+0x242>
 8007d60:	2401      	movs	r4, #1
 8007d62:	2300      	movs	r3, #0
 8007d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d68:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	9307      	str	r3, [sp, #28]
 8007d70:	2200      	movs	r2, #0
 8007d72:	2312      	movs	r3, #18
 8007d74:	e7d0      	b.n	8007d18 <_dtoa_r+0x238>
 8007d76:	2301      	movs	r3, #1
 8007d78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d7a:	e7f5      	b.n	8007d68 <_dtoa_r+0x288>
 8007d7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	9307      	str	r3, [sp, #28]
 8007d82:	e7d7      	b.n	8007d34 <_dtoa_r+0x254>
 8007d84:	3101      	adds	r1, #1
 8007d86:	0052      	lsls	r2, r2, #1
 8007d88:	e7d8      	b.n	8007d3c <_dtoa_r+0x25c>
 8007d8a:	bf00      	nop
 8007d8c:	f3af 8000 	nop.w
 8007d90:	636f4361 	.word	0x636f4361
 8007d94:	3fd287a7 	.word	0x3fd287a7
 8007d98:	8b60c8b3 	.word	0x8b60c8b3
 8007d9c:	3fc68a28 	.word	0x3fc68a28
 8007da0:	509f79fb 	.word	0x509f79fb
 8007da4:	3fd34413 	.word	0x3fd34413
 8007da8:	08009ae5 	.word	0x08009ae5
 8007dac:	08009afc 	.word	0x08009afc
 8007db0:	7ff00000 	.word	0x7ff00000
 8007db4:	08009ab5 	.word	0x08009ab5
 8007db8:	3ff80000 	.word	0x3ff80000
 8007dbc:	08009bf8 	.word	0x08009bf8
 8007dc0:	08009b54 	.word	0x08009b54
 8007dc4:	08009ae1 	.word	0x08009ae1
 8007dc8:	08009ab4 	.word	0x08009ab4
 8007dcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007dd0:	6018      	str	r0, [r3, #0]
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	2b0e      	cmp	r3, #14
 8007dd6:	f200 80a4 	bhi.w	8007f22 <_dtoa_r+0x442>
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	f000 80a1 	beq.w	8007f22 <_dtoa_r+0x442>
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	dd33      	ble.n	8007e4c <_dtoa_r+0x36c>
 8007de4:	4bad      	ldr	r3, [pc, #692]	@ (800809c <_dtoa_r+0x5bc>)
 8007de6:	f007 020f 	and.w	r2, r7, #15
 8007dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dee:	ed93 7b00 	vldr	d7, [r3]
 8007df2:	05f8      	lsls	r0, r7, #23
 8007df4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007df8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007dfc:	d516      	bpl.n	8007e2c <_dtoa_r+0x34c>
 8007dfe:	4ba8      	ldr	r3, [pc, #672]	@ (80080a0 <_dtoa_r+0x5c0>)
 8007e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e08:	f7f8 fd40 	bl	800088c <__aeabi_ddiv>
 8007e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e10:	f004 040f 	and.w	r4, r4, #15
 8007e14:	2603      	movs	r6, #3
 8007e16:	4da2      	ldr	r5, [pc, #648]	@ (80080a0 <_dtoa_r+0x5c0>)
 8007e18:	b954      	cbnz	r4, 8007e30 <_dtoa_r+0x350>
 8007e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e22:	f7f8 fd33 	bl	800088c <__aeabi_ddiv>
 8007e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e2a:	e028      	b.n	8007e7e <_dtoa_r+0x39e>
 8007e2c:	2602      	movs	r6, #2
 8007e2e:	e7f2      	b.n	8007e16 <_dtoa_r+0x336>
 8007e30:	07e1      	lsls	r1, r4, #31
 8007e32:	d508      	bpl.n	8007e46 <_dtoa_r+0x366>
 8007e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e3c:	f7f8 fbfc 	bl	8000638 <__aeabi_dmul>
 8007e40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e44:	3601      	adds	r6, #1
 8007e46:	1064      	asrs	r4, r4, #1
 8007e48:	3508      	adds	r5, #8
 8007e4a:	e7e5      	b.n	8007e18 <_dtoa_r+0x338>
 8007e4c:	f000 80d2 	beq.w	8007ff4 <_dtoa_r+0x514>
 8007e50:	427c      	negs	r4, r7
 8007e52:	4b92      	ldr	r3, [pc, #584]	@ (800809c <_dtoa_r+0x5bc>)
 8007e54:	4d92      	ldr	r5, [pc, #584]	@ (80080a0 <_dtoa_r+0x5c0>)
 8007e56:	f004 020f 	and.w	r2, r4, #15
 8007e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e66:	f7f8 fbe7 	bl	8000638 <__aeabi_dmul>
 8007e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e6e:	1124      	asrs	r4, r4, #4
 8007e70:	2300      	movs	r3, #0
 8007e72:	2602      	movs	r6, #2
 8007e74:	2c00      	cmp	r4, #0
 8007e76:	f040 80b2 	bne.w	8007fde <_dtoa_r+0x4fe>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1d3      	bne.n	8007e26 <_dtoa_r+0x346>
 8007e7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80b7 	beq.w	8007ff8 <_dtoa_r+0x518>
 8007e8a:	4b86      	ldr	r3, [pc, #536]	@ (80080a4 <_dtoa_r+0x5c4>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	4620      	mov	r0, r4
 8007e90:	4629      	mov	r1, r5
 8007e92:	f7f8 fe43 	bl	8000b1c <__aeabi_dcmplt>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f000 80ae 	beq.w	8007ff8 <_dtoa_r+0x518>
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80aa 	beq.w	8007ff8 <_dtoa_r+0x518>
 8007ea4:	9b00      	ldr	r3, [sp, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dd37      	ble.n	8007f1a <_dtoa_r+0x43a>
 8007eaa:	1e7b      	subs	r3, r7, #1
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4b7d      	ldr	r3, [pc, #500]	@ (80080a8 <_dtoa_r+0x5c8>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	f7f8 fbbf 	bl	8000638 <__aeabi_dmul>
 8007eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ebe:	9c00      	ldr	r4, [sp, #0]
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7f8 fb4e 	bl	8000564 <__aeabi_i2d>
 8007ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ecc:	f7f8 fbb4 	bl	8000638 <__aeabi_dmul>
 8007ed0:	4b76      	ldr	r3, [pc, #472]	@ (80080ac <_dtoa_r+0x5cc>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f7f8 f9fa 	bl	80002cc <__adddf3>
 8007ed8:	4605      	mov	r5, r0
 8007eda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ede:	2c00      	cmp	r4, #0
 8007ee0:	f040 808d 	bne.w	8007ffe <_dtoa_r+0x51e>
 8007ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee8:	4b71      	ldr	r3, [pc, #452]	@ (80080b0 <_dtoa_r+0x5d0>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	f7f8 f9ec 	bl	80002c8 <__aeabi_dsub>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4633      	mov	r3, r6
 8007efc:	f7f8 fe2c 	bl	8000b58 <__aeabi_dcmpgt>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f040 828b 	bne.w	800841c <_dtoa_r+0x93c>
 8007f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f10:	f7f8 fe04 	bl	8000b1c <__aeabi_dcmplt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f040 8128 	bne.w	800816a <_dtoa_r+0x68a>
 8007f1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f2c0 815a 	blt.w	80081de <_dtoa_r+0x6fe>
 8007f2a:	2f0e      	cmp	r7, #14
 8007f2c:	f300 8157 	bgt.w	80081de <_dtoa_r+0x6fe>
 8007f30:	4b5a      	ldr	r3, [pc, #360]	@ (800809c <_dtoa_r+0x5bc>)
 8007f32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f36:	ed93 7b00 	vldr	d7, [r3]
 8007f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	ed8d 7b00 	vstr	d7, [sp]
 8007f42:	da03      	bge.n	8007f4c <_dtoa_r+0x46c>
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f340 8101 	ble.w	800814e <_dtoa_r+0x66e>
 8007f4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f50:	4656      	mov	r6, sl
 8007f52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f56:	4620      	mov	r0, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f7f8 fc97 	bl	800088c <__aeabi_ddiv>
 8007f5e:	f7f8 fe1b 	bl	8000b98 <__aeabi_d2iz>
 8007f62:	4680      	mov	r8, r0
 8007f64:	f7f8 fafe 	bl	8000564 <__aeabi_i2d>
 8007f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f6c:	f7f8 fb64 	bl	8000638 <__aeabi_dmul>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4620      	mov	r0, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f7c:	f7f8 f9a4 	bl	80002c8 <__aeabi_dsub>
 8007f80:	f806 4b01 	strb.w	r4, [r6], #1
 8007f84:	9d07      	ldr	r5, [sp, #28]
 8007f86:	eba6 040a 	sub.w	r4, r6, sl
 8007f8a:	42a5      	cmp	r5, r4
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	f040 8117 	bne.w	80081c2 <_dtoa_r+0x6e2>
 8007f94:	f7f8 f99a 	bl	80002cc <__adddf3>
 8007f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	f7f8 fdda 	bl	8000b58 <__aeabi_dcmpgt>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f040 80f9 	bne.w	800819c <_dtoa_r+0x6bc>
 8007faa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 fda9 	bl	8000b08 <__aeabi_dcmpeq>
 8007fb6:	b118      	cbz	r0, 8007fc0 <_dtoa_r+0x4e0>
 8007fb8:	f018 0f01 	tst.w	r8, #1
 8007fbc:	f040 80ee 	bne.w	800819c <_dtoa_r+0x6bc>
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	4658      	mov	r0, fp
 8007fc4:	f000 fc90 	bl	80088e8 <_Bfree>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	7033      	strb	r3, [r6, #0]
 8007fcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fce:	3701      	adds	r7, #1
 8007fd0:	601f      	str	r7, [r3, #0]
 8007fd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 831d 	beq.w	8008614 <_dtoa_r+0xb34>
 8007fda:	601e      	str	r6, [r3, #0]
 8007fdc:	e31a      	b.n	8008614 <_dtoa_r+0xb34>
 8007fde:	07e2      	lsls	r2, r4, #31
 8007fe0:	d505      	bpl.n	8007fee <_dtoa_r+0x50e>
 8007fe2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fe6:	f7f8 fb27 	bl	8000638 <__aeabi_dmul>
 8007fea:	3601      	adds	r6, #1
 8007fec:	2301      	movs	r3, #1
 8007fee:	1064      	asrs	r4, r4, #1
 8007ff0:	3508      	adds	r5, #8
 8007ff2:	e73f      	b.n	8007e74 <_dtoa_r+0x394>
 8007ff4:	2602      	movs	r6, #2
 8007ff6:	e742      	b.n	8007e7e <_dtoa_r+0x39e>
 8007ff8:	9c07      	ldr	r4, [sp, #28]
 8007ffa:	9704      	str	r7, [sp, #16]
 8007ffc:	e761      	b.n	8007ec2 <_dtoa_r+0x3e2>
 8007ffe:	4b27      	ldr	r3, [pc, #156]	@ (800809c <_dtoa_r+0x5bc>)
 8008000:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008002:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008006:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800800a:	4454      	add	r4, sl
 800800c:	2900      	cmp	r1, #0
 800800e:	d053      	beq.n	80080b8 <_dtoa_r+0x5d8>
 8008010:	4928      	ldr	r1, [pc, #160]	@ (80080b4 <_dtoa_r+0x5d4>)
 8008012:	2000      	movs	r0, #0
 8008014:	f7f8 fc3a 	bl	800088c <__aeabi_ddiv>
 8008018:	4633      	mov	r3, r6
 800801a:	462a      	mov	r2, r5
 800801c:	f7f8 f954 	bl	80002c8 <__aeabi_dsub>
 8008020:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008024:	4656      	mov	r6, sl
 8008026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800802a:	f7f8 fdb5 	bl	8000b98 <__aeabi_d2iz>
 800802e:	4605      	mov	r5, r0
 8008030:	f7f8 fa98 	bl	8000564 <__aeabi_i2d>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800803c:	f7f8 f944 	bl	80002c8 <__aeabi_dsub>
 8008040:	3530      	adds	r5, #48	@ 0x30
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800804a:	f806 5b01 	strb.w	r5, [r6], #1
 800804e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008052:	f7f8 fd63 	bl	8000b1c <__aeabi_dcmplt>
 8008056:	2800      	cmp	r0, #0
 8008058:	d171      	bne.n	800813e <_dtoa_r+0x65e>
 800805a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800805e:	4911      	ldr	r1, [pc, #68]	@ (80080a4 <_dtoa_r+0x5c4>)
 8008060:	2000      	movs	r0, #0
 8008062:	f7f8 f931 	bl	80002c8 <__aeabi_dsub>
 8008066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800806a:	f7f8 fd57 	bl	8000b1c <__aeabi_dcmplt>
 800806e:	2800      	cmp	r0, #0
 8008070:	f040 8095 	bne.w	800819e <_dtoa_r+0x6be>
 8008074:	42a6      	cmp	r6, r4
 8008076:	f43f af50 	beq.w	8007f1a <_dtoa_r+0x43a>
 800807a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800807e:	4b0a      	ldr	r3, [pc, #40]	@ (80080a8 <_dtoa_r+0x5c8>)
 8008080:	2200      	movs	r2, #0
 8008082:	f7f8 fad9 	bl	8000638 <__aeabi_dmul>
 8008086:	4b08      	ldr	r3, [pc, #32]	@ (80080a8 <_dtoa_r+0x5c8>)
 8008088:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800808c:	2200      	movs	r2, #0
 800808e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008092:	f7f8 fad1 	bl	8000638 <__aeabi_dmul>
 8008096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800809a:	e7c4      	b.n	8008026 <_dtoa_r+0x546>
 800809c:	08009bf8 	.word	0x08009bf8
 80080a0:	08009bd0 	.word	0x08009bd0
 80080a4:	3ff00000 	.word	0x3ff00000
 80080a8:	40240000 	.word	0x40240000
 80080ac:	401c0000 	.word	0x401c0000
 80080b0:	40140000 	.word	0x40140000
 80080b4:	3fe00000 	.word	0x3fe00000
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7f8 fabc 	bl	8000638 <__aeabi_dmul>
 80080c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80080c6:	4656      	mov	r6, sl
 80080c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080cc:	f7f8 fd64 	bl	8000b98 <__aeabi_d2iz>
 80080d0:	4605      	mov	r5, r0
 80080d2:	f7f8 fa47 	bl	8000564 <__aeabi_i2d>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080de:	f7f8 f8f3 	bl	80002c8 <__aeabi_dsub>
 80080e2:	3530      	adds	r5, #48	@ 0x30
 80080e4:	f806 5b01 	strb.w	r5, [r6], #1
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	42a6      	cmp	r6, r4
 80080ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	d124      	bne.n	8008142 <_dtoa_r+0x662>
 80080f8:	4bac      	ldr	r3, [pc, #688]	@ (80083ac <_dtoa_r+0x8cc>)
 80080fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080fe:	f7f8 f8e5 	bl	80002cc <__adddf3>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810a:	f7f8 fd25 	bl	8000b58 <__aeabi_dcmpgt>
 800810e:	2800      	cmp	r0, #0
 8008110:	d145      	bne.n	800819e <_dtoa_r+0x6be>
 8008112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008116:	49a5      	ldr	r1, [pc, #660]	@ (80083ac <_dtoa_r+0x8cc>)
 8008118:	2000      	movs	r0, #0
 800811a:	f7f8 f8d5 	bl	80002c8 <__aeabi_dsub>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008126:	f7f8 fcf9 	bl	8000b1c <__aeabi_dcmplt>
 800812a:	2800      	cmp	r0, #0
 800812c:	f43f aef5 	beq.w	8007f1a <_dtoa_r+0x43a>
 8008130:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008132:	1e73      	subs	r3, r6, #1
 8008134:	9315      	str	r3, [sp, #84]	@ 0x54
 8008136:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800813a:	2b30      	cmp	r3, #48	@ 0x30
 800813c:	d0f8      	beq.n	8008130 <_dtoa_r+0x650>
 800813e:	9f04      	ldr	r7, [sp, #16]
 8008140:	e73e      	b.n	8007fc0 <_dtoa_r+0x4e0>
 8008142:	4b9b      	ldr	r3, [pc, #620]	@ (80083b0 <_dtoa_r+0x8d0>)
 8008144:	f7f8 fa78 	bl	8000638 <__aeabi_dmul>
 8008148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800814c:	e7bc      	b.n	80080c8 <_dtoa_r+0x5e8>
 800814e:	d10c      	bne.n	800816a <_dtoa_r+0x68a>
 8008150:	4b98      	ldr	r3, [pc, #608]	@ (80083b4 <_dtoa_r+0x8d4>)
 8008152:	2200      	movs	r2, #0
 8008154:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008158:	f7f8 fa6e 	bl	8000638 <__aeabi_dmul>
 800815c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008160:	f7f8 fcf0 	bl	8000b44 <__aeabi_dcmpge>
 8008164:	2800      	cmp	r0, #0
 8008166:	f000 8157 	beq.w	8008418 <_dtoa_r+0x938>
 800816a:	2400      	movs	r4, #0
 800816c:	4625      	mov	r5, r4
 800816e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008170:	43db      	mvns	r3, r3
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	4656      	mov	r6, sl
 8008176:	2700      	movs	r7, #0
 8008178:	4621      	mov	r1, r4
 800817a:	4658      	mov	r0, fp
 800817c:	f000 fbb4 	bl	80088e8 <_Bfree>
 8008180:	2d00      	cmp	r5, #0
 8008182:	d0dc      	beq.n	800813e <_dtoa_r+0x65e>
 8008184:	b12f      	cbz	r7, 8008192 <_dtoa_r+0x6b2>
 8008186:	42af      	cmp	r7, r5
 8008188:	d003      	beq.n	8008192 <_dtoa_r+0x6b2>
 800818a:	4639      	mov	r1, r7
 800818c:	4658      	mov	r0, fp
 800818e:	f000 fbab 	bl	80088e8 <_Bfree>
 8008192:	4629      	mov	r1, r5
 8008194:	4658      	mov	r0, fp
 8008196:	f000 fba7 	bl	80088e8 <_Bfree>
 800819a:	e7d0      	b.n	800813e <_dtoa_r+0x65e>
 800819c:	9704      	str	r7, [sp, #16]
 800819e:	4633      	mov	r3, r6
 80081a0:	461e      	mov	r6, r3
 80081a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081a6:	2a39      	cmp	r2, #57	@ 0x39
 80081a8:	d107      	bne.n	80081ba <_dtoa_r+0x6da>
 80081aa:	459a      	cmp	sl, r3
 80081ac:	d1f8      	bne.n	80081a0 <_dtoa_r+0x6c0>
 80081ae:	9a04      	ldr	r2, [sp, #16]
 80081b0:	3201      	adds	r2, #1
 80081b2:	9204      	str	r2, [sp, #16]
 80081b4:	2230      	movs	r2, #48	@ 0x30
 80081b6:	f88a 2000 	strb.w	r2, [sl]
 80081ba:	781a      	ldrb	r2, [r3, #0]
 80081bc:	3201      	adds	r2, #1
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e7bd      	b.n	800813e <_dtoa_r+0x65e>
 80081c2:	4b7b      	ldr	r3, [pc, #492]	@ (80083b0 <_dtoa_r+0x8d0>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	f7f8 fa37 	bl	8000638 <__aeabi_dmul>
 80081ca:	2200      	movs	r2, #0
 80081cc:	2300      	movs	r3, #0
 80081ce:	4604      	mov	r4, r0
 80081d0:	460d      	mov	r5, r1
 80081d2:	f7f8 fc99 	bl	8000b08 <__aeabi_dcmpeq>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f43f aebb 	beq.w	8007f52 <_dtoa_r+0x472>
 80081dc:	e6f0      	b.n	8007fc0 <_dtoa_r+0x4e0>
 80081de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	f000 80db 	beq.w	800839c <_dtoa_r+0x8bc>
 80081e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081e8:	2a01      	cmp	r2, #1
 80081ea:	f300 80bf 	bgt.w	800836c <_dtoa_r+0x88c>
 80081ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	f000 80b7 	beq.w	8008364 <_dtoa_r+0x884>
 80081f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081fc:	4646      	mov	r6, r8
 80081fe:	9a08      	ldr	r2, [sp, #32]
 8008200:	2101      	movs	r1, #1
 8008202:	441a      	add	r2, r3
 8008204:	4658      	mov	r0, fp
 8008206:	4498      	add	r8, r3
 8008208:	9208      	str	r2, [sp, #32]
 800820a:	f000 fc21 	bl	8008a50 <__i2b>
 800820e:	4605      	mov	r5, r0
 8008210:	b15e      	cbz	r6, 800822a <_dtoa_r+0x74a>
 8008212:	9b08      	ldr	r3, [sp, #32]
 8008214:	2b00      	cmp	r3, #0
 8008216:	dd08      	ble.n	800822a <_dtoa_r+0x74a>
 8008218:	42b3      	cmp	r3, r6
 800821a:	9a08      	ldr	r2, [sp, #32]
 800821c:	bfa8      	it	ge
 800821e:	4633      	movge	r3, r6
 8008220:	eba8 0803 	sub.w	r8, r8, r3
 8008224:	1af6      	subs	r6, r6, r3
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	9308      	str	r3, [sp, #32]
 800822a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800822c:	b1f3      	cbz	r3, 800826c <_dtoa_r+0x78c>
 800822e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 80b7 	beq.w	80083a4 <_dtoa_r+0x8c4>
 8008236:	b18c      	cbz	r4, 800825c <_dtoa_r+0x77c>
 8008238:	4629      	mov	r1, r5
 800823a:	4622      	mov	r2, r4
 800823c:	4658      	mov	r0, fp
 800823e:	f000 fcc7 	bl	8008bd0 <__pow5mult>
 8008242:	464a      	mov	r2, r9
 8008244:	4601      	mov	r1, r0
 8008246:	4605      	mov	r5, r0
 8008248:	4658      	mov	r0, fp
 800824a:	f000 fc17 	bl	8008a7c <__multiply>
 800824e:	4649      	mov	r1, r9
 8008250:	9004      	str	r0, [sp, #16]
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fb48 	bl	80088e8 <_Bfree>
 8008258:	9b04      	ldr	r3, [sp, #16]
 800825a:	4699      	mov	r9, r3
 800825c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800825e:	1b1a      	subs	r2, r3, r4
 8008260:	d004      	beq.n	800826c <_dtoa_r+0x78c>
 8008262:	4649      	mov	r1, r9
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fcb3 	bl	8008bd0 <__pow5mult>
 800826a:	4681      	mov	r9, r0
 800826c:	2101      	movs	r1, #1
 800826e:	4658      	mov	r0, fp
 8008270:	f000 fbee 	bl	8008a50 <__i2b>
 8008274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008276:	4604      	mov	r4, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 81cf 	beq.w	800861c <_dtoa_r+0xb3c>
 800827e:	461a      	mov	r2, r3
 8008280:	4601      	mov	r1, r0
 8008282:	4658      	mov	r0, fp
 8008284:	f000 fca4 	bl	8008bd0 <__pow5mult>
 8008288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828a:	2b01      	cmp	r3, #1
 800828c:	4604      	mov	r4, r0
 800828e:	f300 8095 	bgt.w	80083bc <_dtoa_r+0x8dc>
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f040 8087 	bne.w	80083a8 <_dtoa_r+0x8c8>
 800829a:	9b03      	ldr	r3, [sp, #12]
 800829c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f040 8089 	bne.w	80083b8 <_dtoa_r+0x8d8>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082ac:	0d1b      	lsrs	r3, r3, #20
 80082ae:	051b      	lsls	r3, r3, #20
 80082b0:	b12b      	cbz	r3, 80082be <_dtoa_r+0x7de>
 80082b2:	9b08      	ldr	r3, [sp, #32]
 80082b4:	3301      	adds	r3, #1
 80082b6:	9308      	str	r3, [sp, #32]
 80082b8:	f108 0801 	add.w	r8, r8, #1
 80082bc:	2301      	movs	r3, #1
 80082be:	930a      	str	r3, [sp, #40]	@ 0x28
 80082c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 81b0 	beq.w	8008628 <_dtoa_r+0xb48>
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082ce:	6918      	ldr	r0, [r3, #16]
 80082d0:	f000 fb72 	bl	80089b8 <__hi0bits>
 80082d4:	f1c0 0020 	rsb	r0, r0, #32
 80082d8:	9b08      	ldr	r3, [sp, #32]
 80082da:	4418      	add	r0, r3
 80082dc:	f010 001f 	ands.w	r0, r0, #31
 80082e0:	d077      	beq.n	80083d2 <_dtoa_r+0x8f2>
 80082e2:	f1c0 0320 	rsb	r3, r0, #32
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	dd6b      	ble.n	80083c2 <_dtoa_r+0x8e2>
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	f1c0 001c 	rsb	r0, r0, #28
 80082f0:	4403      	add	r3, r0
 80082f2:	4480      	add	r8, r0
 80082f4:	4406      	add	r6, r0
 80082f6:	9308      	str	r3, [sp, #32]
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	dd05      	ble.n	800830a <_dtoa_r+0x82a>
 80082fe:	4649      	mov	r1, r9
 8008300:	4642      	mov	r2, r8
 8008302:	4658      	mov	r0, fp
 8008304:	f000 fcbe 	bl	8008c84 <__lshift>
 8008308:	4681      	mov	r9, r0
 800830a:	9b08      	ldr	r3, [sp, #32]
 800830c:	2b00      	cmp	r3, #0
 800830e:	dd05      	ble.n	800831c <_dtoa_r+0x83c>
 8008310:	4621      	mov	r1, r4
 8008312:	461a      	mov	r2, r3
 8008314:	4658      	mov	r0, fp
 8008316:	f000 fcb5 	bl	8008c84 <__lshift>
 800831a:	4604      	mov	r4, r0
 800831c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800831e:	2b00      	cmp	r3, #0
 8008320:	d059      	beq.n	80083d6 <_dtoa_r+0x8f6>
 8008322:	4621      	mov	r1, r4
 8008324:	4648      	mov	r0, r9
 8008326:	f000 fd19 	bl	8008d5c <__mcmp>
 800832a:	2800      	cmp	r0, #0
 800832c:	da53      	bge.n	80083d6 <_dtoa_r+0x8f6>
 800832e:	1e7b      	subs	r3, r7, #1
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	4649      	mov	r1, r9
 8008334:	2300      	movs	r3, #0
 8008336:	220a      	movs	r2, #10
 8008338:	4658      	mov	r0, fp
 800833a:	f000 faf7 	bl	800892c <__multadd>
 800833e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008340:	4681      	mov	r9, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 8172 	beq.w	800862c <_dtoa_r+0xb4c>
 8008348:	2300      	movs	r3, #0
 800834a:	4629      	mov	r1, r5
 800834c:	220a      	movs	r2, #10
 800834e:	4658      	mov	r0, fp
 8008350:	f000 faec 	bl	800892c <__multadd>
 8008354:	9b00      	ldr	r3, [sp, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	4605      	mov	r5, r0
 800835a:	dc67      	bgt.n	800842c <_dtoa_r+0x94c>
 800835c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800835e:	2b02      	cmp	r3, #2
 8008360:	dc41      	bgt.n	80083e6 <_dtoa_r+0x906>
 8008362:	e063      	b.n	800842c <_dtoa_r+0x94c>
 8008364:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008366:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800836a:	e746      	b.n	80081fa <_dtoa_r+0x71a>
 800836c:	9b07      	ldr	r3, [sp, #28]
 800836e:	1e5c      	subs	r4, r3, #1
 8008370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008372:	42a3      	cmp	r3, r4
 8008374:	bfbf      	itttt	lt
 8008376:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008378:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800837a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800837c:	1ae3      	sublt	r3, r4, r3
 800837e:	bfb4      	ite	lt
 8008380:	18d2      	addlt	r2, r2, r3
 8008382:	1b1c      	subge	r4, r3, r4
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	bfbc      	itt	lt
 8008388:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800838a:	2400      	movlt	r4, #0
 800838c:	2b00      	cmp	r3, #0
 800838e:	bfb5      	itete	lt
 8008390:	eba8 0603 	sublt.w	r6, r8, r3
 8008394:	9b07      	ldrge	r3, [sp, #28]
 8008396:	2300      	movlt	r3, #0
 8008398:	4646      	movge	r6, r8
 800839a:	e730      	b.n	80081fe <_dtoa_r+0x71e>
 800839c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800839e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083a0:	4646      	mov	r6, r8
 80083a2:	e735      	b.n	8008210 <_dtoa_r+0x730>
 80083a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083a6:	e75c      	b.n	8008262 <_dtoa_r+0x782>
 80083a8:	2300      	movs	r3, #0
 80083aa:	e788      	b.n	80082be <_dtoa_r+0x7de>
 80083ac:	3fe00000 	.word	0x3fe00000
 80083b0:	40240000 	.word	0x40240000
 80083b4:	40140000 	.word	0x40140000
 80083b8:	9b02      	ldr	r3, [sp, #8]
 80083ba:	e780      	b.n	80082be <_dtoa_r+0x7de>
 80083bc:	2300      	movs	r3, #0
 80083be:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c0:	e782      	b.n	80082c8 <_dtoa_r+0x7e8>
 80083c2:	d099      	beq.n	80082f8 <_dtoa_r+0x818>
 80083c4:	9a08      	ldr	r2, [sp, #32]
 80083c6:	331c      	adds	r3, #28
 80083c8:	441a      	add	r2, r3
 80083ca:	4498      	add	r8, r3
 80083cc:	441e      	add	r6, r3
 80083ce:	9208      	str	r2, [sp, #32]
 80083d0:	e792      	b.n	80082f8 <_dtoa_r+0x818>
 80083d2:	4603      	mov	r3, r0
 80083d4:	e7f6      	b.n	80083c4 <_dtoa_r+0x8e4>
 80083d6:	9b07      	ldr	r3, [sp, #28]
 80083d8:	9704      	str	r7, [sp, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dc20      	bgt.n	8008420 <_dtoa_r+0x940>
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	dd1e      	ble.n	8008424 <_dtoa_r+0x944>
 80083e6:	9b00      	ldr	r3, [sp, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f47f aec0 	bne.w	800816e <_dtoa_r+0x68e>
 80083ee:	4621      	mov	r1, r4
 80083f0:	2205      	movs	r2, #5
 80083f2:	4658      	mov	r0, fp
 80083f4:	f000 fa9a 	bl	800892c <__multadd>
 80083f8:	4601      	mov	r1, r0
 80083fa:	4604      	mov	r4, r0
 80083fc:	4648      	mov	r0, r9
 80083fe:	f000 fcad 	bl	8008d5c <__mcmp>
 8008402:	2800      	cmp	r0, #0
 8008404:	f77f aeb3 	ble.w	800816e <_dtoa_r+0x68e>
 8008408:	4656      	mov	r6, sl
 800840a:	2331      	movs	r3, #49	@ 0x31
 800840c:	f806 3b01 	strb.w	r3, [r6], #1
 8008410:	9b04      	ldr	r3, [sp, #16]
 8008412:	3301      	adds	r3, #1
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	e6ae      	b.n	8008176 <_dtoa_r+0x696>
 8008418:	9c07      	ldr	r4, [sp, #28]
 800841a:	9704      	str	r7, [sp, #16]
 800841c:	4625      	mov	r5, r4
 800841e:	e7f3      	b.n	8008408 <_dtoa_r+0x928>
 8008420:	9b07      	ldr	r3, [sp, #28]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 8104 	beq.w	8008634 <_dtoa_r+0xb54>
 800842c:	2e00      	cmp	r6, #0
 800842e:	dd05      	ble.n	800843c <_dtoa_r+0x95c>
 8008430:	4629      	mov	r1, r5
 8008432:	4632      	mov	r2, r6
 8008434:	4658      	mov	r0, fp
 8008436:	f000 fc25 	bl	8008c84 <__lshift>
 800843a:	4605      	mov	r5, r0
 800843c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800843e:	2b00      	cmp	r3, #0
 8008440:	d05a      	beq.n	80084f8 <_dtoa_r+0xa18>
 8008442:	6869      	ldr	r1, [r5, #4]
 8008444:	4658      	mov	r0, fp
 8008446:	f000 fa0f 	bl	8008868 <_Balloc>
 800844a:	4606      	mov	r6, r0
 800844c:	b928      	cbnz	r0, 800845a <_dtoa_r+0x97a>
 800844e:	4b84      	ldr	r3, [pc, #528]	@ (8008660 <_dtoa_r+0xb80>)
 8008450:	4602      	mov	r2, r0
 8008452:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008456:	f7ff bb5a 	b.w	8007b0e <_dtoa_r+0x2e>
 800845a:	692a      	ldr	r2, [r5, #16]
 800845c:	3202      	adds	r2, #2
 800845e:	0092      	lsls	r2, r2, #2
 8008460:	f105 010c 	add.w	r1, r5, #12
 8008464:	300c      	adds	r0, #12
 8008466:	f000 ffaf 	bl	80093c8 <memcpy>
 800846a:	2201      	movs	r2, #1
 800846c:	4631      	mov	r1, r6
 800846e:	4658      	mov	r0, fp
 8008470:	f000 fc08 	bl	8008c84 <__lshift>
 8008474:	f10a 0301 	add.w	r3, sl, #1
 8008478:	9307      	str	r3, [sp, #28]
 800847a:	9b00      	ldr	r3, [sp, #0]
 800847c:	4453      	add	r3, sl
 800847e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008480:	9b02      	ldr	r3, [sp, #8]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	462f      	mov	r7, r5
 8008488:	930a      	str	r3, [sp, #40]	@ 0x28
 800848a:	4605      	mov	r5, r0
 800848c:	9b07      	ldr	r3, [sp, #28]
 800848e:	4621      	mov	r1, r4
 8008490:	3b01      	subs	r3, #1
 8008492:	4648      	mov	r0, r9
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	f7ff fa98 	bl	80079ca <quorem>
 800849a:	4639      	mov	r1, r7
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084a2:	4648      	mov	r0, r9
 80084a4:	f000 fc5a 	bl	8008d5c <__mcmp>
 80084a8:	462a      	mov	r2, r5
 80084aa:	9008      	str	r0, [sp, #32]
 80084ac:	4621      	mov	r1, r4
 80084ae:	4658      	mov	r0, fp
 80084b0:	f000 fc70 	bl	8008d94 <__mdiff>
 80084b4:	68c2      	ldr	r2, [r0, #12]
 80084b6:	4606      	mov	r6, r0
 80084b8:	bb02      	cbnz	r2, 80084fc <_dtoa_r+0xa1c>
 80084ba:	4601      	mov	r1, r0
 80084bc:	4648      	mov	r0, r9
 80084be:	f000 fc4d 	bl	8008d5c <__mcmp>
 80084c2:	4602      	mov	r2, r0
 80084c4:	4631      	mov	r1, r6
 80084c6:	4658      	mov	r0, fp
 80084c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80084ca:	f000 fa0d 	bl	80088e8 <_Bfree>
 80084ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084d2:	9e07      	ldr	r6, [sp, #28]
 80084d4:	ea43 0102 	orr.w	r1, r3, r2
 80084d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084da:	4319      	orrs	r1, r3
 80084dc:	d110      	bne.n	8008500 <_dtoa_r+0xa20>
 80084de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084e2:	d029      	beq.n	8008538 <_dtoa_r+0xa58>
 80084e4:	9b08      	ldr	r3, [sp, #32]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	dd02      	ble.n	80084f0 <_dtoa_r+0xa10>
 80084ea:	9b02      	ldr	r3, [sp, #8]
 80084ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084f0:	9b00      	ldr	r3, [sp, #0]
 80084f2:	f883 8000 	strb.w	r8, [r3]
 80084f6:	e63f      	b.n	8008178 <_dtoa_r+0x698>
 80084f8:	4628      	mov	r0, r5
 80084fa:	e7bb      	b.n	8008474 <_dtoa_r+0x994>
 80084fc:	2201      	movs	r2, #1
 80084fe:	e7e1      	b.n	80084c4 <_dtoa_r+0x9e4>
 8008500:	9b08      	ldr	r3, [sp, #32]
 8008502:	2b00      	cmp	r3, #0
 8008504:	db04      	blt.n	8008510 <_dtoa_r+0xa30>
 8008506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008508:	430b      	orrs	r3, r1
 800850a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800850c:	430b      	orrs	r3, r1
 800850e:	d120      	bne.n	8008552 <_dtoa_r+0xa72>
 8008510:	2a00      	cmp	r2, #0
 8008512:	dded      	ble.n	80084f0 <_dtoa_r+0xa10>
 8008514:	4649      	mov	r1, r9
 8008516:	2201      	movs	r2, #1
 8008518:	4658      	mov	r0, fp
 800851a:	f000 fbb3 	bl	8008c84 <__lshift>
 800851e:	4621      	mov	r1, r4
 8008520:	4681      	mov	r9, r0
 8008522:	f000 fc1b 	bl	8008d5c <__mcmp>
 8008526:	2800      	cmp	r0, #0
 8008528:	dc03      	bgt.n	8008532 <_dtoa_r+0xa52>
 800852a:	d1e1      	bne.n	80084f0 <_dtoa_r+0xa10>
 800852c:	f018 0f01 	tst.w	r8, #1
 8008530:	d0de      	beq.n	80084f0 <_dtoa_r+0xa10>
 8008532:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008536:	d1d8      	bne.n	80084ea <_dtoa_r+0xa0a>
 8008538:	9a00      	ldr	r2, [sp, #0]
 800853a:	2339      	movs	r3, #57	@ 0x39
 800853c:	7013      	strb	r3, [r2, #0]
 800853e:	4633      	mov	r3, r6
 8008540:	461e      	mov	r6, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008548:	2a39      	cmp	r2, #57	@ 0x39
 800854a:	d052      	beq.n	80085f2 <_dtoa_r+0xb12>
 800854c:	3201      	adds	r2, #1
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e612      	b.n	8008178 <_dtoa_r+0x698>
 8008552:	2a00      	cmp	r2, #0
 8008554:	dd07      	ble.n	8008566 <_dtoa_r+0xa86>
 8008556:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800855a:	d0ed      	beq.n	8008538 <_dtoa_r+0xa58>
 800855c:	9a00      	ldr	r2, [sp, #0]
 800855e:	f108 0301 	add.w	r3, r8, #1
 8008562:	7013      	strb	r3, [r2, #0]
 8008564:	e608      	b.n	8008178 <_dtoa_r+0x698>
 8008566:	9b07      	ldr	r3, [sp, #28]
 8008568:	9a07      	ldr	r2, [sp, #28]
 800856a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800856e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008570:	4293      	cmp	r3, r2
 8008572:	d028      	beq.n	80085c6 <_dtoa_r+0xae6>
 8008574:	4649      	mov	r1, r9
 8008576:	2300      	movs	r3, #0
 8008578:	220a      	movs	r2, #10
 800857a:	4658      	mov	r0, fp
 800857c:	f000 f9d6 	bl	800892c <__multadd>
 8008580:	42af      	cmp	r7, r5
 8008582:	4681      	mov	r9, r0
 8008584:	f04f 0300 	mov.w	r3, #0
 8008588:	f04f 020a 	mov.w	r2, #10
 800858c:	4639      	mov	r1, r7
 800858e:	4658      	mov	r0, fp
 8008590:	d107      	bne.n	80085a2 <_dtoa_r+0xac2>
 8008592:	f000 f9cb 	bl	800892c <__multadd>
 8008596:	4607      	mov	r7, r0
 8008598:	4605      	mov	r5, r0
 800859a:	9b07      	ldr	r3, [sp, #28]
 800859c:	3301      	adds	r3, #1
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	e774      	b.n	800848c <_dtoa_r+0x9ac>
 80085a2:	f000 f9c3 	bl	800892c <__multadd>
 80085a6:	4629      	mov	r1, r5
 80085a8:	4607      	mov	r7, r0
 80085aa:	2300      	movs	r3, #0
 80085ac:	220a      	movs	r2, #10
 80085ae:	4658      	mov	r0, fp
 80085b0:	f000 f9bc 	bl	800892c <__multadd>
 80085b4:	4605      	mov	r5, r0
 80085b6:	e7f0      	b.n	800859a <_dtoa_r+0xaba>
 80085b8:	9b00      	ldr	r3, [sp, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	bfcc      	ite	gt
 80085be:	461e      	movgt	r6, r3
 80085c0:	2601      	movle	r6, #1
 80085c2:	4456      	add	r6, sl
 80085c4:	2700      	movs	r7, #0
 80085c6:	4649      	mov	r1, r9
 80085c8:	2201      	movs	r2, #1
 80085ca:	4658      	mov	r0, fp
 80085cc:	f000 fb5a 	bl	8008c84 <__lshift>
 80085d0:	4621      	mov	r1, r4
 80085d2:	4681      	mov	r9, r0
 80085d4:	f000 fbc2 	bl	8008d5c <__mcmp>
 80085d8:	2800      	cmp	r0, #0
 80085da:	dcb0      	bgt.n	800853e <_dtoa_r+0xa5e>
 80085dc:	d102      	bne.n	80085e4 <_dtoa_r+0xb04>
 80085de:	f018 0f01 	tst.w	r8, #1
 80085e2:	d1ac      	bne.n	800853e <_dtoa_r+0xa5e>
 80085e4:	4633      	mov	r3, r6
 80085e6:	461e      	mov	r6, r3
 80085e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ec:	2a30      	cmp	r2, #48	@ 0x30
 80085ee:	d0fa      	beq.n	80085e6 <_dtoa_r+0xb06>
 80085f0:	e5c2      	b.n	8008178 <_dtoa_r+0x698>
 80085f2:	459a      	cmp	sl, r3
 80085f4:	d1a4      	bne.n	8008540 <_dtoa_r+0xa60>
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	3301      	adds	r3, #1
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	2331      	movs	r3, #49	@ 0x31
 80085fe:	f88a 3000 	strb.w	r3, [sl]
 8008602:	e5b9      	b.n	8008178 <_dtoa_r+0x698>
 8008604:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008606:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008664 <_dtoa_r+0xb84>
 800860a:	b11b      	cbz	r3, 8008614 <_dtoa_r+0xb34>
 800860c:	f10a 0308 	add.w	r3, sl, #8
 8008610:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	4650      	mov	r0, sl
 8008616:	b019      	add	sp, #100	@ 0x64
 8008618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861e:	2b01      	cmp	r3, #1
 8008620:	f77f ae37 	ble.w	8008292 <_dtoa_r+0x7b2>
 8008624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008626:	930a      	str	r3, [sp, #40]	@ 0x28
 8008628:	2001      	movs	r0, #1
 800862a:	e655      	b.n	80082d8 <_dtoa_r+0x7f8>
 800862c:	9b00      	ldr	r3, [sp, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f77f aed6 	ble.w	80083e0 <_dtoa_r+0x900>
 8008634:	4656      	mov	r6, sl
 8008636:	4621      	mov	r1, r4
 8008638:	4648      	mov	r0, r9
 800863a:	f7ff f9c6 	bl	80079ca <quorem>
 800863e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008642:	f806 8b01 	strb.w	r8, [r6], #1
 8008646:	9b00      	ldr	r3, [sp, #0]
 8008648:	eba6 020a 	sub.w	r2, r6, sl
 800864c:	4293      	cmp	r3, r2
 800864e:	ddb3      	ble.n	80085b8 <_dtoa_r+0xad8>
 8008650:	4649      	mov	r1, r9
 8008652:	2300      	movs	r3, #0
 8008654:	220a      	movs	r2, #10
 8008656:	4658      	mov	r0, fp
 8008658:	f000 f968 	bl	800892c <__multadd>
 800865c:	4681      	mov	r9, r0
 800865e:	e7ea      	b.n	8008636 <_dtoa_r+0xb56>
 8008660:	08009b54 	.word	0x08009b54
 8008664:	08009ad8 	.word	0x08009ad8

08008668 <_free_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4605      	mov	r5, r0
 800866c:	2900      	cmp	r1, #0
 800866e:	d041      	beq.n	80086f4 <_free_r+0x8c>
 8008670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008674:	1f0c      	subs	r4, r1, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfb8      	it	lt
 800867a:	18e4      	addlt	r4, r4, r3
 800867c:	f000 f8e8 	bl	8008850 <__malloc_lock>
 8008680:	4a1d      	ldr	r2, [pc, #116]	@ (80086f8 <_free_r+0x90>)
 8008682:	6813      	ldr	r3, [r2, #0]
 8008684:	b933      	cbnz	r3, 8008694 <_free_r+0x2c>
 8008686:	6063      	str	r3, [r4, #4]
 8008688:	6014      	str	r4, [r2, #0]
 800868a:	4628      	mov	r0, r5
 800868c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008690:	f000 b8e4 	b.w	800885c <__malloc_unlock>
 8008694:	42a3      	cmp	r3, r4
 8008696:	d908      	bls.n	80086aa <_free_r+0x42>
 8008698:	6820      	ldr	r0, [r4, #0]
 800869a:	1821      	adds	r1, r4, r0
 800869c:	428b      	cmp	r3, r1
 800869e:	bf01      	itttt	eq
 80086a0:	6819      	ldreq	r1, [r3, #0]
 80086a2:	685b      	ldreq	r3, [r3, #4]
 80086a4:	1809      	addeq	r1, r1, r0
 80086a6:	6021      	streq	r1, [r4, #0]
 80086a8:	e7ed      	b.n	8008686 <_free_r+0x1e>
 80086aa:	461a      	mov	r2, r3
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	b10b      	cbz	r3, 80086b4 <_free_r+0x4c>
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	d9fa      	bls.n	80086aa <_free_r+0x42>
 80086b4:	6811      	ldr	r1, [r2, #0]
 80086b6:	1850      	adds	r0, r2, r1
 80086b8:	42a0      	cmp	r0, r4
 80086ba:	d10b      	bne.n	80086d4 <_free_r+0x6c>
 80086bc:	6820      	ldr	r0, [r4, #0]
 80086be:	4401      	add	r1, r0
 80086c0:	1850      	adds	r0, r2, r1
 80086c2:	4283      	cmp	r3, r0
 80086c4:	6011      	str	r1, [r2, #0]
 80086c6:	d1e0      	bne.n	800868a <_free_r+0x22>
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	6053      	str	r3, [r2, #4]
 80086ce:	4408      	add	r0, r1
 80086d0:	6010      	str	r0, [r2, #0]
 80086d2:	e7da      	b.n	800868a <_free_r+0x22>
 80086d4:	d902      	bls.n	80086dc <_free_r+0x74>
 80086d6:	230c      	movs	r3, #12
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	e7d6      	b.n	800868a <_free_r+0x22>
 80086dc:	6820      	ldr	r0, [r4, #0]
 80086de:	1821      	adds	r1, r4, r0
 80086e0:	428b      	cmp	r3, r1
 80086e2:	bf04      	itt	eq
 80086e4:	6819      	ldreq	r1, [r3, #0]
 80086e6:	685b      	ldreq	r3, [r3, #4]
 80086e8:	6063      	str	r3, [r4, #4]
 80086ea:	bf04      	itt	eq
 80086ec:	1809      	addeq	r1, r1, r0
 80086ee:	6021      	streq	r1, [r4, #0]
 80086f0:	6054      	str	r4, [r2, #4]
 80086f2:	e7ca      	b.n	800868a <_free_r+0x22>
 80086f4:	bd38      	pop	{r3, r4, r5, pc}
 80086f6:	bf00      	nop
 80086f8:	20000a54 	.word	0x20000a54

080086fc <malloc>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	@ (8008708 <malloc+0xc>)
 80086fe:	4601      	mov	r1, r0
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	f000 b825 	b.w	8008750 <_malloc_r>
 8008706:	bf00      	nop
 8008708:	20000024 	.word	0x20000024

0800870c <sbrk_aligned>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4e0f      	ldr	r6, [pc, #60]	@ (800874c <sbrk_aligned+0x40>)
 8008710:	460c      	mov	r4, r1
 8008712:	6831      	ldr	r1, [r6, #0]
 8008714:	4605      	mov	r5, r0
 8008716:	b911      	cbnz	r1, 800871e <sbrk_aligned+0x12>
 8008718:	f000 fe46 	bl	80093a8 <_sbrk_r>
 800871c:	6030      	str	r0, [r6, #0]
 800871e:	4621      	mov	r1, r4
 8008720:	4628      	mov	r0, r5
 8008722:	f000 fe41 	bl	80093a8 <_sbrk_r>
 8008726:	1c43      	adds	r3, r0, #1
 8008728:	d103      	bne.n	8008732 <sbrk_aligned+0x26>
 800872a:	f04f 34ff 	mov.w	r4, #4294967295
 800872e:	4620      	mov	r0, r4
 8008730:	bd70      	pop	{r4, r5, r6, pc}
 8008732:	1cc4      	adds	r4, r0, #3
 8008734:	f024 0403 	bic.w	r4, r4, #3
 8008738:	42a0      	cmp	r0, r4
 800873a:	d0f8      	beq.n	800872e <sbrk_aligned+0x22>
 800873c:	1a21      	subs	r1, r4, r0
 800873e:	4628      	mov	r0, r5
 8008740:	f000 fe32 	bl	80093a8 <_sbrk_r>
 8008744:	3001      	adds	r0, #1
 8008746:	d1f2      	bne.n	800872e <sbrk_aligned+0x22>
 8008748:	e7ef      	b.n	800872a <sbrk_aligned+0x1e>
 800874a:	bf00      	nop
 800874c:	20000a50 	.word	0x20000a50

08008750 <_malloc_r>:
 8008750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008754:	1ccd      	adds	r5, r1, #3
 8008756:	f025 0503 	bic.w	r5, r5, #3
 800875a:	3508      	adds	r5, #8
 800875c:	2d0c      	cmp	r5, #12
 800875e:	bf38      	it	cc
 8008760:	250c      	movcc	r5, #12
 8008762:	2d00      	cmp	r5, #0
 8008764:	4606      	mov	r6, r0
 8008766:	db01      	blt.n	800876c <_malloc_r+0x1c>
 8008768:	42a9      	cmp	r1, r5
 800876a:	d904      	bls.n	8008776 <_malloc_r+0x26>
 800876c:	230c      	movs	r3, #12
 800876e:	6033      	str	r3, [r6, #0]
 8008770:	2000      	movs	r0, #0
 8008772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008776:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800884c <_malloc_r+0xfc>
 800877a:	f000 f869 	bl	8008850 <__malloc_lock>
 800877e:	f8d8 3000 	ldr.w	r3, [r8]
 8008782:	461c      	mov	r4, r3
 8008784:	bb44      	cbnz	r4, 80087d8 <_malloc_r+0x88>
 8008786:	4629      	mov	r1, r5
 8008788:	4630      	mov	r0, r6
 800878a:	f7ff ffbf 	bl	800870c <sbrk_aligned>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	4604      	mov	r4, r0
 8008792:	d158      	bne.n	8008846 <_malloc_r+0xf6>
 8008794:	f8d8 4000 	ldr.w	r4, [r8]
 8008798:	4627      	mov	r7, r4
 800879a:	2f00      	cmp	r7, #0
 800879c:	d143      	bne.n	8008826 <_malloc_r+0xd6>
 800879e:	2c00      	cmp	r4, #0
 80087a0:	d04b      	beq.n	800883a <_malloc_r+0xea>
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	4639      	mov	r1, r7
 80087a6:	4630      	mov	r0, r6
 80087a8:	eb04 0903 	add.w	r9, r4, r3
 80087ac:	f000 fdfc 	bl	80093a8 <_sbrk_r>
 80087b0:	4581      	cmp	r9, r0
 80087b2:	d142      	bne.n	800883a <_malloc_r+0xea>
 80087b4:	6821      	ldr	r1, [r4, #0]
 80087b6:	1a6d      	subs	r5, r5, r1
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ffa6 	bl	800870c <sbrk_aligned>
 80087c0:	3001      	adds	r0, #1
 80087c2:	d03a      	beq.n	800883a <_malloc_r+0xea>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	442b      	add	r3, r5
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	f8d8 3000 	ldr.w	r3, [r8]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	bb62      	cbnz	r2, 800882c <_malloc_r+0xdc>
 80087d2:	f8c8 7000 	str.w	r7, [r8]
 80087d6:	e00f      	b.n	80087f8 <_malloc_r+0xa8>
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	1b52      	subs	r2, r2, r5
 80087dc:	d420      	bmi.n	8008820 <_malloc_r+0xd0>
 80087de:	2a0b      	cmp	r2, #11
 80087e0:	d917      	bls.n	8008812 <_malloc_r+0xc2>
 80087e2:	1961      	adds	r1, r4, r5
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	6025      	str	r5, [r4, #0]
 80087e8:	bf18      	it	ne
 80087ea:	6059      	strne	r1, [r3, #4]
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	bf08      	it	eq
 80087f0:	f8c8 1000 	streq.w	r1, [r8]
 80087f4:	5162      	str	r2, [r4, r5]
 80087f6:	604b      	str	r3, [r1, #4]
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f82f 	bl	800885c <__malloc_unlock>
 80087fe:	f104 000b 	add.w	r0, r4, #11
 8008802:	1d23      	adds	r3, r4, #4
 8008804:	f020 0007 	bic.w	r0, r0, #7
 8008808:	1ac2      	subs	r2, r0, r3
 800880a:	bf1c      	itt	ne
 800880c:	1a1b      	subne	r3, r3, r0
 800880e:	50a3      	strne	r3, [r4, r2]
 8008810:	e7af      	b.n	8008772 <_malloc_r+0x22>
 8008812:	6862      	ldr	r2, [r4, #4]
 8008814:	42a3      	cmp	r3, r4
 8008816:	bf0c      	ite	eq
 8008818:	f8c8 2000 	streq.w	r2, [r8]
 800881c:	605a      	strne	r2, [r3, #4]
 800881e:	e7eb      	b.n	80087f8 <_malloc_r+0xa8>
 8008820:	4623      	mov	r3, r4
 8008822:	6864      	ldr	r4, [r4, #4]
 8008824:	e7ae      	b.n	8008784 <_malloc_r+0x34>
 8008826:	463c      	mov	r4, r7
 8008828:	687f      	ldr	r7, [r7, #4]
 800882a:	e7b6      	b.n	800879a <_malloc_r+0x4a>
 800882c:	461a      	mov	r2, r3
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	42a3      	cmp	r3, r4
 8008832:	d1fb      	bne.n	800882c <_malloc_r+0xdc>
 8008834:	2300      	movs	r3, #0
 8008836:	6053      	str	r3, [r2, #4]
 8008838:	e7de      	b.n	80087f8 <_malloc_r+0xa8>
 800883a:	230c      	movs	r3, #12
 800883c:	6033      	str	r3, [r6, #0]
 800883e:	4630      	mov	r0, r6
 8008840:	f000 f80c 	bl	800885c <__malloc_unlock>
 8008844:	e794      	b.n	8008770 <_malloc_r+0x20>
 8008846:	6005      	str	r5, [r0, #0]
 8008848:	e7d6      	b.n	80087f8 <_malloc_r+0xa8>
 800884a:	bf00      	nop
 800884c:	20000a54 	.word	0x20000a54

08008850 <__malloc_lock>:
 8008850:	4801      	ldr	r0, [pc, #4]	@ (8008858 <__malloc_lock+0x8>)
 8008852:	f7ff b8b8 	b.w	80079c6 <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	20000a4c 	.word	0x20000a4c

0800885c <__malloc_unlock>:
 800885c:	4801      	ldr	r0, [pc, #4]	@ (8008864 <__malloc_unlock+0x8>)
 800885e:	f7ff b8b3 	b.w	80079c8 <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	20000a4c 	.word	0x20000a4c

08008868 <_Balloc>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	69c6      	ldr	r6, [r0, #28]
 800886c:	4604      	mov	r4, r0
 800886e:	460d      	mov	r5, r1
 8008870:	b976      	cbnz	r6, 8008890 <_Balloc+0x28>
 8008872:	2010      	movs	r0, #16
 8008874:	f7ff ff42 	bl	80086fc <malloc>
 8008878:	4602      	mov	r2, r0
 800887a:	61e0      	str	r0, [r4, #28]
 800887c:	b920      	cbnz	r0, 8008888 <_Balloc+0x20>
 800887e:	4b18      	ldr	r3, [pc, #96]	@ (80088e0 <_Balloc+0x78>)
 8008880:	4818      	ldr	r0, [pc, #96]	@ (80088e4 <_Balloc+0x7c>)
 8008882:	216b      	movs	r1, #107	@ 0x6b
 8008884:	f000 fdae 	bl	80093e4 <__assert_func>
 8008888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800888c:	6006      	str	r6, [r0, #0]
 800888e:	60c6      	str	r6, [r0, #12]
 8008890:	69e6      	ldr	r6, [r4, #28]
 8008892:	68f3      	ldr	r3, [r6, #12]
 8008894:	b183      	cbz	r3, 80088b8 <_Balloc+0x50>
 8008896:	69e3      	ldr	r3, [r4, #28]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800889e:	b9b8      	cbnz	r0, 80088d0 <_Balloc+0x68>
 80088a0:	2101      	movs	r1, #1
 80088a2:	fa01 f605 	lsl.w	r6, r1, r5
 80088a6:	1d72      	adds	r2, r6, #5
 80088a8:	0092      	lsls	r2, r2, #2
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 fdb8 	bl	8009420 <_calloc_r>
 80088b0:	b160      	cbz	r0, 80088cc <_Balloc+0x64>
 80088b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088b6:	e00e      	b.n	80088d6 <_Balloc+0x6e>
 80088b8:	2221      	movs	r2, #33	@ 0x21
 80088ba:	2104      	movs	r1, #4
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fdaf 	bl	8009420 <_calloc_r>
 80088c2:	69e3      	ldr	r3, [r4, #28]
 80088c4:	60f0      	str	r0, [r6, #12]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e4      	bne.n	8008896 <_Balloc+0x2e>
 80088cc:	2000      	movs	r0, #0
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	6802      	ldr	r2, [r0, #0]
 80088d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088d6:	2300      	movs	r3, #0
 80088d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088dc:	e7f7      	b.n	80088ce <_Balloc+0x66>
 80088de:	bf00      	nop
 80088e0:	08009ae5 	.word	0x08009ae5
 80088e4:	08009b65 	.word	0x08009b65

080088e8 <_Bfree>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	69c6      	ldr	r6, [r0, #28]
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	b976      	cbnz	r6, 8008910 <_Bfree+0x28>
 80088f2:	2010      	movs	r0, #16
 80088f4:	f7ff ff02 	bl	80086fc <malloc>
 80088f8:	4602      	mov	r2, r0
 80088fa:	61e8      	str	r0, [r5, #28]
 80088fc:	b920      	cbnz	r0, 8008908 <_Bfree+0x20>
 80088fe:	4b09      	ldr	r3, [pc, #36]	@ (8008924 <_Bfree+0x3c>)
 8008900:	4809      	ldr	r0, [pc, #36]	@ (8008928 <_Bfree+0x40>)
 8008902:	218f      	movs	r1, #143	@ 0x8f
 8008904:	f000 fd6e 	bl	80093e4 <__assert_func>
 8008908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800890c:	6006      	str	r6, [r0, #0]
 800890e:	60c6      	str	r6, [r0, #12]
 8008910:	b13c      	cbz	r4, 8008922 <_Bfree+0x3a>
 8008912:	69eb      	ldr	r3, [r5, #28]
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800891c:	6021      	str	r1, [r4, #0]
 800891e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	08009ae5 	.word	0x08009ae5
 8008928:	08009b65 	.word	0x08009b65

0800892c <__multadd>:
 800892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008930:	690d      	ldr	r5, [r1, #16]
 8008932:	4607      	mov	r7, r0
 8008934:	460c      	mov	r4, r1
 8008936:	461e      	mov	r6, r3
 8008938:	f101 0c14 	add.w	ip, r1, #20
 800893c:	2000      	movs	r0, #0
 800893e:	f8dc 3000 	ldr.w	r3, [ip]
 8008942:	b299      	uxth	r1, r3
 8008944:	fb02 6101 	mla	r1, r2, r1, r6
 8008948:	0c1e      	lsrs	r6, r3, #16
 800894a:	0c0b      	lsrs	r3, r1, #16
 800894c:	fb02 3306 	mla	r3, r2, r6, r3
 8008950:	b289      	uxth	r1, r1
 8008952:	3001      	adds	r0, #1
 8008954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008958:	4285      	cmp	r5, r0
 800895a:	f84c 1b04 	str.w	r1, [ip], #4
 800895e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008962:	dcec      	bgt.n	800893e <__multadd+0x12>
 8008964:	b30e      	cbz	r6, 80089aa <__multadd+0x7e>
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	42ab      	cmp	r3, r5
 800896a:	dc19      	bgt.n	80089a0 <__multadd+0x74>
 800896c:	6861      	ldr	r1, [r4, #4]
 800896e:	4638      	mov	r0, r7
 8008970:	3101      	adds	r1, #1
 8008972:	f7ff ff79 	bl	8008868 <_Balloc>
 8008976:	4680      	mov	r8, r0
 8008978:	b928      	cbnz	r0, 8008986 <__multadd+0x5a>
 800897a:	4602      	mov	r2, r0
 800897c:	4b0c      	ldr	r3, [pc, #48]	@ (80089b0 <__multadd+0x84>)
 800897e:	480d      	ldr	r0, [pc, #52]	@ (80089b4 <__multadd+0x88>)
 8008980:	21ba      	movs	r1, #186	@ 0xba
 8008982:	f000 fd2f 	bl	80093e4 <__assert_func>
 8008986:	6922      	ldr	r2, [r4, #16]
 8008988:	3202      	adds	r2, #2
 800898a:	f104 010c 	add.w	r1, r4, #12
 800898e:	0092      	lsls	r2, r2, #2
 8008990:	300c      	adds	r0, #12
 8008992:	f000 fd19 	bl	80093c8 <memcpy>
 8008996:	4621      	mov	r1, r4
 8008998:	4638      	mov	r0, r7
 800899a:	f7ff ffa5 	bl	80088e8 <_Bfree>
 800899e:	4644      	mov	r4, r8
 80089a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089a4:	3501      	adds	r5, #1
 80089a6:	615e      	str	r6, [r3, #20]
 80089a8:	6125      	str	r5, [r4, #16]
 80089aa:	4620      	mov	r0, r4
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b0:	08009b54 	.word	0x08009b54
 80089b4:	08009b65 	.word	0x08009b65

080089b8 <__hi0bits>:
 80089b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089bc:	4603      	mov	r3, r0
 80089be:	bf36      	itet	cc
 80089c0:	0403      	lslcc	r3, r0, #16
 80089c2:	2000      	movcs	r0, #0
 80089c4:	2010      	movcc	r0, #16
 80089c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089ca:	bf3c      	itt	cc
 80089cc:	021b      	lslcc	r3, r3, #8
 80089ce:	3008      	addcc	r0, #8
 80089d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089d4:	bf3c      	itt	cc
 80089d6:	011b      	lslcc	r3, r3, #4
 80089d8:	3004      	addcc	r0, #4
 80089da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089de:	bf3c      	itt	cc
 80089e0:	009b      	lslcc	r3, r3, #2
 80089e2:	3002      	addcc	r0, #2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	db05      	blt.n	80089f4 <__hi0bits+0x3c>
 80089e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089ec:	f100 0001 	add.w	r0, r0, #1
 80089f0:	bf08      	it	eq
 80089f2:	2020      	moveq	r0, #32
 80089f4:	4770      	bx	lr

080089f6 <__lo0bits>:
 80089f6:	6803      	ldr	r3, [r0, #0]
 80089f8:	4602      	mov	r2, r0
 80089fa:	f013 0007 	ands.w	r0, r3, #7
 80089fe:	d00b      	beq.n	8008a18 <__lo0bits+0x22>
 8008a00:	07d9      	lsls	r1, r3, #31
 8008a02:	d421      	bmi.n	8008a48 <__lo0bits+0x52>
 8008a04:	0798      	lsls	r0, r3, #30
 8008a06:	bf49      	itett	mi
 8008a08:	085b      	lsrmi	r3, r3, #1
 8008a0a:	089b      	lsrpl	r3, r3, #2
 8008a0c:	2001      	movmi	r0, #1
 8008a0e:	6013      	strmi	r3, [r2, #0]
 8008a10:	bf5c      	itt	pl
 8008a12:	6013      	strpl	r3, [r2, #0]
 8008a14:	2002      	movpl	r0, #2
 8008a16:	4770      	bx	lr
 8008a18:	b299      	uxth	r1, r3
 8008a1a:	b909      	cbnz	r1, 8008a20 <__lo0bits+0x2a>
 8008a1c:	0c1b      	lsrs	r3, r3, #16
 8008a1e:	2010      	movs	r0, #16
 8008a20:	b2d9      	uxtb	r1, r3
 8008a22:	b909      	cbnz	r1, 8008a28 <__lo0bits+0x32>
 8008a24:	3008      	adds	r0, #8
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	0719      	lsls	r1, r3, #28
 8008a2a:	bf04      	itt	eq
 8008a2c:	091b      	lsreq	r3, r3, #4
 8008a2e:	3004      	addeq	r0, #4
 8008a30:	0799      	lsls	r1, r3, #30
 8008a32:	bf04      	itt	eq
 8008a34:	089b      	lsreq	r3, r3, #2
 8008a36:	3002      	addeq	r0, #2
 8008a38:	07d9      	lsls	r1, r3, #31
 8008a3a:	d403      	bmi.n	8008a44 <__lo0bits+0x4e>
 8008a3c:	085b      	lsrs	r3, r3, #1
 8008a3e:	f100 0001 	add.w	r0, r0, #1
 8008a42:	d003      	beq.n	8008a4c <__lo0bits+0x56>
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	4770      	bx	lr
 8008a48:	2000      	movs	r0, #0
 8008a4a:	4770      	bx	lr
 8008a4c:	2020      	movs	r0, #32
 8008a4e:	4770      	bx	lr

08008a50 <__i2b>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	460c      	mov	r4, r1
 8008a54:	2101      	movs	r1, #1
 8008a56:	f7ff ff07 	bl	8008868 <_Balloc>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	b928      	cbnz	r0, 8008a6a <__i2b+0x1a>
 8008a5e:	4b05      	ldr	r3, [pc, #20]	@ (8008a74 <__i2b+0x24>)
 8008a60:	4805      	ldr	r0, [pc, #20]	@ (8008a78 <__i2b+0x28>)
 8008a62:	f240 1145 	movw	r1, #325	@ 0x145
 8008a66:	f000 fcbd 	bl	80093e4 <__assert_func>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	6144      	str	r4, [r0, #20]
 8008a6e:	6103      	str	r3, [r0, #16]
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	bf00      	nop
 8008a74:	08009b54 	.word	0x08009b54
 8008a78:	08009b65 	.word	0x08009b65

08008a7c <__multiply>:
 8008a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	4614      	mov	r4, r2
 8008a82:	690a      	ldr	r2, [r1, #16]
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	bfa8      	it	ge
 8008a8a:	4623      	movge	r3, r4
 8008a8c:	460f      	mov	r7, r1
 8008a8e:	bfa4      	itt	ge
 8008a90:	460c      	movge	r4, r1
 8008a92:	461f      	movge	r7, r3
 8008a94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a9c:	68a3      	ldr	r3, [r4, #8]
 8008a9e:	6861      	ldr	r1, [r4, #4]
 8008aa0:	eb0a 0609 	add.w	r6, sl, r9
 8008aa4:	42b3      	cmp	r3, r6
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	bfb8      	it	lt
 8008aaa:	3101      	addlt	r1, #1
 8008aac:	f7ff fedc 	bl	8008868 <_Balloc>
 8008ab0:	b930      	cbnz	r0, 8008ac0 <__multiply+0x44>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4b44      	ldr	r3, [pc, #272]	@ (8008bc8 <__multiply+0x14c>)
 8008ab6:	4845      	ldr	r0, [pc, #276]	@ (8008bcc <__multiply+0x150>)
 8008ab8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008abc:	f000 fc92 	bl	80093e4 <__assert_func>
 8008ac0:	f100 0514 	add.w	r5, r0, #20
 8008ac4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ac8:	462b      	mov	r3, r5
 8008aca:	2200      	movs	r2, #0
 8008acc:	4543      	cmp	r3, r8
 8008ace:	d321      	bcc.n	8008b14 <__multiply+0x98>
 8008ad0:	f107 0114 	add.w	r1, r7, #20
 8008ad4:	f104 0214 	add.w	r2, r4, #20
 8008ad8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008adc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ae0:	9302      	str	r3, [sp, #8]
 8008ae2:	1b13      	subs	r3, r2, r4
 8008ae4:	3b15      	subs	r3, #21
 8008ae6:	f023 0303 	bic.w	r3, r3, #3
 8008aea:	3304      	adds	r3, #4
 8008aec:	f104 0715 	add.w	r7, r4, #21
 8008af0:	42ba      	cmp	r2, r7
 8008af2:	bf38      	it	cc
 8008af4:	2304      	movcc	r3, #4
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	9103      	str	r1, [sp, #12]
 8008afc:	428b      	cmp	r3, r1
 8008afe:	d80c      	bhi.n	8008b1a <__multiply+0x9e>
 8008b00:	2e00      	cmp	r6, #0
 8008b02:	dd03      	ble.n	8008b0c <__multiply+0x90>
 8008b04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d05b      	beq.n	8008bc4 <__multiply+0x148>
 8008b0c:	6106      	str	r6, [r0, #16]
 8008b0e:	b005      	add	sp, #20
 8008b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b14:	f843 2b04 	str.w	r2, [r3], #4
 8008b18:	e7d8      	b.n	8008acc <__multiply+0x50>
 8008b1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b1e:	f1ba 0f00 	cmp.w	sl, #0
 8008b22:	d024      	beq.n	8008b6e <__multiply+0xf2>
 8008b24:	f104 0e14 	add.w	lr, r4, #20
 8008b28:	46a9      	mov	r9, r5
 8008b2a:	f04f 0c00 	mov.w	ip, #0
 8008b2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b32:	f8d9 3000 	ldr.w	r3, [r9]
 8008b36:	fa1f fb87 	uxth.w	fp, r7
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b44:	f8d9 7000 	ldr.w	r7, [r9]
 8008b48:	4463      	add	r3, ip
 8008b4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b5c:	4572      	cmp	r2, lr
 8008b5e:	f849 3b04 	str.w	r3, [r9], #4
 8008b62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b66:	d8e2      	bhi.n	8008b2e <__multiply+0xb2>
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	f845 c003 	str.w	ip, [r5, r3]
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b74:	3104      	adds	r1, #4
 8008b76:	f1b9 0f00 	cmp.w	r9, #0
 8008b7a:	d021      	beq.n	8008bc0 <__multiply+0x144>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	f104 0c14 	add.w	ip, r4, #20
 8008b82:	46ae      	mov	lr, r5
 8008b84:	f04f 0a00 	mov.w	sl, #0
 8008b88:	f8bc b000 	ldrh.w	fp, [ip]
 8008b8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b90:	fb09 770b 	mla	r7, r9, fp, r7
 8008b94:	4457      	add	r7, sl
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b9c:	f84e 3b04 	str.w	r3, [lr], #4
 8008ba0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ba8:	f8be 3000 	ldrh.w	r3, [lr]
 8008bac:	fb09 330a 	mla	r3, r9, sl, r3
 8008bb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008bb4:	4562      	cmp	r2, ip
 8008bb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bba:	d8e5      	bhi.n	8008b88 <__multiply+0x10c>
 8008bbc:	9f01      	ldr	r7, [sp, #4]
 8008bbe:	51eb      	str	r3, [r5, r7]
 8008bc0:	3504      	adds	r5, #4
 8008bc2:	e799      	b.n	8008af8 <__multiply+0x7c>
 8008bc4:	3e01      	subs	r6, #1
 8008bc6:	e79b      	b.n	8008b00 <__multiply+0x84>
 8008bc8:	08009b54 	.word	0x08009b54
 8008bcc:	08009b65 	.word	0x08009b65

08008bd0 <__pow5mult>:
 8008bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	4615      	mov	r5, r2
 8008bd6:	f012 0203 	ands.w	r2, r2, #3
 8008bda:	4607      	mov	r7, r0
 8008bdc:	460e      	mov	r6, r1
 8008bde:	d007      	beq.n	8008bf0 <__pow5mult+0x20>
 8008be0:	4c25      	ldr	r4, [pc, #148]	@ (8008c78 <__pow5mult+0xa8>)
 8008be2:	3a01      	subs	r2, #1
 8008be4:	2300      	movs	r3, #0
 8008be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bea:	f7ff fe9f 	bl	800892c <__multadd>
 8008bee:	4606      	mov	r6, r0
 8008bf0:	10ad      	asrs	r5, r5, #2
 8008bf2:	d03d      	beq.n	8008c70 <__pow5mult+0xa0>
 8008bf4:	69fc      	ldr	r4, [r7, #28]
 8008bf6:	b97c      	cbnz	r4, 8008c18 <__pow5mult+0x48>
 8008bf8:	2010      	movs	r0, #16
 8008bfa:	f7ff fd7f 	bl	80086fc <malloc>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	61f8      	str	r0, [r7, #28]
 8008c02:	b928      	cbnz	r0, 8008c10 <__pow5mult+0x40>
 8008c04:	4b1d      	ldr	r3, [pc, #116]	@ (8008c7c <__pow5mult+0xac>)
 8008c06:	481e      	ldr	r0, [pc, #120]	@ (8008c80 <__pow5mult+0xb0>)
 8008c08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c0c:	f000 fbea 	bl	80093e4 <__assert_func>
 8008c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c14:	6004      	str	r4, [r0, #0]
 8008c16:	60c4      	str	r4, [r0, #12]
 8008c18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c20:	b94c      	cbnz	r4, 8008c36 <__pow5mult+0x66>
 8008c22:	f240 2171 	movw	r1, #625	@ 0x271
 8008c26:	4638      	mov	r0, r7
 8008c28:	f7ff ff12 	bl	8008a50 <__i2b>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c32:	4604      	mov	r4, r0
 8008c34:	6003      	str	r3, [r0, #0]
 8008c36:	f04f 0900 	mov.w	r9, #0
 8008c3a:	07eb      	lsls	r3, r5, #31
 8008c3c:	d50a      	bpl.n	8008c54 <__pow5mult+0x84>
 8008c3e:	4631      	mov	r1, r6
 8008c40:	4622      	mov	r2, r4
 8008c42:	4638      	mov	r0, r7
 8008c44:	f7ff ff1a 	bl	8008a7c <__multiply>
 8008c48:	4631      	mov	r1, r6
 8008c4a:	4680      	mov	r8, r0
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f7ff fe4b 	bl	80088e8 <_Bfree>
 8008c52:	4646      	mov	r6, r8
 8008c54:	106d      	asrs	r5, r5, #1
 8008c56:	d00b      	beq.n	8008c70 <__pow5mult+0xa0>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	b938      	cbnz	r0, 8008c6c <__pow5mult+0x9c>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4638      	mov	r0, r7
 8008c62:	f7ff ff0b 	bl	8008a7c <__multiply>
 8008c66:	6020      	str	r0, [r4, #0]
 8008c68:	f8c0 9000 	str.w	r9, [r0]
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	e7e4      	b.n	8008c3a <__pow5mult+0x6a>
 8008c70:	4630      	mov	r0, r6
 8008c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c76:	bf00      	nop
 8008c78:	08009bc0 	.word	0x08009bc0
 8008c7c:	08009ae5 	.word	0x08009ae5
 8008c80:	08009b65 	.word	0x08009b65

08008c84 <__lshift>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	460c      	mov	r4, r1
 8008c8a:	6849      	ldr	r1, [r1, #4]
 8008c8c:	6923      	ldr	r3, [r4, #16]
 8008c8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	4607      	mov	r7, r0
 8008c96:	4691      	mov	r9, r2
 8008c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c9c:	f108 0601 	add.w	r6, r8, #1
 8008ca0:	42b3      	cmp	r3, r6
 8008ca2:	db0b      	blt.n	8008cbc <__lshift+0x38>
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff fddf 	bl	8008868 <_Balloc>
 8008caa:	4605      	mov	r5, r0
 8008cac:	b948      	cbnz	r0, 8008cc2 <__lshift+0x3e>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	4b28      	ldr	r3, [pc, #160]	@ (8008d54 <__lshift+0xd0>)
 8008cb2:	4829      	ldr	r0, [pc, #164]	@ (8008d58 <__lshift+0xd4>)
 8008cb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cb8:	f000 fb94 	bl	80093e4 <__assert_func>
 8008cbc:	3101      	adds	r1, #1
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	e7ee      	b.n	8008ca0 <__lshift+0x1c>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f100 0114 	add.w	r1, r0, #20
 8008cc8:	f100 0210 	add.w	r2, r0, #16
 8008ccc:	4618      	mov	r0, r3
 8008cce:	4553      	cmp	r3, sl
 8008cd0:	db33      	blt.n	8008d3a <__lshift+0xb6>
 8008cd2:	6920      	ldr	r0, [r4, #16]
 8008cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cd8:	f104 0314 	add.w	r3, r4, #20
 8008cdc:	f019 091f 	ands.w	r9, r9, #31
 8008ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ce4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ce8:	d02b      	beq.n	8008d42 <__lshift+0xbe>
 8008cea:	f1c9 0e20 	rsb	lr, r9, #32
 8008cee:	468a      	mov	sl, r1
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	fa00 f009 	lsl.w	r0, r0, r9
 8008cf8:	4310      	orrs	r0, r2
 8008cfa:	f84a 0b04 	str.w	r0, [sl], #4
 8008cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d02:	459c      	cmp	ip, r3
 8008d04:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d08:	d8f3      	bhi.n	8008cf2 <__lshift+0x6e>
 8008d0a:	ebac 0304 	sub.w	r3, ip, r4
 8008d0e:	3b15      	subs	r3, #21
 8008d10:	f023 0303 	bic.w	r3, r3, #3
 8008d14:	3304      	adds	r3, #4
 8008d16:	f104 0015 	add.w	r0, r4, #21
 8008d1a:	4584      	cmp	ip, r0
 8008d1c:	bf38      	it	cc
 8008d1e:	2304      	movcc	r3, #4
 8008d20:	50ca      	str	r2, [r1, r3]
 8008d22:	b10a      	cbz	r2, 8008d28 <__lshift+0xa4>
 8008d24:	f108 0602 	add.w	r6, r8, #2
 8008d28:	3e01      	subs	r6, #1
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	612e      	str	r6, [r5, #16]
 8008d2e:	4621      	mov	r1, r4
 8008d30:	f7ff fdda 	bl	80088e8 <_Bfree>
 8008d34:	4628      	mov	r0, r5
 8008d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d3e:	3301      	adds	r3, #1
 8008d40:	e7c5      	b.n	8008cce <__lshift+0x4a>
 8008d42:	3904      	subs	r1, #4
 8008d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d48:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d4c:	459c      	cmp	ip, r3
 8008d4e:	d8f9      	bhi.n	8008d44 <__lshift+0xc0>
 8008d50:	e7ea      	b.n	8008d28 <__lshift+0xa4>
 8008d52:	bf00      	nop
 8008d54:	08009b54 	.word	0x08009b54
 8008d58:	08009b65 	.word	0x08009b65

08008d5c <__mcmp>:
 8008d5c:	690a      	ldr	r2, [r1, #16]
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6900      	ldr	r0, [r0, #16]
 8008d62:	1a80      	subs	r0, r0, r2
 8008d64:	b530      	push	{r4, r5, lr}
 8008d66:	d10e      	bne.n	8008d86 <__mcmp+0x2a>
 8008d68:	3314      	adds	r3, #20
 8008d6a:	3114      	adds	r1, #20
 8008d6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d7c:	4295      	cmp	r5, r2
 8008d7e:	d003      	beq.n	8008d88 <__mcmp+0x2c>
 8008d80:	d205      	bcs.n	8008d8e <__mcmp+0x32>
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
 8008d86:	bd30      	pop	{r4, r5, pc}
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	d3f3      	bcc.n	8008d74 <__mcmp+0x18>
 8008d8c:	e7fb      	b.n	8008d86 <__mcmp+0x2a>
 8008d8e:	2001      	movs	r0, #1
 8008d90:	e7f9      	b.n	8008d86 <__mcmp+0x2a>
	...

08008d94 <__mdiff>:
 8008d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	4689      	mov	r9, r1
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4648      	mov	r0, r9
 8008da0:	4614      	mov	r4, r2
 8008da2:	f7ff ffdb 	bl	8008d5c <__mcmp>
 8008da6:	1e05      	subs	r5, r0, #0
 8008da8:	d112      	bne.n	8008dd0 <__mdiff+0x3c>
 8008daa:	4629      	mov	r1, r5
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff fd5b 	bl	8008868 <_Balloc>
 8008db2:	4602      	mov	r2, r0
 8008db4:	b928      	cbnz	r0, 8008dc2 <__mdiff+0x2e>
 8008db6:	4b3f      	ldr	r3, [pc, #252]	@ (8008eb4 <__mdiff+0x120>)
 8008db8:	f240 2137 	movw	r1, #567	@ 0x237
 8008dbc:	483e      	ldr	r0, [pc, #248]	@ (8008eb8 <__mdiff+0x124>)
 8008dbe:	f000 fb11 	bl	80093e4 <__assert_func>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dc8:	4610      	mov	r0, r2
 8008dca:	b003      	add	sp, #12
 8008dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd0:	bfbc      	itt	lt
 8008dd2:	464b      	movlt	r3, r9
 8008dd4:	46a1      	movlt	r9, r4
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ddc:	bfba      	itte	lt
 8008dde:	461c      	movlt	r4, r3
 8008de0:	2501      	movlt	r5, #1
 8008de2:	2500      	movge	r5, #0
 8008de4:	f7ff fd40 	bl	8008868 <_Balloc>
 8008de8:	4602      	mov	r2, r0
 8008dea:	b918      	cbnz	r0, 8008df4 <__mdiff+0x60>
 8008dec:	4b31      	ldr	r3, [pc, #196]	@ (8008eb4 <__mdiff+0x120>)
 8008dee:	f240 2145 	movw	r1, #581	@ 0x245
 8008df2:	e7e3      	b.n	8008dbc <__mdiff+0x28>
 8008df4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008df8:	6926      	ldr	r6, [r4, #16]
 8008dfa:	60c5      	str	r5, [r0, #12]
 8008dfc:	f109 0310 	add.w	r3, r9, #16
 8008e00:	f109 0514 	add.w	r5, r9, #20
 8008e04:	f104 0e14 	add.w	lr, r4, #20
 8008e08:	f100 0b14 	add.w	fp, r0, #20
 8008e0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	46d9      	mov	r9, fp
 8008e18:	f04f 0c00 	mov.w	ip, #0
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	fa1f f38a 	uxth.w	r3, sl
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	b283      	uxth	r3, r0
 8008e30:	1acb      	subs	r3, r1, r3
 8008e32:	0c00      	lsrs	r0, r0, #16
 8008e34:	4463      	add	r3, ip
 8008e36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e44:	4576      	cmp	r6, lr
 8008e46:	f849 3b04 	str.w	r3, [r9], #4
 8008e4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e4e:	d8e5      	bhi.n	8008e1c <__mdiff+0x88>
 8008e50:	1b33      	subs	r3, r6, r4
 8008e52:	3b15      	subs	r3, #21
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	3415      	adds	r4, #21
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	42a6      	cmp	r6, r4
 8008e5e:	bf38      	it	cc
 8008e60:	2304      	movcc	r3, #4
 8008e62:	441d      	add	r5, r3
 8008e64:	445b      	add	r3, fp
 8008e66:	461e      	mov	r6, r3
 8008e68:	462c      	mov	r4, r5
 8008e6a:	4544      	cmp	r4, r8
 8008e6c:	d30e      	bcc.n	8008e8c <__mdiff+0xf8>
 8008e6e:	f108 0103 	add.w	r1, r8, #3
 8008e72:	1b49      	subs	r1, r1, r5
 8008e74:	f021 0103 	bic.w	r1, r1, #3
 8008e78:	3d03      	subs	r5, #3
 8008e7a:	45a8      	cmp	r8, r5
 8008e7c:	bf38      	it	cc
 8008e7e:	2100      	movcc	r1, #0
 8008e80:	440b      	add	r3, r1
 8008e82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e86:	b191      	cbz	r1, 8008eae <__mdiff+0x11a>
 8008e88:	6117      	str	r7, [r2, #16]
 8008e8a:	e79d      	b.n	8008dc8 <__mdiff+0x34>
 8008e8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e90:	46e6      	mov	lr, ip
 8008e92:	0c08      	lsrs	r0, r1, #16
 8008e94:	fa1c fc81 	uxtah	ip, ip, r1
 8008e98:	4471      	add	r1, lr
 8008e9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e9e:	b289      	uxth	r1, r1
 8008ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ea4:	f846 1b04 	str.w	r1, [r6], #4
 8008ea8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008eac:	e7dd      	b.n	8008e6a <__mdiff+0xd6>
 8008eae:	3f01      	subs	r7, #1
 8008eb0:	e7e7      	b.n	8008e82 <__mdiff+0xee>
 8008eb2:	bf00      	nop
 8008eb4:	08009b54 	.word	0x08009b54
 8008eb8:	08009b65 	.word	0x08009b65

08008ebc <__d2b>:
 8008ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	ec59 8b10 	vmov	r8, r9, d0
 8008ec8:	4616      	mov	r6, r2
 8008eca:	f7ff fccd 	bl	8008868 <_Balloc>
 8008ece:	4604      	mov	r4, r0
 8008ed0:	b930      	cbnz	r0, 8008ee0 <__d2b+0x24>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	4b23      	ldr	r3, [pc, #140]	@ (8008f64 <__d2b+0xa8>)
 8008ed6:	4824      	ldr	r0, [pc, #144]	@ (8008f68 <__d2b+0xac>)
 8008ed8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008edc:	f000 fa82 	bl	80093e4 <__assert_func>
 8008ee0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ee4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ee8:	b10d      	cbz	r5, 8008eee <__d2b+0x32>
 8008eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	f1b8 0300 	subs.w	r3, r8, #0
 8008ef4:	d023      	beq.n	8008f3e <__d2b+0x82>
 8008ef6:	4668      	mov	r0, sp
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	f7ff fd7c 	bl	80089f6 <__lo0bits>
 8008efe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f02:	b1d0      	cbz	r0, 8008f3a <__d2b+0x7e>
 8008f04:	f1c0 0320 	rsb	r3, r0, #32
 8008f08:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	40c2      	lsrs	r2, r0
 8008f10:	6163      	str	r3, [r4, #20]
 8008f12:	9201      	str	r2, [sp, #4]
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	61a3      	str	r3, [r4, #24]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bf0c      	ite	eq
 8008f1c:	2201      	moveq	r2, #1
 8008f1e:	2202      	movne	r2, #2
 8008f20:	6122      	str	r2, [r4, #16]
 8008f22:	b1a5      	cbz	r5, 8008f4e <__d2b+0x92>
 8008f24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f28:	4405      	add	r5, r0
 8008f2a:	603d      	str	r5, [r7, #0]
 8008f2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f30:	6030      	str	r0, [r6, #0]
 8008f32:	4620      	mov	r0, r4
 8008f34:	b003      	add	sp, #12
 8008f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f3a:	6161      	str	r1, [r4, #20]
 8008f3c:	e7ea      	b.n	8008f14 <__d2b+0x58>
 8008f3e:	a801      	add	r0, sp, #4
 8008f40:	f7ff fd59 	bl	80089f6 <__lo0bits>
 8008f44:	9b01      	ldr	r3, [sp, #4]
 8008f46:	6163      	str	r3, [r4, #20]
 8008f48:	3020      	adds	r0, #32
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	e7e8      	b.n	8008f20 <__d2b+0x64>
 8008f4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f56:	6038      	str	r0, [r7, #0]
 8008f58:	6918      	ldr	r0, [r3, #16]
 8008f5a:	f7ff fd2d 	bl	80089b8 <__hi0bits>
 8008f5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f62:	e7e5      	b.n	8008f30 <__d2b+0x74>
 8008f64:	08009b54 	.word	0x08009b54
 8008f68:	08009b65 	.word	0x08009b65

08008f6c <__ssputs_r>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	688e      	ldr	r6, [r1, #8]
 8008f72:	461f      	mov	r7, r3
 8008f74:	42be      	cmp	r6, r7
 8008f76:	680b      	ldr	r3, [r1, #0]
 8008f78:	4682      	mov	sl, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	4690      	mov	r8, r2
 8008f7e:	d82d      	bhi.n	8008fdc <__ssputs_r+0x70>
 8008f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f88:	d026      	beq.n	8008fd8 <__ssputs_r+0x6c>
 8008f8a:	6965      	ldr	r5, [r4, #20]
 8008f8c:	6909      	ldr	r1, [r1, #16]
 8008f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f92:	eba3 0901 	sub.w	r9, r3, r1
 8008f96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f9a:	1c7b      	adds	r3, r7, #1
 8008f9c:	444b      	add	r3, r9
 8008f9e:	106d      	asrs	r5, r5, #1
 8008fa0:	429d      	cmp	r5, r3
 8008fa2:	bf38      	it	cc
 8008fa4:	461d      	movcc	r5, r3
 8008fa6:	0553      	lsls	r3, r2, #21
 8008fa8:	d527      	bpl.n	8008ffa <__ssputs_r+0x8e>
 8008faa:	4629      	mov	r1, r5
 8008fac:	f7ff fbd0 	bl	8008750 <_malloc_r>
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	b360      	cbz	r0, 800900e <__ssputs_r+0xa2>
 8008fb4:	6921      	ldr	r1, [r4, #16]
 8008fb6:	464a      	mov	r2, r9
 8008fb8:	f000 fa06 	bl	80093c8 <memcpy>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc6:	81a3      	strh	r3, [r4, #12]
 8008fc8:	6126      	str	r6, [r4, #16]
 8008fca:	6165      	str	r5, [r4, #20]
 8008fcc:	444e      	add	r6, r9
 8008fce:	eba5 0509 	sub.w	r5, r5, r9
 8008fd2:	6026      	str	r6, [r4, #0]
 8008fd4:	60a5      	str	r5, [r4, #8]
 8008fd6:	463e      	mov	r6, r7
 8008fd8:	42be      	cmp	r6, r7
 8008fda:	d900      	bls.n	8008fde <__ssputs_r+0x72>
 8008fdc:	463e      	mov	r6, r7
 8008fde:	6820      	ldr	r0, [r4, #0]
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	4641      	mov	r1, r8
 8008fe4:	f000 f9c6 	bl	8009374 <memmove>
 8008fe8:	68a3      	ldr	r3, [r4, #8]
 8008fea:	1b9b      	subs	r3, r3, r6
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	4433      	add	r3, r6
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffa:	462a      	mov	r2, r5
 8008ffc:	f000 fa36 	bl	800946c <_realloc_r>
 8009000:	4606      	mov	r6, r0
 8009002:	2800      	cmp	r0, #0
 8009004:	d1e0      	bne.n	8008fc8 <__ssputs_r+0x5c>
 8009006:	6921      	ldr	r1, [r4, #16]
 8009008:	4650      	mov	r0, sl
 800900a:	f7ff fb2d 	bl	8008668 <_free_r>
 800900e:	230c      	movs	r3, #12
 8009010:	f8ca 3000 	str.w	r3, [sl]
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	e7e9      	b.n	8008ff6 <__ssputs_r+0x8a>
	...

08009024 <_svfiprintf_r>:
 8009024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009028:	4698      	mov	r8, r3
 800902a:	898b      	ldrh	r3, [r1, #12]
 800902c:	061b      	lsls	r3, r3, #24
 800902e:	b09d      	sub	sp, #116	@ 0x74
 8009030:	4607      	mov	r7, r0
 8009032:	460d      	mov	r5, r1
 8009034:	4614      	mov	r4, r2
 8009036:	d510      	bpl.n	800905a <_svfiprintf_r+0x36>
 8009038:	690b      	ldr	r3, [r1, #16]
 800903a:	b973      	cbnz	r3, 800905a <_svfiprintf_r+0x36>
 800903c:	2140      	movs	r1, #64	@ 0x40
 800903e:	f7ff fb87 	bl	8008750 <_malloc_r>
 8009042:	6028      	str	r0, [r5, #0]
 8009044:	6128      	str	r0, [r5, #16]
 8009046:	b930      	cbnz	r0, 8009056 <_svfiprintf_r+0x32>
 8009048:	230c      	movs	r3, #12
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	b01d      	add	sp, #116	@ 0x74
 8009052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009056:	2340      	movs	r3, #64	@ 0x40
 8009058:	616b      	str	r3, [r5, #20]
 800905a:	2300      	movs	r3, #0
 800905c:	9309      	str	r3, [sp, #36]	@ 0x24
 800905e:	2320      	movs	r3, #32
 8009060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009064:	f8cd 800c 	str.w	r8, [sp, #12]
 8009068:	2330      	movs	r3, #48	@ 0x30
 800906a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009208 <_svfiprintf_r+0x1e4>
 800906e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009072:	f04f 0901 	mov.w	r9, #1
 8009076:	4623      	mov	r3, r4
 8009078:	469a      	mov	sl, r3
 800907a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800907e:	b10a      	cbz	r2, 8009084 <_svfiprintf_r+0x60>
 8009080:	2a25      	cmp	r2, #37	@ 0x25
 8009082:	d1f9      	bne.n	8009078 <_svfiprintf_r+0x54>
 8009084:	ebba 0b04 	subs.w	fp, sl, r4
 8009088:	d00b      	beq.n	80090a2 <_svfiprintf_r+0x7e>
 800908a:	465b      	mov	r3, fp
 800908c:	4622      	mov	r2, r4
 800908e:	4629      	mov	r1, r5
 8009090:	4638      	mov	r0, r7
 8009092:	f7ff ff6b 	bl	8008f6c <__ssputs_r>
 8009096:	3001      	adds	r0, #1
 8009098:	f000 80a7 	beq.w	80091ea <_svfiprintf_r+0x1c6>
 800909c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800909e:	445a      	add	r2, fp
 80090a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80090a2:	f89a 3000 	ldrb.w	r3, [sl]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 809f 	beq.w	80091ea <_svfiprintf_r+0x1c6>
 80090ac:	2300      	movs	r3, #0
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295
 80090b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b6:	f10a 0a01 	add.w	sl, sl, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	9307      	str	r3, [sp, #28]
 80090be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80090c4:	4654      	mov	r4, sl
 80090c6:	2205      	movs	r2, #5
 80090c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090cc:	484e      	ldr	r0, [pc, #312]	@ (8009208 <_svfiprintf_r+0x1e4>)
 80090ce:	f7f7 f89f 	bl	8000210 <memchr>
 80090d2:	9a04      	ldr	r2, [sp, #16]
 80090d4:	b9d8      	cbnz	r0, 800910e <_svfiprintf_r+0xea>
 80090d6:	06d0      	lsls	r0, r2, #27
 80090d8:	bf44      	itt	mi
 80090da:	2320      	movmi	r3, #32
 80090dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e0:	0711      	lsls	r1, r2, #28
 80090e2:	bf44      	itt	mi
 80090e4:	232b      	movmi	r3, #43	@ 0x2b
 80090e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090ea:	f89a 3000 	ldrb.w	r3, [sl]
 80090ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80090f0:	d015      	beq.n	800911e <_svfiprintf_r+0xfa>
 80090f2:	9a07      	ldr	r2, [sp, #28]
 80090f4:	4654      	mov	r4, sl
 80090f6:	2000      	movs	r0, #0
 80090f8:	f04f 0c0a 	mov.w	ip, #10
 80090fc:	4621      	mov	r1, r4
 80090fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009102:	3b30      	subs	r3, #48	@ 0x30
 8009104:	2b09      	cmp	r3, #9
 8009106:	d94b      	bls.n	80091a0 <_svfiprintf_r+0x17c>
 8009108:	b1b0      	cbz	r0, 8009138 <_svfiprintf_r+0x114>
 800910a:	9207      	str	r2, [sp, #28]
 800910c:	e014      	b.n	8009138 <_svfiprintf_r+0x114>
 800910e:	eba0 0308 	sub.w	r3, r0, r8
 8009112:	fa09 f303 	lsl.w	r3, r9, r3
 8009116:	4313      	orrs	r3, r2
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	46a2      	mov	sl, r4
 800911c:	e7d2      	b.n	80090c4 <_svfiprintf_r+0xa0>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	1d19      	adds	r1, r3, #4
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	9103      	str	r1, [sp, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfbb      	ittet	lt
 800912a:	425b      	neglt	r3, r3
 800912c:	f042 0202 	orrlt.w	r2, r2, #2
 8009130:	9307      	strge	r3, [sp, #28]
 8009132:	9307      	strlt	r3, [sp, #28]
 8009134:	bfb8      	it	lt
 8009136:	9204      	strlt	r2, [sp, #16]
 8009138:	7823      	ldrb	r3, [r4, #0]
 800913a:	2b2e      	cmp	r3, #46	@ 0x2e
 800913c:	d10a      	bne.n	8009154 <_svfiprintf_r+0x130>
 800913e:	7863      	ldrb	r3, [r4, #1]
 8009140:	2b2a      	cmp	r3, #42	@ 0x2a
 8009142:	d132      	bne.n	80091aa <_svfiprintf_r+0x186>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	1d1a      	adds	r2, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	9203      	str	r2, [sp, #12]
 800914c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009150:	3402      	adds	r4, #2
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009218 <_svfiprintf_r+0x1f4>
 8009158:	7821      	ldrb	r1, [r4, #0]
 800915a:	2203      	movs	r2, #3
 800915c:	4650      	mov	r0, sl
 800915e:	f7f7 f857 	bl	8000210 <memchr>
 8009162:	b138      	cbz	r0, 8009174 <_svfiprintf_r+0x150>
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	eba0 000a 	sub.w	r0, r0, sl
 800916a:	2240      	movs	r2, #64	@ 0x40
 800916c:	4082      	lsls	r2, r0
 800916e:	4313      	orrs	r3, r2
 8009170:	3401      	adds	r4, #1
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009178:	4824      	ldr	r0, [pc, #144]	@ (800920c <_svfiprintf_r+0x1e8>)
 800917a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800917e:	2206      	movs	r2, #6
 8009180:	f7f7 f846 	bl	8000210 <memchr>
 8009184:	2800      	cmp	r0, #0
 8009186:	d036      	beq.n	80091f6 <_svfiprintf_r+0x1d2>
 8009188:	4b21      	ldr	r3, [pc, #132]	@ (8009210 <_svfiprintf_r+0x1ec>)
 800918a:	bb1b      	cbnz	r3, 80091d4 <_svfiprintf_r+0x1b0>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	3307      	adds	r3, #7
 8009190:	f023 0307 	bic.w	r3, r3, #7
 8009194:	3308      	adds	r3, #8
 8009196:	9303      	str	r3, [sp, #12]
 8009198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800919a:	4433      	add	r3, r6
 800919c:	9309      	str	r3, [sp, #36]	@ 0x24
 800919e:	e76a      	b.n	8009076 <_svfiprintf_r+0x52>
 80091a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091a4:	460c      	mov	r4, r1
 80091a6:	2001      	movs	r0, #1
 80091a8:	e7a8      	b.n	80090fc <_svfiprintf_r+0xd8>
 80091aa:	2300      	movs	r3, #0
 80091ac:	3401      	adds	r4, #1
 80091ae:	9305      	str	r3, [sp, #20]
 80091b0:	4619      	mov	r1, r3
 80091b2:	f04f 0c0a 	mov.w	ip, #10
 80091b6:	4620      	mov	r0, r4
 80091b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091bc:	3a30      	subs	r2, #48	@ 0x30
 80091be:	2a09      	cmp	r2, #9
 80091c0:	d903      	bls.n	80091ca <_svfiprintf_r+0x1a6>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0c6      	beq.n	8009154 <_svfiprintf_r+0x130>
 80091c6:	9105      	str	r1, [sp, #20]
 80091c8:	e7c4      	b.n	8009154 <_svfiprintf_r+0x130>
 80091ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ce:	4604      	mov	r4, r0
 80091d0:	2301      	movs	r3, #1
 80091d2:	e7f0      	b.n	80091b6 <_svfiprintf_r+0x192>
 80091d4:	ab03      	add	r3, sp, #12
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	462a      	mov	r2, r5
 80091da:	4b0e      	ldr	r3, [pc, #56]	@ (8009214 <_svfiprintf_r+0x1f0>)
 80091dc:	a904      	add	r1, sp, #16
 80091de:	4638      	mov	r0, r7
 80091e0:	f7fd fe96 	bl	8006f10 <_printf_float>
 80091e4:	1c42      	adds	r2, r0, #1
 80091e6:	4606      	mov	r6, r0
 80091e8:	d1d6      	bne.n	8009198 <_svfiprintf_r+0x174>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	065b      	lsls	r3, r3, #25
 80091ee:	f53f af2d 	bmi.w	800904c <_svfiprintf_r+0x28>
 80091f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091f4:	e72c      	b.n	8009050 <_svfiprintf_r+0x2c>
 80091f6:	ab03      	add	r3, sp, #12
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	462a      	mov	r2, r5
 80091fc:	4b05      	ldr	r3, [pc, #20]	@ (8009214 <_svfiprintf_r+0x1f0>)
 80091fe:	a904      	add	r1, sp, #16
 8009200:	4638      	mov	r0, r7
 8009202:	f7fe f91d 	bl	8007440 <_printf_i>
 8009206:	e7ed      	b.n	80091e4 <_svfiprintf_r+0x1c0>
 8009208:	08009cc0 	.word	0x08009cc0
 800920c:	08009cca 	.word	0x08009cca
 8009210:	08006f11 	.word	0x08006f11
 8009214:	08008f6d 	.word	0x08008f6d
 8009218:	08009cc6 	.word	0x08009cc6

0800921c <__sflush_r>:
 800921c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009224:	0716      	lsls	r6, r2, #28
 8009226:	4605      	mov	r5, r0
 8009228:	460c      	mov	r4, r1
 800922a:	d454      	bmi.n	80092d6 <__sflush_r+0xba>
 800922c:	684b      	ldr	r3, [r1, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	dc02      	bgt.n	8009238 <__sflush_r+0x1c>
 8009232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009234:	2b00      	cmp	r3, #0
 8009236:	dd48      	ble.n	80092ca <__sflush_r+0xae>
 8009238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800923a:	2e00      	cmp	r6, #0
 800923c:	d045      	beq.n	80092ca <__sflush_r+0xae>
 800923e:	2300      	movs	r3, #0
 8009240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009244:	682f      	ldr	r7, [r5, #0]
 8009246:	6a21      	ldr	r1, [r4, #32]
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	d030      	beq.n	80092ae <__sflush_r+0x92>
 800924c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	0759      	lsls	r1, r3, #29
 8009252:	d505      	bpl.n	8009260 <__sflush_r+0x44>
 8009254:	6863      	ldr	r3, [r4, #4]
 8009256:	1ad2      	subs	r2, r2, r3
 8009258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800925a:	b10b      	cbz	r3, 8009260 <__sflush_r+0x44>
 800925c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800925e:	1ad2      	subs	r2, r2, r3
 8009260:	2300      	movs	r3, #0
 8009262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009264:	6a21      	ldr	r1, [r4, #32]
 8009266:	4628      	mov	r0, r5
 8009268:	47b0      	blx	r6
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	d106      	bne.n	800927e <__sflush_r+0x62>
 8009270:	6829      	ldr	r1, [r5, #0]
 8009272:	291d      	cmp	r1, #29
 8009274:	d82b      	bhi.n	80092ce <__sflush_r+0xb2>
 8009276:	4a2a      	ldr	r2, [pc, #168]	@ (8009320 <__sflush_r+0x104>)
 8009278:	410a      	asrs	r2, r1
 800927a:	07d6      	lsls	r6, r2, #31
 800927c:	d427      	bmi.n	80092ce <__sflush_r+0xb2>
 800927e:	2200      	movs	r2, #0
 8009280:	6062      	str	r2, [r4, #4]
 8009282:	04d9      	lsls	r1, r3, #19
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	6022      	str	r2, [r4, #0]
 8009288:	d504      	bpl.n	8009294 <__sflush_r+0x78>
 800928a:	1c42      	adds	r2, r0, #1
 800928c:	d101      	bne.n	8009292 <__sflush_r+0x76>
 800928e:	682b      	ldr	r3, [r5, #0]
 8009290:	b903      	cbnz	r3, 8009294 <__sflush_r+0x78>
 8009292:	6560      	str	r0, [r4, #84]	@ 0x54
 8009294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009296:	602f      	str	r7, [r5, #0]
 8009298:	b1b9      	cbz	r1, 80092ca <__sflush_r+0xae>
 800929a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800929e:	4299      	cmp	r1, r3
 80092a0:	d002      	beq.n	80092a8 <__sflush_r+0x8c>
 80092a2:	4628      	mov	r0, r5
 80092a4:	f7ff f9e0 	bl	8008668 <_free_r>
 80092a8:	2300      	movs	r3, #0
 80092aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80092ac:	e00d      	b.n	80092ca <__sflush_r+0xae>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b0      	blx	r6
 80092b4:	4602      	mov	r2, r0
 80092b6:	1c50      	adds	r0, r2, #1
 80092b8:	d1c9      	bne.n	800924e <__sflush_r+0x32>
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0c6      	beq.n	800924e <__sflush_r+0x32>
 80092c0:	2b1d      	cmp	r3, #29
 80092c2:	d001      	beq.n	80092c8 <__sflush_r+0xac>
 80092c4:	2b16      	cmp	r3, #22
 80092c6:	d11e      	bne.n	8009306 <__sflush_r+0xea>
 80092c8:	602f      	str	r7, [r5, #0]
 80092ca:	2000      	movs	r0, #0
 80092cc:	e022      	b.n	8009314 <__sflush_r+0xf8>
 80092ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092d2:	b21b      	sxth	r3, r3
 80092d4:	e01b      	b.n	800930e <__sflush_r+0xf2>
 80092d6:	690f      	ldr	r7, [r1, #16]
 80092d8:	2f00      	cmp	r7, #0
 80092da:	d0f6      	beq.n	80092ca <__sflush_r+0xae>
 80092dc:	0793      	lsls	r3, r2, #30
 80092de:	680e      	ldr	r6, [r1, #0]
 80092e0:	bf08      	it	eq
 80092e2:	694b      	ldreq	r3, [r1, #20]
 80092e4:	600f      	str	r7, [r1, #0]
 80092e6:	bf18      	it	ne
 80092e8:	2300      	movne	r3, #0
 80092ea:	eba6 0807 	sub.w	r8, r6, r7
 80092ee:	608b      	str	r3, [r1, #8]
 80092f0:	f1b8 0f00 	cmp.w	r8, #0
 80092f4:	dde9      	ble.n	80092ca <__sflush_r+0xae>
 80092f6:	6a21      	ldr	r1, [r4, #32]
 80092f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092fa:	4643      	mov	r3, r8
 80092fc:	463a      	mov	r2, r7
 80092fe:	4628      	mov	r0, r5
 8009300:	47b0      	blx	r6
 8009302:	2800      	cmp	r0, #0
 8009304:	dc08      	bgt.n	8009318 <__sflush_r+0xfc>
 8009306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	f04f 30ff 	mov.w	r0, #4294967295
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	4407      	add	r7, r0
 800931a:	eba8 0800 	sub.w	r8, r8, r0
 800931e:	e7e7      	b.n	80092f0 <__sflush_r+0xd4>
 8009320:	dfbffffe 	.word	0xdfbffffe

08009324 <_fflush_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	4605      	mov	r5, r0
 800932a:	460c      	mov	r4, r1
 800932c:	b913      	cbnz	r3, 8009334 <_fflush_r+0x10>
 800932e:	2500      	movs	r5, #0
 8009330:	4628      	mov	r0, r5
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	b118      	cbz	r0, 800933e <_fflush_r+0x1a>
 8009336:	6a03      	ldr	r3, [r0, #32]
 8009338:	b90b      	cbnz	r3, 800933e <_fflush_r+0x1a>
 800933a:	f7fe fa2d 	bl	8007798 <__sinit>
 800933e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0f3      	beq.n	800932e <_fflush_r+0xa>
 8009346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009348:	07d0      	lsls	r0, r2, #31
 800934a:	d404      	bmi.n	8009356 <_fflush_r+0x32>
 800934c:	0599      	lsls	r1, r3, #22
 800934e:	d402      	bmi.n	8009356 <_fflush_r+0x32>
 8009350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009352:	f7fe fb38 	bl	80079c6 <__retarget_lock_acquire_recursive>
 8009356:	4628      	mov	r0, r5
 8009358:	4621      	mov	r1, r4
 800935a:	f7ff ff5f 	bl	800921c <__sflush_r>
 800935e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009360:	07da      	lsls	r2, r3, #31
 8009362:	4605      	mov	r5, r0
 8009364:	d4e4      	bmi.n	8009330 <_fflush_r+0xc>
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	059b      	lsls	r3, r3, #22
 800936a:	d4e1      	bmi.n	8009330 <_fflush_r+0xc>
 800936c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800936e:	f7fe fb2b 	bl	80079c8 <__retarget_lock_release_recursive>
 8009372:	e7dd      	b.n	8009330 <_fflush_r+0xc>

08009374 <memmove>:
 8009374:	4288      	cmp	r0, r1
 8009376:	b510      	push	{r4, lr}
 8009378:	eb01 0402 	add.w	r4, r1, r2
 800937c:	d902      	bls.n	8009384 <memmove+0x10>
 800937e:	4284      	cmp	r4, r0
 8009380:	4623      	mov	r3, r4
 8009382:	d807      	bhi.n	8009394 <memmove+0x20>
 8009384:	1e43      	subs	r3, r0, #1
 8009386:	42a1      	cmp	r1, r4
 8009388:	d008      	beq.n	800939c <memmove+0x28>
 800938a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800938e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009392:	e7f8      	b.n	8009386 <memmove+0x12>
 8009394:	4402      	add	r2, r0
 8009396:	4601      	mov	r1, r0
 8009398:	428a      	cmp	r2, r1
 800939a:	d100      	bne.n	800939e <memmove+0x2a>
 800939c:	bd10      	pop	{r4, pc}
 800939e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093a6:	e7f7      	b.n	8009398 <memmove+0x24>

080093a8 <_sbrk_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d06      	ldr	r5, [pc, #24]	@ (80093c4 <_sbrk_r+0x1c>)
 80093ac:	2300      	movs	r3, #0
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7f9 f96e 	bl	8002694 <_sbrk>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_sbrk_r+0x1a>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_sbrk_r+0x1a>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	20000a48 	.word	0x20000a48

080093c8 <memcpy>:
 80093c8:	440a      	add	r2, r1
 80093ca:	4291      	cmp	r1, r2
 80093cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80093d0:	d100      	bne.n	80093d4 <memcpy+0xc>
 80093d2:	4770      	bx	lr
 80093d4:	b510      	push	{r4, lr}
 80093d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093de:	4291      	cmp	r1, r2
 80093e0:	d1f9      	bne.n	80093d6 <memcpy+0xe>
 80093e2:	bd10      	pop	{r4, pc}

080093e4 <__assert_func>:
 80093e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093e6:	4614      	mov	r4, r2
 80093e8:	461a      	mov	r2, r3
 80093ea:	4b09      	ldr	r3, [pc, #36]	@ (8009410 <__assert_func+0x2c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4605      	mov	r5, r0
 80093f0:	68d8      	ldr	r0, [r3, #12]
 80093f2:	b954      	cbnz	r4, 800940a <__assert_func+0x26>
 80093f4:	4b07      	ldr	r3, [pc, #28]	@ (8009414 <__assert_func+0x30>)
 80093f6:	461c      	mov	r4, r3
 80093f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093fc:	9100      	str	r1, [sp, #0]
 80093fe:	462b      	mov	r3, r5
 8009400:	4905      	ldr	r1, [pc, #20]	@ (8009418 <__assert_func+0x34>)
 8009402:	f000 f86f 	bl	80094e4 <fiprintf>
 8009406:	f000 f87f 	bl	8009508 <abort>
 800940a:	4b04      	ldr	r3, [pc, #16]	@ (800941c <__assert_func+0x38>)
 800940c:	e7f4      	b.n	80093f8 <__assert_func+0x14>
 800940e:	bf00      	nop
 8009410:	20000024 	.word	0x20000024
 8009414:	08009d16 	.word	0x08009d16
 8009418:	08009ce8 	.word	0x08009ce8
 800941c:	08009cdb 	.word	0x08009cdb

08009420 <_calloc_r>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	fba1 5402 	umull	r5, r4, r1, r2
 8009426:	b93c      	cbnz	r4, 8009438 <_calloc_r+0x18>
 8009428:	4629      	mov	r1, r5
 800942a:	f7ff f991 	bl	8008750 <_malloc_r>
 800942e:	4606      	mov	r6, r0
 8009430:	b928      	cbnz	r0, 800943e <_calloc_r+0x1e>
 8009432:	2600      	movs	r6, #0
 8009434:	4630      	mov	r0, r6
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	220c      	movs	r2, #12
 800943a:	6002      	str	r2, [r0, #0]
 800943c:	e7f9      	b.n	8009432 <_calloc_r+0x12>
 800943e:	462a      	mov	r2, r5
 8009440:	4621      	mov	r1, r4
 8009442:	f7fe fa42 	bl	80078ca <memset>
 8009446:	e7f5      	b.n	8009434 <_calloc_r+0x14>

08009448 <__ascii_mbtowc>:
 8009448:	b082      	sub	sp, #8
 800944a:	b901      	cbnz	r1, 800944e <__ascii_mbtowc+0x6>
 800944c:	a901      	add	r1, sp, #4
 800944e:	b142      	cbz	r2, 8009462 <__ascii_mbtowc+0x1a>
 8009450:	b14b      	cbz	r3, 8009466 <__ascii_mbtowc+0x1e>
 8009452:	7813      	ldrb	r3, [r2, #0]
 8009454:	600b      	str	r3, [r1, #0]
 8009456:	7812      	ldrb	r2, [r2, #0]
 8009458:	1e10      	subs	r0, r2, #0
 800945a:	bf18      	it	ne
 800945c:	2001      	movne	r0, #1
 800945e:	b002      	add	sp, #8
 8009460:	4770      	bx	lr
 8009462:	4610      	mov	r0, r2
 8009464:	e7fb      	b.n	800945e <__ascii_mbtowc+0x16>
 8009466:	f06f 0001 	mvn.w	r0, #1
 800946a:	e7f8      	b.n	800945e <__ascii_mbtowc+0x16>

0800946c <_realloc_r>:
 800946c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009470:	4680      	mov	r8, r0
 8009472:	4615      	mov	r5, r2
 8009474:	460c      	mov	r4, r1
 8009476:	b921      	cbnz	r1, 8009482 <_realloc_r+0x16>
 8009478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947c:	4611      	mov	r1, r2
 800947e:	f7ff b967 	b.w	8008750 <_malloc_r>
 8009482:	b92a      	cbnz	r2, 8009490 <_realloc_r+0x24>
 8009484:	f7ff f8f0 	bl	8008668 <_free_r>
 8009488:	2400      	movs	r4, #0
 800948a:	4620      	mov	r0, r4
 800948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009490:	f000 f841 	bl	8009516 <_malloc_usable_size_r>
 8009494:	4285      	cmp	r5, r0
 8009496:	4606      	mov	r6, r0
 8009498:	d802      	bhi.n	80094a0 <_realloc_r+0x34>
 800949a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800949e:	d8f4      	bhi.n	800948a <_realloc_r+0x1e>
 80094a0:	4629      	mov	r1, r5
 80094a2:	4640      	mov	r0, r8
 80094a4:	f7ff f954 	bl	8008750 <_malloc_r>
 80094a8:	4607      	mov	r7, r0
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d0ec      	beq.n	8009488 <_realloc_r+0x1c>
 80094ae:	42b5      	cmp	r5, r6
 80094b0:	462a      	mov	r2, r5
 80094b2:	4621      	mov	r1, r4
 80094b4:	bf28      	it	cs
 80094b6:	4632      	movcs	r2, r6
 80094b8:	f7ff ff86 	bl	80093c8 <memcpy>
 80094bc:	4621      	mov	r1, r4
 80094be:	4640      	mov	r0, r8
 80094c0:	f7ff f8d2 	bl	8008668 <_free_r>
 80094c4:	463c      	mov	r4, r7
 80094c6:	e7e0      	b.n	800948a <_realloc_r+0x1e>

080094c8 <__ascii_wctomb>:
 80094c8:	4603      	mov	r3, r0
 80094ca:	4608      	mov	r0, r1
 80094cc:	b141      	cbz	r1, 80094e0 <__ascii_wctomb+0x18>
 80094ce:	2aff      	cmp	r2, #255	@ 0xff
 80094d0:	d904      	bls.n	80094dc <__ascii_wctomb+0x14>
 80094d2:	228a      	movs	r2, #138	@ 0x8a
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	f04f 30ff 	mov.w	r0, #4294967295
 80094da:	4770      	bx	lr
 80094dc:	700a      	strb	r2, [r1, #0]
 80094de:	2001      	movs	r0, #1
 80094e0:	4770      	bx	lr
	...

080094e4 <fiprintf>:
 80094e4:	b40e      	push	{r1, r2, r3}
 80094e6:	b503      	push	{r0, r1, lr}
 80094e8:	4601      	mov	r1, r0
 80094ea:	ab03      	add	r3, sp, #12
 80094ec:	4805      	ldr	r0, [pc, #20]	@ (8009504 <fiprintf+0x20>)
 80094ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f2:	6800      	ldr	r0, [r0, #0]
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	f000 f83f 	bl	8009578 <_vfiprintf_r>
 80094fa:	b002      	add	sp, #8
 80094fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009500:	b003      	add	sp, #12
 8009502:	4770      	bx	lr
 8009504:	20000024 	.word	0x20000024

08009508 <abort>:
 8009508:	b508      	push	{r3, lr}
 800950a:	2006      	movs	r0, #6
 800950c:	f000 fa08 	bl	8009920 <raise>
 8009510:	2001      	movs	r0, #1
 8009512:	f7f9 f846 	bl	80025a2 <_exit>

08009516 <_malloc_usable_size_r>:
 8009516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800951a:	1f18      	subs	r0, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	bfbc      	itt	lt
 8009520:	580b      	ldrlt	r3, [r1, r0]
 8009522:	18c0      	addlt	r0, r0, r3
 8009524:	4770      	bx	lr

08009526 <__sfputc_r>:
 8009526:	6893      	ldr	r3, [r2, #8]
 8009528:	3b01      	subs	r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	b410      	push	{r4}
 800952e:	6093      	str	r3, [r2, #8]
 8009530:	da08      	bge.n	8009544 <__sfputc_r+0x1e>
 8009532:	6994      	ldr	r4, [r2, #24]
 8009534:	42a3      	cmp	r3, r4
 8009536:	db01      	blt.n	800953c <__sfputc_r+0x16>
 8009538:	290a      	cmp	r1, #10
 800953a:	d103      	bne.n	8009544 <__sfputc_r+0x1e>
 800953c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009540:	f000 b932 	b.w	80097a8 <__swbuf_r>
 8009544:	6813      	ldr	r3, [r2, #0]
 8009546:	1c58      	adds	r0, r3, #1
 8009548:	6010      	str	r0, [r2, #0]
 800954a:	7019      	strb	r1, [r3, #0]
 800954c:	4608      	mov	r0, r1
 800954e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009552:	4770      	bx	lr

08009554 <__sfputs_r>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	4614      	mov	r4, r2
 800955c:	18d5      	adds	r5, r2, r3
 800955e:	42ac      	cmp	r4, r5
 8009560:	d101      	bne.n	8009566 <__sfputs_r+0x12>
 8009562:	2000      	movs	r0, #0
 8009564:	e007      	b.n	8009576 <__sfputs_r+0x22>
 8009566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956a:	463a      	mov	r2, r7
 800956c:	4630      	mov	r0, r6
 800956e:	f7ff ffda 	bl	8009526 <__sfputc_r>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	d1f3      	bne.n	800955e <__sfputs_r+0xa>
 8009576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009578 <_vfiprintf_r>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	460d      	mov	r5, r1
 800957e:	b09d      	sub	sp, #116	@ 0x74
 8009580:	4614      	mov	r4, r2
 8009582:	4698      	mov	r8, r3
 8009584:	4606      	mov	r6, r0
 8009586:	b118      	cbz	r0, 8009590 <_vfiprintf_r+0x18>
 8009588:	6a03      	ldr	r3, [r0, #32]
 800958a:	b90b      	cbnz	r3, 8009590 <_vfiprintf_r+0x18>
 800958c:	f7fe f904 	bl	8007798 <__sinit>
 8009590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009592:	07d9      	lsls	r1, r3, #31
 8009594:	d405      	bmi.n	80095a2 <_vfiprintf_r+0x2a>
 8009596:	89ab      	ldrh	r3, [r5, #12]
 8009598:	059a      	lsls	r2, r3, #22
 800959a:	d402      	bmi.n	80095a2 <_vfiprintf_r+0x2a>
 800959c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800959e:	f7fe fa12 	bl	80079c6 <__retarget_lock_acquire_recursive>
 80095a2:	89ab      	ldrh	r3, [r5, #12]
 80095a4:	071b      	lsls	r3, r3, #28
 80095a6:	d501      	bpl.n	80095ac <_vfiprintf_r+0x34>
 80095a8:	692b      	ldr	r3, [r5, #16]
 80095aa:	b99b      	cbnz	r3, 80095d4 <_vfiprintf_r+0x5c>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 f938 	bl	8009824 <__swsetup_r>
 80095b4:	b170      	cbz	r0, 80095d4 <_vfiprintf_r+0x5c>
 80095b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095b8:	07dc      	lsls	r4, r3, #31
 80095ba:	d504      	bpl.n	80095c6 <_vfiprintf_r+0x4e>
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	b01d      	add	sp, #116	@ 0x74
 80095c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c6:	89ab      	ldrh	r3, [r5, #12]
 80095c8:	0598      	lsls	r0, r3, #22
 80095ca:	d4f7      	bmi.n	80095bc <_vfiprintf_r+0x44>
 80095cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ce:	f7fe f9fb 	bl	80079c8 <__retarget_lock_release_recursive>
 80095d2:	e7f3      	b.n	80095bc <_vfiprintf_r+0x44>
 80095d4:	2300      	movs	r3, #0
 80095d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d8:	2320      	movs	r3, #32
 80095da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095de:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e2:	2330      	movs	r3, #48	@ 0x30
 80095e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009794 <_vfiprintf_r+0x21c>
 80095e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095ec:	f04f 0901 	mov.w	r9, #1
 80095f0:	4623      	mov	r3, r4
 80095f2:	469a      	mov	sl, r3
 80095f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f8:	b10a      	cbz	r2, 80095fe <_vfiprintf_r+0x86>
 80095fa:	2a25      	cmp	r2, #37	@ 0x25
 80095fc:	d1f9      	bne.n	80095f2 <_vfiprintf_r+0x7a>
 80095fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009602:	d00b      	beq.n	800961c <_vfiprintf_r+0xa4>
 8009604:	465b      	mov	r3, fp
 8009606:	4622      	mov	r2, r4
 8009608:	4629      	mov	r1, r5
 800960a:	4630      	mov	r0, r6
 800960c:	f7ff ffa2 	bl	8009554 <__sfputs_r>
 8009610:	3001      	adds	r0, #1
 8009612:	f000 80a7 	beq.w	8009764 <_vfiprintf_r+0x1ec>
 8009616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009618:	445a      	add	r2, fp
 800961a:	9209      	str	r2, [sp, #36]	@ 0x24
 800961c:	f89a 3000 	ldrb.w	r3, [sl]
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 809f 	beq.w	8009764 <_vfiprintf_r+0x1ec>
 8009626:	2300      	movs	r3, #0
 8009628:	f04f 32ff 	mov.w	r2, #4294967295
 800962c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009630:	f10a 0a01 	add.w	sl, sl, #1
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	9307      	str	r3, [sp, #28]
 8009638:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800963c:	931a      	str	r3, [sp, #104]	@ 0x68
 800963e:	4654      	mov	r4, sl
 8009640:	2205      	movs	r2, #5
 8009642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009646:	4853      	ldr	r0, [pc, #332]	@ (8009794 <_vfiprintf_r+0x21c>)
 8009648:	f7f6 fde2 	bl	8000210 <memchr>
 800964c:	9a04      	ldr	r2, [sp, #16]
 800964e:	b9d8      	cbnz	r0, 8009688 <_vfiprintf_r+0x110>
 8009650:	06d1      	lsls	r1, r2, #27
 8009652:	bf44      	itt	mi
 8009654:	2320      	movmi	r3, #32
 8009656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800965a:	0713      	lsls	r3, r2, #28
 800965c:	bf44      	itt	mi
 800965e:	232b      	movmi	r3, #43	@ 0x2b
 8009660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009664:	f89a 3000 	ldrb.w	r3, [sl]
 8009668:	2b2a      	cmp	r3, #42	@ 0x2a
 800966a:	d015      	beq.n	8009698 <_vfiprintf_r+0x120>
 800966c:	9a07      	ldr	r2, [sp, #28]
 800966e:	4654      	mov	r4, sl
 8009670:	2000      	movs	r0, #0
 8009672:	f04f 0c0a 	mov.w	ip, #10
 8009676:	4621      	mov	r1, r4
 8009678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800967c:	3b30      	subs	r3, #48	@ 0x30
 800967e:	2b09      	cmp	r3, #9
 8009680:	d94b      	bls.n	800971a <_vfiprintf_r+0x1a2>
 8009682:	b1b0      	cbz	r0, 80096b2 <_vfiprintf_r+0x13a>
 8009684:	9207      	str	r2, [sp, #28]
 8009686:	e014      	b.n	80096b2 <_vfiprintf_r+0x13a>
 8009688:	eba0 0308 	sub.w	r3, r0, r8
 800968c:	fa09 f303 	lsl.w	r3, r9, r3
 8009690:	4313      	orrs	r3, r2
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	46a2      	mov	sl, r4
 8009696:	e7d2      	b.n	800963e <_vfiprintf_r+0xc6>
 8009698:	9b03      	ldr	r3, [sp, #12]
 800969a:	1d19      	adds	r1, r3, #4
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	9103      	str	r1, [sp, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bfbb      	ittet	lt
 80096a4:	425b      	neglt	r3, r3
 80096a6:	f042 0202 	orrlt.w	r2, r2, #2
 80096aa:	9307      	strge	r3, [sp, #28]
 80096ac:	9307      	strlt	r3, [sp, #28]
 80096ae:	bfb8      	it	lt
 80096b0:	9204      	strlt	r2, [sp, #16]
 80096b2:	7823      	ldrb	r3, [r4, #0]
 80096b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80096b6:	d10a      	bne.n	80096ce <_vfiprintf_r+0x156>
 80096b8:	7863      	ldrb	r3, [r4, #1]
 80096ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80096bc:	d132      	bne.n	8009724 <_vfiprintf_r+0x1ac>
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	1d1a      	adds	r2, r3, #4
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	9203      	str	r2, [sp, #12]
 80096c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096ca:	3402      	adds	r4, #2
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097a4 <_vfiprintf_r+0x22c>
 80096d2:	7821      	ldrb	r1, [r4, #0]
 80096d4:	2203      	movs	r2, #3
 80096d6:	4650      	mov	r0, sl
 80096d8:	f7f6 fd9a 	bl	8000210 <memchr>
 80096dc:	b138      	cbz	r0, 80096ee <_vfiprintf_r+0x176>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	eba0 000a 	sub.w	r0, r0, sl
 80096e4:	2240      	movs	r2, #64	@ 0x40
 80096e6:	4082      	lsls	r2, r0
 80096e8:	4313      	orrs	r3, r2
 80096ea:	3401      	adds	r4, #1
 80096ec:	9304      	str	r3, [sp, #16]
 80096ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f2:	4829      	ldr	r0, [pc, #164]	@ (8009798 <_vfiprintf_r+0x220>)
 80096f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096f8:	2206      	movs	r2, #6
 80096fa:	f7f6 fd89 	bl	8000210 <memchr>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d03f      	beq.n	8009782 <_vfiprintf_r+0x20a>
 8009702:	4b26      	ldr	r3, [pc, #152]	@ (800979c <_vfiprintf_r+0x224>)
 8009704:	bb1b      	cbnz	r3, 800974e <_vfiprintf_r+0x1d6>
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	3307      	adds	r3, #7
 800970a:	f023 0307 	bic.w	r3, r3, #7
 800970e:	3308      	adds	r3, #8
 8009710:	9303      	str	r3, [sp, #12]
 8009712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009714:	443b      	add	r3, r7
 8009716:	9309      	str	r3, [sp, #36]	@ 0x24
 8009718:	e76a      	b.n	80095f0 <_vfiprintf_r+0x78>
 800971a:	fb0c 3202 	mla	r2, ip, r2, r3
 800971e:	460c      	mov	r4, r1
 8009720:	2001      	movs	r0, #1
 8009722:	e7a8      	b.n	8009676 <_vfiprintf_r+0xfe>
 8009724:	2300      	movs	r3, #0
 8009726:	3401      	adds	r4, #1
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	4619      	mov	r1, r3
 800972c:	f04f 0c0a 	mov.w	ip, #10
 8009730:	4620      	mov	r0, r4
 8009732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009736:	3a30      	subs	r2, #48	@ 0x30
 8009738:	2a09      	cmp	r2, #9
 800973a:	d903      	bls.n	8009744 <_vfiprintf_r+0x1cc>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0c6      	beq.n	80096ce <_vfiprintf_r+0x156>
 8009740:	9105      	str	r1, [sp, #20]
 8009742:	e7c4      	b.n	80096ce <_vfiprintf_r+0x156>
 8009744:	fb0c 2101 	mla	r1, ip, r1, r2
 8009748:	4604      	mov	r4, r0
 800974a:	2301      	movs	r3, #1
 800974c:	e7f0      	b.n	8009730 <_vfiprintf_r+0x1b8>
 800974e:	ab03      	add	r3, sp, #12
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	462a      	mov	r2, r5
 8009754:	4b12      	ldr	r3, [pc, #72]	@ (80097a0 <_vfiprintf_r+0x228>)
 8009756:	a904      	add	r1, sp, #16
 8009758:	4630      	mov	r0, r6
 800975a:	f7fd fbd9 	bl	8006f10 <_printf_float>
 800975e:	4607      	mov	r7, r0
 8009760:	1c78      	adds	r0, r7, #1
 8009762:	d1d6      	bne.n	8009712 <_vfiprintf_r+0x19a>
 8009764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009766:	07d9      	lsls	r1, r3, #31
 8009768:	d405      	bmi.n	8009776 <_vfiprintf_r+0x1fe>
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	059a      	lsls	r2, r3, #22
 800976e:	d402      	bmi.n	8009776 <_vfiprintf_r+0x1fe>
 8009770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009772:	f7fe f929 	bl	80079c8 <__retarget_lock_release_recursive>
 8009776:	89ab      	ldrh	r3, [r5, #12]
 8009778:	065b      	lsls	r3, r3, #25
 800977a:	f53f af1f 	bmi.w	80095bc <_vfiprintf_r+0x44>
 800977e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009780:	e71e      	b.n	80095c0 <_vfiprintf_r+0x48>
 8009782:	ab03      	add	r3, sp, #12
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	462a      	mov	r2, r5
 8009788:	4b05      	ldr	r3, [pc, #20]	@ (80097a0 <_vfiprintf_r+0x228>)
 800978a:	a904      	add	r1, sp, #16
 800978c:	4630      	mov	r0, r6
 800978e:	f7fd fe57 	bl	8007440 <_printf_i>
 8009792:	e7e4      	b.n	800975e <_vfiprintf_r+0x1e6>
 8009794:	08009cc0 	.word	0x08009cc0
 8009798:	08009cca 	.word	0x08009cca
 800979c:	08006f11 	.word	0x08006f11
 80097a0:	08009555 	.word	0x08009555
 80097a4:	08009cc6 	.word	0x08009cc6

080097a8 <__swbuf_r>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	460e      	mov	r6, r1
 80097ac:	4614      	mov	r4, r2
 80097ae:	4605      	mov	r5, r0
 80097b0:	b118      	cbz	r0, 80097ba <__swbuf_r+0x12>
 80097b2:	6a03      	ldr	r3, [r0, #32]
 80097b4:	b90b      	cbnz	r3, 80097ba <__swbuf_r+0x12>
 80097b6:	f7fd ffef 	bl	8007798 <__sinit>
 80097ba:	69a3      	ldr	r3, [r4, #24]
 80097bc:	60a3      	str	r3, [r4, #8]
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	071a      	lsls	r2, r3, #28
 80097c2:	d501      	bpl.n	80097c8 <__swbuf_r+0x20>
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	b943      	cbnz	r3, 80097da <__swbuf_r+0x32>
 80097c8:	4621      	mov	r1, r4
 80097ca:	4628      	mov	r0, r5
 80097cc:	f000 f82a 	bl	8009824 <__swsetup_r>
 80097d0:	b118      	cbz	r0, 80097da <__swbuf_r+0x32>
 80097d2:	f04f 37ff 	mov.w	r7, #4294967295
 80097d6:	4638      	mov	r0, r7
 80097d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	6922      	ldr	r2, [r4, #16]
 80097de:	1a98      	subs	r0, r3, r2
 80097e0:	6963      	ldr	r3, [r4, #20]
 80097e2:	b2f6      	uxtb	r6, r6
 80097e4:	4283      	cmp	r3, r0
 80097e6:	4637      	mov	r7, r6
 80097e8:	dc05      	bgt.n	80097f6 <__swbuf_r+0x4e>
 80097ea:	4621      	mov	r1, r4
 80097ec:	4628      	mov	r0, r5
 80097ee:	f7ff fd99 	bl	8009324 <_fflush_r>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d1ed      	bne.n	80097d2 <__swbuf_r+0x2a>
 80097f6:	68a3      	ldr	r3, [r4, #8]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	60a3      	str	r3, [r4, #8]
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	1c5a      	adds	r2, r3, #1
 8009800:	6022      	str	r2, [r4, #0]
 8009802:	701e      	strb	r6, [r3, #0]
 8009804:	6962      	ldr	r2, [r4, #20]
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	429a      	cmp	r2, r3
 800980a:	d004      	beq.n	8009816 <__swbuf_r+0x6e>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	07db      	lsls	r3, r3, #31
 8009810:	d5e1      	bpl.n	80097d6 <__swbuf_r+0x2e>
 8009812:	2e0a      	cmp	r6, #10
 8009814:	d1df      	bne.n	80097d6 <__swbuf_r+0x2e>
 8009816:	4621      	mov	r1, r4
 8009818:	4628      	mov	r0, r5
 800981a:	f7ff fd83 	bl	8009324 <_fflush_r>
 800981e:	2800      	cmp	r0, #0
 8009820:	d0d9      	beq.n	80097d6 <__swbuf_r+0x2e>
 8009822:	e7d6      	b.n	80097d2 <__swbuf_r+0x2a>

08009824 <__swsetup_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4b29      	ldr	r3, [pc, #164]	@ (80098cc <__swsetup_r+0xa8>)
 8009828:	4605      	mov	r5, r0
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	460c      	mov	r4, r1
 800982e:	b118      	cbz	r0, 8009838 <__swsetup_r+0x14>
 8009830:	6a03      	ldr	r3, [r0, #32]
 8009832:	b90b      	cbnz	r3, 8009838 <__swsetup_r+0x14>
 8009834:	f7fd ffb0 	bl	8007798 <__sinit>
 8009838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800983c:	0719      	lsls	r1, r3, #28
 800983e:	d422      	bmi.n	8009886 <__swsetup_r+0x62>
 8009840:	06da      	lsls	r2, r3, #27
 8009842:	d407      	bmi.n	8009854 <__swsetup_r+0x30>
 8009844:	2209      	movs	r2, #9
 8009846:	602a      	str	r2, [r5, #0]
 8009848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	f04f 30ff 	mov.w	r0, #4294967295
 8009852:	e033      	b.n	80098bc <__swsetup_r+0x98>
 8009854:	0758      	lsls	r0, r3, #29
 8009856:	d512      	bpl.n	800987e <__swsetup_r+0x5a>
 8009858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800985a:	b141      	cbz	r1, 800986e <__swsetup_r+0x4a>
 800985c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009860:	4299      	cmp	r1, r3
 8009862:	d002      	beq.n	800986a <__swsetup_r+0x46>
 8009864:	4628      	mov	r0, r5
 8009866:	f7fe feff 	bl	8008668 <_free_r>
 800986a:	2300      	movs	r3, #0
 800986c:	6363      	str	r3, [r4, #52]	@ 0x34
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	2300      	movs	r3, #0
 8009878:	6063      	str	r3, [r4, #4]
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f043 0308 	orr.w	r3, r3, #8
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	b94b      	cbnz	r3, 800989e <__swsetup_r+0x7a>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009894:	d003      	beq.n	800989e <__swsetup_r+0x7a>
 8009896:	4621      	mov	r1, r4
 8009898:	4628      	mov	r0, r5
 800989a:	f000 f883 	bl	80099a4 <__smakebuf_r>
 800989e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a2:	f013 0201 	ands.w	r2, r3, #1
 80098a6:	d00a      	beq.n	80098be <__swsetup_r+0x9a>
 80098a8:	2200      	movs	r2, #0
 80098aa:	60a2      	str	r2, [r4, #8]
 80098ac:	6962      	ldr	r2, [r4, #20]
 80098ae:	4252      	negs	r2, r2
 80098b0:	61a2      	str	r2, [r4, #24]
 80098b2:	6922      	ldr	r2, [r4, #16]
 80098b4:	b942      	cbnz	r2, 80098c8 <__swsetup_r+0xa4>
 80098b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098ba:	d1c5      	bne.n	8009848 <__swsetup_r+0x24>
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	0799      	lsls	r1, r3, #30
 80098c0:	bf58      	it	pl
 80098c2:	6962      	ldrpl	r2, [r4, #20]
 80098c4:	60a2      	str	r2, [r4, #8]
 80098c6:	e7f4      	b.n	80098b2 <__swsetup_r+0x8e>
 80098c8:	2000      	movs	r0, #0
 80098ca:	e7f7      	b.n	80098bc <__swsetup_r+0x98>
 80098cc:	20000024 	.word	0x20000024

080098d0 <_raise_r>:
 80098d0:	291f      	cmp	r1, #31
 80098d2:	b538      	push	{r3, r4, r5, lr}
 80098d4:	4605      	mov	r5, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	d904      	bls.n	80098e4 <_raise_r+0x14>
 80098da:	2316      	movs	r3, #22
 80098dc:	6003      	str	r3, [r0, #0]
 80098de:	f04f 30ff 	mov.w	r0, #4294967295
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098e6:	b112      	cbz	r2, 80098ee <_raise_r+0x1e>
 80098e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098ec:	b94b      	cbnz	r3, 8009902 <_raise_r+0x32>
 80098ee:	4628      	mov	r0, r5
 80098f0:	f000 f830 	bl	8009954 <_getpid_r>
 80098f4:	4622      	mov	r2, r4
 80098f6:	4601      	mov	r1, r0
 80098f8:	4628      	mov	r0, r5
 80098fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098fe:	f000 b817 	b.w	8009930 <_kill_r>
 8009902:	2b01      	cmp	r3, #1
 8009904:	d00a      	beq.n	800991c <_raise_r+0x4c>
 8009906:	1c59      	adds	r1, r3, #1
 8009908:	d103      	bne.n	8009912 <_raise_r+0x42>
 800990a:	2316      	movs	r3, #22
 800990c:	6003      	str	r3, [r0, #0]
 800990e:	2001      	movs	r0, #1
 8009910:	e7e7      	b.n	80098e2 <_raise_r+0x12>
 8009912:	2100      	movs	r1, #0
 8009914:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009918:	4620      	mov	r0, r4
 800991a:	4798      	blx	r3
 800991c:	2000      	movs	r0, #0
 800991e:	e7e0      	b.n	80098e2 <_raise_r+0x12>

08009920 <raise>:
 8009920:	4b02      	ldr	r3, [pc, #8]	@ (800992c <raise+0xc>)
 8009922:	4601      	mov	r1, r0
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	f7ff bfd3 	b.w	80098d0 <_raise_r>
 800992a:	bf00      	nop
 800992c:	20000024 	.word	0x20000024

08009930 <_kill_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4d07      	ldr	r5, [pc, #28]	@ (8009950 <_kill_r+0x20>)
 8009934:	2300      	movs	r3, #0
 8009936:	4604      	mov	r4, r0
 8009938:	4608      	mov	r0, r1
 800993a:	4611      	mov	r1, r2
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	f7f8 fe20 	bl	8002582 <_kill>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	d102      	bne.n	800994c <_kill_r+0x1c>
 8009946:	682b      	ldr	r3, [r5, #0]
 8009948:	b103      	cbz	r3, 800994c <_kill_r+0x1c>
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	bd38      	pop	{r3, r4, r5, pc}
 800994e:	bf00      	nop
 8009950:	20000a48 	.word	0x20000a48

08009954 <_getpid_r>:
 8009954:	f7f8 be0d 	b.w	8002572 <_getpid>

08009958 <__swhatbuf_r>:
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	460c      	mov	r4, r1
 800995c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009960:	2900      	cmp	r1, #0
 8009962:	b096      	sub	sp, #88	@ 0x58
 8009964:	4615      	mov	r5, r2
 8009966:	461e      	mov	r6, r3
 8009968:	da0d      	bge.n	8009986 <__swhatbuf_r+0x2e>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009970:	f04f 0100 	mov.w	r1, #0
 8009974:	bf14      	ite	ne
 8009976:	2340      	movne	r3, #64	@ 0x40
 8009978:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800997c:	2000      	movs	r0, #0
 800997e:	6031      	str	r1, [r6, #0]
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	b016      	add	sp, #88	@ 0x58
 8009984:	bd70      	pop	{r4, r5, r6, pc}
 8009986:	466a      	mov	r2, sp
 8009988:	f000 f848 	bl	8009a1c <_fstat_r>
 800998c:	2800      	cmp	r0, #0
 800998e:	dbec      	blt.n	800996a <__swhatbuf_r+0x12>
 8009990:	9901      	ldr	r1, [sp, #4]
 8009992:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009996:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800999a:	4259      	negs	r1, r3
 800999c:	4159      	adcs	r1, r3
 800999e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099a2:	e7eb      	b.n	800997c <__swhatbuf_r+0x24>

080099a4 <__smakebuf_r>:
 80099a4:	898b      	ldrh	r3, [r1, #12]
 80099a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099a8:	079d      	lsls	r5, r3, #30
 80099aa:	4606      	mov	r6, r0
 80099ac:	460c      	mov	r4, r1
 80099ae:	d507      	bpl.n	80099c0 <__smakebuf_r+0x1c>
 80099b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	6123      	str	r3, [r4, #16]
 80099b8:	2301      	movs	r3, #1
 80099ba:	6163      	str	r3, [r4, #20]
 80099bc:	b003      	add	sp, #12
 80099be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099c0:	ab01      	add	r3, sp, #4
 80099c2:	466a      	mov	r2, sp
 80099c4:	f7ff ffc8 	bl	8009958 <__swhatbuf_r>
 80099c8:	9f00      	ldr	r7, [sp, #0]
 80099ca:	4605      	mov	r5, r0
 80099cc:	4639      	mov	r1, r7
 80099ce:	4630      	mov	r0, r6
 80099d0:	f7fe febe 	bl	8008750 <_malloc_r>
 80099d4:	b948      	cbnz	r0, 80099ea <__smakebuf_r+0x46>
 80099d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099da:	059a      	lsls	r2, r3, #22
 80099dc:	d4ee      	bmi.n	80099bc <__smakebuf_r+0x18>
 80099de:	f023 0303 	bic.w	r3, r3, #3
 80099e2:	f043 0302 	orr.w	r3, r3, #2
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	e7e2      	b.n	80099b0 <__smakebuf_r+0xc>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	6020      	str	r0, [r4, #0]
 80099ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	9b01      	ldr	r3, [sp, #4]
 80099f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099fa:	b15b      	cbz	r3, 8009a14 <__smakebuf_r+0x70>
 80099fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a00:	4630      	mov	r0, r6
 8009a02:	f000 f81d 	bl	8009a40 <_isatty_r>
 8009a06:	b128      	cbz	r0, 8009a14 <__smakebuf_r+0x70>
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f023 0303 	bic.w	r3, r3, #3
 8009a0e:	f043 0301 	orr.w	r3, r3, #1
 8009a12:	81a3      	strh	r3, [r4, #12]
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	431d      	orrs	r5, r3
 8009a18:	81a5      	strh	r5, [r4, #12]
 8009a1a:	e7cf      	b.n	80099bc <__smakebuf_r+0x18>

08009a1c <_fstat_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d07      	ldr	r5, [pc, #28]	@ (8009a3c <_fstat_r+0x20>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	4611      	mov	r1, r2
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	f7f8 fe0a 	bl	8002642 <_fstat>
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	d102      	bne.n	8009a38 <_fstat_r+0x1c>
 8009a32:	682b      	ldr	r3, [r5, #0]
 8009a34:	b103      	cbz	r3, 8009a38 <_fstat_r+0x1c>
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	bd38      	pop	{r3, r4, r5, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000a48 	.word	0x20000a48

08009a40 <_isatty_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4d06      	ldr	r5, [pc, #24]	@ (8009a5c <_isatty_r+0x1c>)
 8009a44:	2300      	movs	r3, #0
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	f7f8 fe09 	bl	8002662 <_isatty>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_isatty_r+0x1a>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_isatty_r+0x1a>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	20000a48 	.word	0x20000a48

08009a60 <_init>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	bf00      	nop
 8009a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a66:	bc08      	pop	{r3}
 8009a68:	469e      	mov	lr, r3
 8009a6a:	4770      	bx	lr

08009a6c <_fini>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr

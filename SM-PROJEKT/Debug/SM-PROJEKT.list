
SM-PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08009c48  08009c48  0000ac48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ff8  08009ff8  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009ff8  08009ff8  0000aff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a000  0800a000  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a000  0800a000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a004  0800a004  0000b004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a008  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  200001e0  0800a1e8  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  0800a1e8  0000ca5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001619e  00000000  00000000  0000c20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d92  00000000  00000000  000223ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00025140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f00  00000000  00000000  000264a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287b7  00000000  00000000  000273a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d4f  00000000  00000000  0004fb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f886a  00000000  00000000  000678a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00160110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006434  00000000  00000000  001601c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001665fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  00166662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c30 	.word	0x08009c30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009c30 	.word	0x08009c30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000f86:	7b3b      	ldrb	r3, [r7, #12]
 8000f88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2110      	movs	r1, #16
 8000f94:	480b      	ldr	r0, [pc, #44]	@ (8000fc4 <BMP280_Read8+0x4c>)
 8000f96:	f001 ff49 	bl	8002e2c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <BMP280_Read8+0x50>)
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	f107 010c 	add.w	r1, r7, #12
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2302      	movs	r3, #2
 8000fac:	f003 fa07 	bl	80043be <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <BMP280_Read8+0x4c>)
 8000fb6:	f001 ff39 	bl	8002e2c <HAL_GPIO_WritePin>
	return tmp[1];
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	200001fc 	.word	0x200001fc

08000fcc <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000fda:	7b3b      	ldrb	r3, [r7, #12]
 8000fdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	480f      	ldr	r0, [pc, #60]	@ (8001028 <BMP280_Read16+0x5c>)
 8000fea:	f001 ff1f 	bl	8002e2c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <BMP280_Read16+0x60>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	f107 020c 	add.w	r2, r7, #12
 8000ff6:	f107 010c 	add.w	r1, r7, #12
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2303      	movs	r3, #3
 8001000:	f003 f9dd 	bl	80043be <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2110      	movs	r1, #16
 8001008:	4807      	ldr	r0, [pc, #28]	@ (8001028 <BMP280_Read16+0x5c>)
 800100a:	f001 ff0f 	bl	8002e2c <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	b21b      	sxth	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b21b      	sxth	r3, r3
 800101c:	b29b      	uxth	r3, r3
#endif
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020000 	.word	0x40020000
 800102c:	200001fc 	.word	0x200001fc

08001030 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffc5 	bl	8000fcc <BMP280_Read16>
 8001042:	4603      	mov	r3, r0
 8001044:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b21a      	sxth	r2, r3
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21b      	sxth	r3, r3
 8001058:	b29b      	uxth	r3, r3
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800107e:	b2db      	uxtb	r3, r3
 8001080:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2110      	movs	r1, #16
 800108a:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <BMP280_Write8+0x54>)
 800108c:	f001 fece 	bl	8002e2c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <BMP280_Write8+0x58>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	f107 010c 	add.w	r1, r7, #12
 800109c:	230a      	movs	r3, #10
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2302      	movs	r3, #2
 80010a2:	f003 f98c 	bl	80043be <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2110      	movs	r1, #16
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <BMP280_Write8+0x54>)
 80010ac:	f001 febe 	bl	8002e2c <HAL_GPIO_WritePin>
#endif
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020000 	.word	0x40020000
 80010bc:	200001fc 	.word	0x200001fc

080010c0 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010ce:	7b3b      	ldrb	r3, [r7, #12]
 80010d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2110      	movs	r1, #16
 80010dc:	480e      	ldr	r0, [pc, #56]	@ (8001118 <BMP280_Read24+0x58>)
 80010de:	f001 fea5 	bl	8002e2c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <BMP280_Read24+0x5c>)
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	f107 010c 	add.w	r1, r7, #12
 80010ee:	230a      	movs	r3, #10
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2303      	movs	r3, #3
 80010f4:	f003 f963 	bl	80043be <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	4806      	ldr	r0, [pc, #24]	@ (8001118 <BMP280_Read24+0x58>)
 80010fe:	f001 fe95 	bl	8002e2c <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	041a      	lsls	r2, r3, #16
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	4313      	orrs	r3, r2
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	4313      	orrs	r3, r2
#endif
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40020000 	.word	0x40020000
 800111c:	200001fc 	.word	0x200001fc

08001120 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4603      	mov	r3, r0
 8001130:	70fb      	strb	r3, [r7, #3]
 8001132:	460b      	mov	r3, r1
 8001134:	70bb      	strb	r3, [r7, #2]
 8001136:	4613      	mov	r3, r2
 8001138:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 800113a:	4a4e      	ldr	r2, [pc, #312]	@ (8001274 <BMP280_Init+0x154>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2110      	movs	r1, #16
 8001144:	484c      	ldr	r0, [pc, #304]	@ (8001278 <BMP280_Init+0x158>)
 8001146:	f001 fe71 	bl	8002e2c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800114a:	2005      	movs	r0, #5
 800114c:	f001 fbb8 	bl	80028c0 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2110      	movs	r1, #16
 8001154:	4848      	ldr	r0, [pc, #288]	@ (8001278 <BMP280_Init+0x158>)
 8001156:	f001 fe69 	bl	8002e2c <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 800115a:	787b      	ldrb	r3, [r7, #1]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d901      	bls.n	8001164 <BMP280_Init+0x44>
	    mode = BMP280_NORMALMODE;
 8001160:	2303      	movs	r3, #3
 8001162:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001164:	4a45      	ldr	r2, [pc, #276]	@ (800127c <BMP280_Init+0x15c>)
 8001166:	787b      	ldrb	r3, [r7, #1]
 8001168:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800116a:	787b      	ldrb	r3, [r7, #1]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <BMP280_Init+0x54>
		mode = BMP280_SLEEPMODE;
 8001170:	2300      	movs	r3, #0
 8001172:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2b05      	cmp	r3, #5
 8001178:	d901      	bls.n	800117e <BMP280_Init+0x5e>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800117a:	2305      	movs	r3, #5
 800117c:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800117e:	4a40      	ldr	r2, [pc, #256]	@ (8001280 <BMP280_Init+0x160>)
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001184:	78bb      	ldrb	r3, [r7, #2]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d901      	bls.n	800118e <BMP280_Init+0x6e>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 800118a:	2305      	movs	r3, #5
 800118c:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 800118e:	4a3d      	ldr	r2, [pc, #244]	@ (8001284 <BMP280_Init+0x164>)
 8001190:	78bb      	ldrb	r3, [r7, #2]
 8001192:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001194:	bf00      	nop
 8001196:	20d0      	movs	r0, #208	@ 0xd0
 8001198:	f7ff feee 	bl	8000f78 <BMP280_Read8>
 800119c:	4603      	mov	r3, r0
 800119e:	2b58      	cmp	r3, #88	@ 0x58
 80011a0:	d1f9      	bne.n	8001196 <BMP280_Init+0x76>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011a2:	2088      	movs	r0, #136	@ 0x88
 80011a4:	f7ff ff44 	bl	8001030 <BMP280_Read16LE>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <BMP280_Init+0x168>)
 80011ae:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011b0:	208a      	movs	r0, #138	@ 0x8a
 80011b2:	f7ff ff3d 	bl	8001030 <BMP280_Read16LE>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <BMP280_Init+0x16c>)
 80011bc:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011be:	208c      	movs	r0, #140	@ 0x8c
 80011c0:	f7ff ff36 	bl	8001030 <BMP280_Read16LE>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <BMP280_Init+0x170>)
 80011ca:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011cc:	208e      	movs	r0, #142	@ 0x8e
 80011ce:	f7ff ff2f 	bl	8001030 <BMP280_Read16LE>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <BMP280_Init+0x174>)
 80011d8:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011da:	2090      	movs	r0, #144	@ 0x90
 80011dc:	f7ff ff28 	bl	8001030 <BMP280_Read16LE>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <BMP280_Init+0x178>)
 80011e6:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80011e8:	2092      	movs	r0, #146	@ 0x92
 80011ea:	f7ff ff21 	bl	8001030 <BMP280_Read16LE>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <BMP280_Init+0x17c>)
 80011f4:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80011f6:	2094      	movs	r0, #148	@ 0x94
 80011f8:	f7ff ff1a 	bl	8001030 <BMP280_Read16LE>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b21a      	sxth	r2, r3
 8001200:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <BMP280_Init+0x180>)
 8001202:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001204:	2096      	movs	r0, #150	@ 0x96
 8001206:	f7ff ff13 	bl	8001030 <BMP280_Read16LE>
 800120a:	4603      	mov	r3, r0
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <BMP280_Init+0x184>)
 8001210:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001212:	2098      	movs	r0, #152	@ 0x98
 8001214:	f7ff ff0c 	bl	8001030 <BMP280_Read16LE>
 8001218:	4603      	mov	r3, r0
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <BMP280_Init+0x188>)
 800121e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001220:	209a      	movs	r0, #154	@ 0x9a
 8001222:	f7ff ff05 	bl	8001030 <BMP280_Read16LE>
 8001226:	4603      	mov	r3, r0
 8001228:	b21a      	sxth	r2, r3
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <BMP280_Init+0x18c>)
 800122c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800122e:	209c      	movs	r0, #156	@ 0x9c
 8001230:	f7ff fefe 	bl	8001030 <BMP280_Read16LE>
 8001234:	4603      	mov	r3, r0
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <BMP280_Init+0x190>)
 800123a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800123c:	209e      	movs	r0, #158	@ 0x9e
 800123e:	f7ff fef7 	bl	8001030 <BMP280_Read16LE>
 8001242:	4603      	mov	r3, r0
 8001244:	b21a      	sxth	r2, r3
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <BMP280_Init+0x194>)
 8001248:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	015b      	lsls	r3, r3, #5
 800124e:	b25a      	sxtb	r2, r3
 8001250:	78bb      	ldrb	r3, [r7, #2]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	b25b      	sxtb	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b25a      	sxtb	r2, r3
 800125a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800125e:	4313      	orrs	r3, r2
 8001260:	b25b      	sxtb	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4619      	mov	r1, r3
 8001266:	20f4      	movs	r0, #244	@ 0xf4
 8001268:	f7ff fefc 	bl	8001064 <BMP280_Write8>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200001fc 	.word	0x200001fc
 8001278:	40020000 	.word	0x40020000
 800127c:	20000202 	.word	0x20000202
 8001280:	20000200 	.word	0x20000200
 8001284:	20000201 	.word	0x20000201
 8001288:	20000218 	.word	0x20000218
 800128c:	20000204 	.word	0x20000204
 8001290:	20000206 	.word	0x20000206
 8001294:	2000021a 	.word	0x2000021a
 8001298:	20000208 	.word	0x20000208
 800129c:	2000020a 	.word	0x2000020a
 80012a0:	2000020c 	.word	0x2000020c
 80012a4:	2000020e 	.word	0x2000020e
 80012a8:	20000210 	.word	0x20000210
 80012ac:	20000212 	.word	0x20000212
 80012b0:	20000214 	.word	0x20000214
 80012b4:	20000216 	.word	0x20000216

080012b8 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012be:	4b3d      	ldr	r3, [pc, #244]	@ (80013b4 <BMP280_ReadTemperature+0xfc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d16d      	bne.n	80013a2 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012c6:	20f4      	movs	r0, #244	@ 0xf4
 80012c8:	f7ff fe56 	bl	8000f78 <BMP280_Read8>
 80012cc:	4603      	mov	r3, r0
 80012ce:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	f023 0303 	bic.w	r3, r3, #3
 80012d6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	4619      	mov	r1, r3
 80012e4:	20f4      	movs	r0, #244	@ 0xf4
 80012e6:	f7ff febd 	bl	8001064 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80012ea:	20f4      	movs	r0, #244	@ 0xf4
 80012ec:	f7ff fe44 	bl	8000f78 <BMP280_Read8>
 80012f0:	4603      	mov	r3, r0
 80012f2:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80012f4:	7dbb      	ldrb	r3, [r7, #22]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d14f      	bne.n	80013a2 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001302:	20f4      	movs	r0, #244	@ 0xf4
 8001304:	f7ff fe38 	bl	8000f78 <BMP280_Read8>
 8001308:	4603      	mov	r3, r0
 800130a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d000      	beq.n	800131c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800131a:	e7f2      	b.n	8001302 <BMP280_ReadTemperature+0x4a>
				  break;
 800131c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800131e:	20fa      	movs	r0, #250	@ 0xfa
 8001320:	f7ff fece 	bl	80010c0 <BMP280_Read24>
 8001324:	4603      	mov	r3, r0
 8001326:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	111b      	asrs	r3, r3, #4
 800132c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	10da      	asrs	r2, r3, #3
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <BMP280_ReadTemperature+0x100>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800133a:	4a20      	ldr	r2, [pc, #128]	@ (80013bc <BMP280_ReadTemperature+0x104>)
 800133c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	12db      	asrs	r3, r3, #11
 8001346:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	111b      	asrs	r3, r3, #4
 800134c:	4a1a      	ldr	r2, [pc, #104]	@ (80013b8 <BMP280_ReadTemperature+0x100>)
 800134e:	8812      	ldrh	r2, [r2, #0]
 8001350:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	1112      	asrs	r2, r2, #4
 8001356:	4918      	ldr	r1, [pc, #96]	@ (80013b8 <BMP280_ReadTemperature+0x100>)
 8001358:	8809      	ldrh	r1, [r1, #0]
 800135a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800135c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001360:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001362:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <BMP280_ReadTemperature+0x108>)
 8001364:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001368:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800136c:	139b      	asrs	r3, r3, #14
 800136e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4413      	add	r3, r2
 8001376:	4a13      	ldr	r2, [pc, #76]	@ (80013c4 <BMP280_ReadTemperature+0x10c>)
 8001378:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <BMP280_ReadTemperature+0x10c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3380      	adds	r3, #128	@ 0x80
 8001386:	121b      	asrs	r3, r3, #8
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001390:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001394:	edd7 7a01 	vldr	s15, [r7, #4]
 8001398:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80013c8 <BMP280_ReadTemperature+0x110>
 800139c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013a0:	e001      	b.n	80013a6 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013a2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80013cc <BMP280_ReadTemperature+0x114>
}
 80013a6:	eef0 7a47 	vmov.f32	s15, s14
 80013aa:	eeb0 0a67 	vmov.f32	s0, s15
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000202 	.word	0x20000202
 80013b8:	20000218 	.word	0x20000218
 80013bc:	20000204 	.word	0x20000204
 80013c0:	20000206 	.word	0x20000206
 80013c4:	2000021c 	.word	0x2000021c
 80013c8:	42c80000 	.word	0x42c80000
 80013cc:	c2c60000 	.word	0xc2c60000

080013d0 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d4:	b0cc      	sub	sp, #304	@ 0x130
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 80013dc:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80013e0:	f7ff ff6a 	bl	80012b8 <BMP280_ReadTemperature>
 80013e4:	eef0 7a40 	vmov.f32	s15, s0
 80013e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013ec:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80013f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 80016c8 <BMP280_ReadTemperatureAndPressure+0x2f8>
 80013fc:	eef4 7a47 	vcmp.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d101      	bne.n	800140a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001406:	23ff      	movs	r3, #255	@ 0xff
 8001408:	e2bf      	b.n	800198a <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800140a:	20f7      	movs	r0, #247	@ 0xf7
 800140c:	f7ff fe58 	bl	80010c0 <BMP280_Read24>
 8001410:	4603      	mov	r3, r0
 8001412:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 8001416:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800141a:	111b      	asrs	r3, r3, #4
 800141c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001420:	4baa      	ldr	r3, [pc, #680]	@ (80016cc <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	17da      	asrs	r2, r3, #31
 8001426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800142a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800142e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001432:	460b      	mov	r3, r1
 8001434:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800143a:	4613      	mov	r3, r2
 800143c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001442:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001446:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800144a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800144e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001452:	fb03 f102 	mul.w	r1, r3, r2
 8001456:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800145a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	18ca      	adds	r2, r1, r3
 8001464:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001468:	fba3 4503 	umull	r4, r5, r3, r3
 800146c:	1953      	adds	r3, r2, r5
 800146e:	461d      	mov	r5, r3
 8001470:	4b97      	ldr	r3, [pc, #604]	@ (80016d0 <BMP280_ReadTemperatureAndPressure+0x300>)
 8001472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001476:	b21b      	sxth	r3, r3
 8001478:	17da      	asrs	r2, r3, #31
 800147a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800147e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001482:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001486:	4603      	mov	r3, r0
 8001488:	fb03 f205 	mul.w	r2, r3, r5
 800148c:	460b      	mov	r3, r1
 800148e:	fb04 f303 	mul.w	r3, r4, r3
 8001492:	4413      	add	r3, r2
 8001494:	4602      	mov	r2, r0
 8001496:	fba4 8902 	umull	r8, r9, r4, r2
 800149a:	444b      	add	r3, r9
 800149c:	4699      	mov	r9, r3
 800149e:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 80014a2:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014a6:	4b8b      	ldr	r3, [pc, #556]	@ (80016d4 <BMP280_ReadTemperatureAndPressure+0x304>)
 80014a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	17da      	asrs	r2, r3, #31
 80014b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014bc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80014c0:	462a      	mov	r2, r5
 80014c2:	fb02 f203 	mul.w	r2, r2, r3
 80014c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014ca:	4621      	mov	r1, r4
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	441a      	add	r2, r3
 80014d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014d6:	4621      	mov	r1, r4
 80014d8:	fba3 ab01 	umull	sl, fp, r3, r1
 80014dc:	eb02 030b 	add.w	r3, r2, fp
 80014e0:	469b      	mov	fp, r3
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80014ee:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80014f2:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80014f6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80014fa:	1814      	adds	r4, r2, r0
 80014fc:	643c      	str	r4, [r7, #64]	@ 0x40
 80014fe:	414b      	adcs	r3, r1
 8001500:	647b      	str	r3, [r7, #68]	@ 0x44
 8001502:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001506:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800150a:	4b73      	ldr	r3, [pc, #460]	@ (80016d8 <BMP280_ReadTemperatureAndPressure+0x308>)
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	b21b      	sxth	r3, r3
 8001512:	17da      	asrs	r2, r3, #31
 8001514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001518:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001528:	00d9      	lsls	r1, r3, #3
 800152a:	2000      	movs	r0, #0
 800152c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001530:	1814      	adds	r4, r2, r0
 8001532:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001534:	414b      	adcs	r3, r1
 8001536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001538:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800153c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001540:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001544:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001548:	fb03 f102 	mul.w	r1, r3, r2
 800154c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001550:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	18ca      	adds	r2, r1, r3
 800155a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800155e:	fba3 1303 	umull	r1, r3, r3, r3
 8001562:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001566:	460b      	mov	r3, r1
 8001568:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800156c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001570:	18d3      	adds	r3, r2, r3
 8001572:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001576:	4b59      	ldr	r3, [pc, #356]	@ (80016dc <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	b21b      	sxth	r3, r3
 800157e:	17da      	asrs	r2, r3, #31
 8001580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001584:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001588:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800158c:	462b      	mov	r3, r5
 800158e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001592:	4642      	mov	r2, r8
 8001594:	fb02 f203 	mul.w	r2, r2, r3
 8001598:	464b      	mov	r3, r9
 800159a:	4621      	mov	r1, r4
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	4622      	mov	r2, r4
 80015a4:	4641      	mov	r1, r8
 80015a6:	fba2 1201 	umull	r1, r2, r2, r1
 80015aa:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80015ae:	460a      	mov	r2, r1
 80015b0:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80015b4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80015b8:	4413      	add	r3, r2
 80015ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015be:	f04f 0000 	mov.w	r0, #0
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015ca:	4623      	mov	r3, r4
 80015cc:	0a18      	lsrs	r0, r3, #8
 80015ce:	462b      	mov	r3, r5
 80015d0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015d4:	462b      	mov	r3, r5
 80015d6:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80015d8:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <BMP280_ReadTemperatureAndPressure+0x310>)
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	17da      	asrs	r2, r3, #31
 80015e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80015f2:	464a      	mov	r2, r9
 80015f4:	fb02 f203 	mul.w	r2, r2, r3
 80015f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015fc:	4644      	mov	r4, r8
 80015fe:	fb04 f303 	mul.w	r3, r4, r3
 8001602:	441a      	add	r2, r3
 8001604:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001608:	4644      	mov	r4, r8
 800160a:	fba3 4304 	umull	r4, r3, r3, r4
 800160e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001612:	4623      	mov	r3, r4
 8001614:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800162e:	464c      	mov	r4, r9
 8001630:	0323      	lsls	r3, r4, #12
 8001632:	4644      	mov	r4, r8
 8001634:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001638:	4644      	mov	r4, r8
 800163a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800163c:	1884      	adds	r4, r0, r2
 800163e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001640:	eb41 0303 	adc.w	r3, r1, r3
 8001644:	637b      	str	r3, [r7, #52]	@ 0x34
 8001646:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800164a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800164e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001652:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001656:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800165a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800165e:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <BMP280_ReadTemperatureAndPressure+0x314>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	2200      	movs	r2, #0
 8001666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800166a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800166e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001672:	462b      	mov	r3, r5
 8001674:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001678:	4642      	mov	r2, r8
 800167a:	fb02 f203 	mul.w	r2, r2, r3
 800167e:	464b      	mov	r3, r9
 8001680:	4621      	mov	r1, r4
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	4413      	add	r3, r2
 8001688:	4622      	mov	r2, r4
 800168a:	4641      	mov	r1, r8
 800168c:	fba2 1201 	umull	r1, r2, r2, r1
 8001690:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001694:	460a      	mov	r2, r1
 8001696:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800169a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800169e:	4413      	add	r3, r2
 80016a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80016b0:	4629      	mov	r1, r5
 80016b2:	104a      	asrs	r2, r1, #1
 80016b4:	4629      	mov	r1, r5
 80016b6:	17cb      	asrs	r3, r1, #31
 80016b8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 80016bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016c0:	4313      	orrs	r3, r2
 80016c2:	d111      	bne.n	80016e8 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 80016c4:	2300      	movs	r3, #0
 80016c6:	e160      	b.n	800198a <BMP280_ReadTemperatureAndPressure+0x5ba>
 80016c8:	c2c60000 	.word	0xc2c60000
 80016cc:	2000021c 	.word	0x2000021c
 80016d0:	20000210 	.word	0x20000210
 80016d4:	2000020e 	.word	0x2000020e
 80016d8:	2000020c 	.word	0x2000020c
 80016dc:	2000020a 	.word	0x2000020a
 80016e0:	20000208 	.word	0x20000208
 80016e4:	2000021a 	.word	0x2000021a
	  }
	  p = 1048576 - adc_P;
 80016e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016ec:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80016f0:	17da      	asrs	r2, r3, #31
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80016fa:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 80016fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001702:	105b      	asrs	r3, r3, #1
 8001704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001708:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800170c:	07db      	lsls	r3, r3, #31
 800170e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001712:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001716:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800171a:	4621      	mov	r1, r4
 800171c:	1a89      	subs	r1, r1, r2
 800171e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001722:	4629      	mov	r1, r5
 8001724:	eb61 0303 	sbc.w	r3, r1, r3
 8001728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800172c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001730:	4622      	mov	r2, r4
 8001732:	462b      	mov	r3, r5
 8001734:	1891      	adds	r1, r2, r2
 8001736:	6239      	str	r1, [r7, #32]
 8001738:	415b      	adcs	r3, r3
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
 800173c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001740:	4621      	mov	r1, r4
 8001742:	1851      	adds	r1, r2, r1
 8001744:	61b9      	str	r1, [r7, #24]
 8001746:	4629      	mov	r1, r5
 8001748:	414b      	adcs	r3, r1
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001758:	4649      	mov	r1, r9
 800175a:	018b      	lsls	r3, r1, #6
 800175c:	4641      	mov	r1, r8
 800175e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001762:	4641      	mov	r1, r8
 8001764:	018a      	lsls	r2, r1, #6
 8001766:	4641      	mov	r1, r8
 8001768:	1889      	adds	r1, r1, r2
 800176a:	6139      	str	r1, [r7, #16]
 800176c:	4649      	mov	r1, r9
 800176e:	eb43 0101 	adc.w	r1, r3, r1
 8001772:	6179      	str	r1, [r7, #20]
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001780:	4649      	mov	r1, r9
 8001782:	008b      	lsls	r3, r1, #2
 8001784:	4641      	mov	r1, r8
 8001786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800178a:	4641      	mov	r1, r8
 800178c:	008a      	lsls	r2, r1, #2
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	4603      	mov	r3, r0
 8001794:	4622      	mov	r2, r4
 8001796:	189b      	adds	r3, r3, r2
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	460b      	mov	r3, r1
 800179c:	462a      	mov	r2, r5
 800179e:	eb42 0303 	adc.w	r3, r2, r3
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017b0:	4649      	mov	r1, r9
 80017b2:	008b      	lsls	r3, r1, #2
 80017b4:	4641      	mov	r1, r8
 80017b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017ba:	4641      	mov	r1, r8
 80017bc:	008a      	lsls	r2, r1, #2
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	4622      	mov	r2, r4
 80017c6:	189b      	adds	r3, r3, r2
 80017c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017ca:	462b      	mov	r3, r5
 80017cc:	460a      	mov	r2, r1
 80017ce:	eb42 0303 	adc.w	r3, r2, r3
 80017d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017dc:	f7ff fa04 	bl	8000be8 <__aeabi_ldivmod>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80017e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001998 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	17da      	asrs	r2, r3, #31
 80017f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80017f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80017f6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	0b50      	lsrs	r0, r2, #13
 8001804:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001808:	1359      	asrs	r1, r3, #13
 800180a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800180e:	462b      	mov	r3, r5
 8001810:	fb00 f203 	mul.w	r2, r0, r3
 8001814:	4623      	mov	r3, r4
 8001816:	fb03 f301 	mul.w	r3, r3, r1
 800181a:	4413      	add	r3, r2
 800181c:	4622      	mov	r2, r4
 800181e:	fba2 1200 	umull	r1, r2, r2, r0
 8001822:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001826:	460a      	mov	r2, r1
 8001828:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800182c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001830:	4413      	add	r3, r2
 8001832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001836:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	0b50      	lsrs	r0, r2, #13
 8001844:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001848:	1359      	asrs	r1, r3, #13
 800184a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800184e:	462b      	mov	r3, r5
 8001850:	fb00 f203 	mul.w	r2, r0, r3
 8001854:	4623      	mov	r3, r4
 8001856:	fb03 f301 	mul.w	r3, r3, r1
 800185a:	4413      	add	r3, r2
 800185c:	4622      	mov	r2, r4
 800185e:	fba2 1200 	umull	r1, r2, r2, r0
 8001862:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001866:	460a      	mov	r2, r1
 8001868:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800186c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001870:	4413      	add	r3, r2
 8001872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001882:	4621      	mov	r1, r4
 8001884:	0e4a      	lsrs	r2, r1, #25
 8001886:	4629      	mov	r1, r5
 8001888:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800188c:	4629      	mov	r1, r5
 800188e:	164b      	asrs	r3, r1, #25
 8001890:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001894:	4b41      	ldr	r3, [pc, #260]	@ (800199c <BMP280_ReadTemperatureAndPressure+0x5cc>)
 8001896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189a:	b21b      	sxth	r3, r3
 800189c:	17da      	asrs	r2, r3, #31
 800189e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018a6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80018aa:	462a      	mov	r2, r5
 80018ac:	fb02 f203 	mul.w	r2, r2, r3
 80018b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018b4:	4621      	mov	r1, r4
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80018c0:	4621      	mov	r1, r4
 80018c2:	fba2 1201 	umull	r1, r2, r2, r1
 80018c6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018ca:	460a      	mov	r2, r1
 80018cc:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018d4:	4413      	add	r3, r2
 80018d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018e6:	4621      	mov	r1, r4
 80018e8:	0cca      	lsrs	r2, r1, #19
 80018ea:	4629      	mov	r1, r5
 80018ec:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018f0:	4629      	mov	r1, r5
 80018f2:	14cb      	asrs	r3, r1, #19
 80018f4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80018f8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80018fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001900:	1884      	adds	r4, r0, r2
 8001902:	663c      	str	r4, [r7, #96]	@ 0x60
 8001904:	eb41 0303 	adc.w	r3, r1, r3
 8001908:	667b      	str	r3, [r7, #100]	@ 0x64
 800190a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800190e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001912:	4621      	mov	r1, r4
 8001914:	1889      	adds	r1, r1, r2
 8001916:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001918:	4629      	mov	r1, r5
 800191a:	eb43 0101 	adc.w	r1, r3, r1
 800191e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001920:	f04f 0000 	mov.w	r0, #0
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800192c:	4623      	mov	r3, r4
 800192e:	0a18      	lsrs	r0, r3, #8
 8001930:	462b      	mov	r3, r5
 8001932:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001936:	462b      	mov	r3, r5
 8001938:	1219      	asrs	r1, r3, #8
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	b21b      	sxth	r3, r3
 8001942:	17da      	asrs	r2, r3, #31
 8001944:	653b      	str	r3, [r7, #80]	@ 0x50
 8001946:	657a      	str	r2, [r7, #84]	@ 0x54
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001954:	464c      	mov	r4, r9
 8001956:	0123      	lsls	r3, r4, #4
 8001958:	4644      	mov	r4, r8
 800195a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800195e:	4644      	mov	r4, r8
 8001960:	0122      	lsls	r2, r4, #4
 8001962:	1884      	adds	r4, r0, r2
 8001964:	603c      	str	r4, [r7, #0]
 8001966:	eb41 0303 	adc.w	r3, r1, r3
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001970:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8001974:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001978:	2b00      	cmp	r3, #0
 800197a:	da00      	bge.n	800197e <BMP280_ReadTemperatureAndPressure+0x5ae>
 800197c:	33ff      	adds	r3, #255	@ 0xff
 800197e:	121b      	asrs	r3, r3, #8
 8001980:	461a      	mov	r2, r3
 8001982:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001986:	601a      	str	r2, [r3, #0]

	  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001990:	46bd      	mov	sp, r7
 8001992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001996:	bf00      	nop
 8001998:	20000216 	.word	0x20000216
 800199c:	20000214 	.word	0x20000214
 80019a0:	20000212 	.word	0x20000212

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b090      	sub	sp, #64	@ 0x40
 80019a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019aa:	f000 ff2c 	bl	8002806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ae:	f000 f921 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b2:	f000 fae3 	bl	8001f7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80019b6:	f000 fa83 	bl	8001ec0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019ba:	f000 fab1 	bl	8001f20 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80019be:	f000 f981 	bl	8001cc4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80019c2:	f000 fa17 	bl	8001df4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80019c6:	f000 f9bb 	bl	8001d40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80019ca:	213c      	movs	r1, #60	@ 0x3c
 80019cc:	4875      	ldr	r0, [pc, #468]	@ (8001ba4 <main+0x200>)
 80019ce:	f003 fa99 	bl	8004f04 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80019d2:	2108      	movs	r1, #8
 80019d4:	4874      	ldr	r0, [pc, #464]	@ (8001ba8 <main+0x204>)
 80019d6:	f003 f8f5 	bl	8004bc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019da:	2100      	movs	r1, #0
 80019dc:	4872      	ldr	r0, [pc, #456]	@ (8001ba8 <main+0x204>)
 80019de:	f003 f8f1 	bl	8004bc4 <HAL_TIM_PWM_Start>
  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80019e2:	2301      	movs	r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	2101      	movs	r1, #1
 80019e8:	4870      	ldr	r0, [pc, #448]	@ (8001bac <main+0x208>)
 80019ea:	f7ff fb99 	bl	8001120 <BMP280_Init>
  #define BMP_CS_GPIO_Port GPIOA
  #define BMP_CS_Pin GPIO_PIN_4

  arm_pid_instance_f32 pid;
  pid.Kp=set_kp;
 80019ee:	4b70      	ldr	r3, [pc, #448]	@ (8001bb0 <main+0x20c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
  pid.Kd=set_kd;
 80019f4:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb4 <main+0x210>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	623b      	str	r3, [r7, #32]
  pid.Ki=set_ki;
 80019fa:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb8 <main+0x214>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61fb      	str	r3, [r7, #28]

  arm_pid_init_f32(&pid, 1);
 8001a00:	463b      	mov	r3, r7
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 fa9b 	bl	8006f40 <arm_pid_init_f32>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
 8001a0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ba4 <main+0x200>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b6a      	ldr	r3, [pc, #424]	@ (8001bbc <main+0x218>)
 8001a14:	601a      	str	r2, [r3, #0]


      if (encoder_value < 20) {
 8001a16:	4b69      	ldr	r3, [pc, #420]	@ (8001bbc <main+0x218>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b13      	cmp	r3, #19
 8001a1c:	dc07      	bgt.n	8001a2e <main+0x8a>
    	  encoder_value = 20;
 8001a1e:	4b67      	ldr	r3, [pc, #412]	@ (8001bbc <main+0x218>)
 8001a20:	2214      	movs	r2, #20
 8001a22:	601a      	str	r2, [r3, #0]
    	  __HAL_TIM_SET_COUNTER(&htim1,20);
 8001a24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba4 <main+0x200>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2214      	movs	r2, #20
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a2c:	e00a      	b.n	8001a44 <main+0xa0>
      } else if (encoder_value > 50) {
 8001a2e:	4b63      	ldr	r3, [pc, #396]	@ (8001bbc <main+0x218>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b32      	cmp	r3, #50	@ 0x32
 8001a34:	dd06      	ble.n	8001a44 <main+0xa0>
    	  encoder_value = 50;
 8001a36:	4b61      	ldr	r3, [pc, #388]	@ (8001bbc <main+0x218>)
 8001a38:	2232      	movs	r2, #50	@ 0x32
 8001a3a:	601a      	str	r2, [r3, #0]
    	  __HAL_TIM_SET_COUNTER(&htim1,50);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ba4 <main+0x200>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2232      	movs	r2, #50	@ 0x32
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24
      }

      set_temp = encoder_value;
 8001a44:	4b5d      	ldr	r3, [pc, #372]	@ (8001bbc <main+0x218>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a50:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc0 <main+0x21c>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]


	  	pid.Kp=set_kp;
 8001a56:	4b56      	ldr	r3, [pc, #344]	@ (8001bb0 <main+0x20c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	61bb      	str	r3, [r7, #24]
	  	pid.Kd=set_kd;
 8001a5c:	4b55      	ldr	r3, [pc, #340]	@ (8001bb4 <main+0x210>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	623b      	str	r3, [r7, #32]
	  	pid.Ki=set_ki;
 8001a62:	4b55      	ldr	r3, [pc, #340]	@ (8001bb8 <main+0x214>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61fb      	str	r3, [r7, #28]

	  HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	4855      	ldr	r0, [pc, #340]	@ (8001bc4 <main+0x220>)
 8001a6e:	f001 f9dd 	bl	8002e2c <HAL_GPIO_WritePin>
	  BMP280_ReadTemperatureAndPressure(&temp, &pressure);
 8001a72:	4955      	ldr	r1, [pc, #340]	@ (8001bc8 <main+0x224>)
 8001a74:	4855      	ldr	r0, [pc, #340]	@ (8001bcc <main+0x228>)
 8001a76:	f7ff fcab 	bl	80013d0 <BMP280_ReadTemperatureAndPressure>
	  HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	4851      	ldr	r0, [pc, #324]	@ (8001bc4 <main+0x220>)
 8001a80:	f001 f9d4 	bl	8002e2c <HAL_GPIO_WritePin>


	  	error = (set_temp-temp);
 8001a84:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <main+0x21c>)
 8001a86:	ed93 7a00 	vldr	s14, [r3]
 8001a8a:	4b50      	ldr	r3, [pc, #320]	@ (8001bcc <main+0x228>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a94:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <main+0x22c>)
 8001a96:	edc3 7a00 	vstr	s15, [r3]

	  	u = arm_pid_f32(&pid, error);
 8001a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd0 <main+0x22c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	463a      	mov	r2, r7
 8001aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001aae:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab4:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac8:	edd3 6a02 	vldr	s13, [r3, #8]
 8001acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ace:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    /* Update state */
    S->state[1] = S->state[0];
 8001ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aee:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001af4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001afa:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	4a35      	ldr	r2, [pc, #212]	@ (8001bd4 <main+0x230>)
 8001b00:	6013      	str	r3, [r2, #0]

	  	temp_size = snprintf(buffer, sizeof(buffer), "Temperatura: %.2f \t Set temp: %.2f\r\n", temp, set_temp);
 8001b02:	4b32      	ldr	r3, [pc, #200]	@ (8001bcc <main+0x228>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd3e 	bl	8000588 <__aeabi_f2d>
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	460d      	mov	r5, r1
 8001b10:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <main+0x21c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fd37 	bl	8000588 <__aeabi_f2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b22:	e9cd 4500 	strd	r4, r5, [sp]
 8001b26:	4a2c      	ldr	r2, [pc, #176]	@ (8001bd8 <main+0x234>)
 8001b28:	2164      	movs	r1, #100	@ 0x64
 8001b2a:	482c      	ldr	r0, [pc, #176]	@ (8001bdc <main+0x238>)
 8001b2c:	f005 ff40 	bl	80079b0 <sniprintf>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <main+0x23c>)
 8001b36:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, temp_size, 0xFFFF);
 8001b38:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <main+0x23c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b42:	4926      	ldr	r1, [pc, #152]	@ (8001bdc <main+0x238>)
 8001b44:	4827      	ldr	r0, [pc, #156]	@ (8001be4 <main+0x240>)
 8001b46:	f003 ff8b 	bl	8005a60 <HAL_UART_Transmit>
	    HAL_UART_Receive_IT(&huart3, &msg, 2);
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4926      	ldr	r1, [pc, #152]	@ (8001be8 <main+0x244>)
 8001b4e:	4825      	ldr	r0, [pc, #148]	@ (8001be4 <main+0x240>)
 8001b50:	f004 f80f 	bl	8005b72 <HAL_UART_Receive_IT>


	  	if(u<0.0){
 8001b54:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <main+0x230>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	d503      	bpl.n	8001b6c <main+0x1c8>
	  			u=0.0;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <main+0x230>)
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
	  		}
	  	if(u >1000.0){
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <main+0x230>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001bec <main+0x248>
 8001b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7e:	dd02      	ble.n	8001b86 <main+0x1e2>
	  			u=1000.0;
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <main+0x230>)
 8001b82:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <main+0x24c>)
 8001b84:	601a      	str	r2, [r3, #0]
	  		}

	  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,u);
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <main+0x230>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <main+0x204>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b94:	ee17 2a90 	vmov	r2, s15
 8001b98:	635a      	str	r2, [r3, #52]	@ 0x34
	  	HAL_Delay(100);
 8001b9a:	2064      	movs	r0, #100	@ 0x64
 8001b9c:	f000 fe90 	bl	80028c0 <HAL_Delay>
  {
 8001ba0:	e733      	b.n	8001a0a <main+0x66>
 8001ba2:	bf00      	nop
 8001ba4:	20000284 	.word	0x20000284
 8001ba8:	200002d0 	.word	0x200002d0
 8001bac:	20000220 	.word	0x20000220
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	200008f8 	.word	0x200008f8
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000904 	.word	0x20000904
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	200008f4 	.word	0x200008f4
 8001bcc:	200008f0 	.word	0x200008f0
 8001bd0:	200008fc 	.word	0x200008fc
 8001bd4:	20000900 	.word	0x20000900
 8001bd8:	08009c48 	.word	0x08009c48
 8001bdc:	20000888 	.word	0x20000888
 8001be0:	20000884 	.word	0x20000884
 8001be4:	2000031c 	.word	0x2000031c
 8001be8:	200008ec 	.word	0x200008ec
 8001bec:	447a0000 	.word	0x447a0000
 8001bf0:	447a0000 	.word	0x447a0000

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	@ 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	2230      	movs	r2, #48	@ 0x30
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f005 ff4b 	bl	8007a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c18:	f001 fa5c 	bl	80030d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <SystemClock_Config+0xc8>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	4a26      	ldr	r2, [pc, #152]	@ (8001cbc <SystemClock_Config+0xc8>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c28:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <SystemClock_Config+0xc8>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c34:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c3c:	4a20      	ldr	r2, [pc, #128]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <SystemClock_Config+0xcc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c54:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c68:	2348      	movs	r3, #72	@ 0x48
 8001c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c70:	2303      	movs	r3, #3
 8001c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f001 fa3b 	bl	80030f4 <HAL_RCC_OscConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c84:	f000 fa8c 	bl	80021a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c88:	230f      	movs	r3, #15
 8001c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c9e:	f107 030c 	add.w	r3, r7, #12
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 fcc9 	bl	800363c <HAL_RCC_ClockConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cb0:	f000 fa76 	bl	80021a0 <Error_Handler>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3750      	adds	r7, #80	@ 0x50
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cca:	4a1c      	ldr	r2, [pc, #112]	@ (8001d3c <MX_SPI1_Init+0x78>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cde:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ce2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cea:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d12:	2207      	movs	r2, #7
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d1e:	2208      	movs	r2, #8
 8001d20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <MX_SPI1_Init+0x74>)
 8001d24:	f002 faa0 	bl	8004268 <HAL_SPI_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d2e:	f000 fa37 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000220 	.word	0x20000220
 8001d3c:	40013000 	.word	0x40013000

08001d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	@ 0x30
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2224      	movs	r2, #36	@ 0x24
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 fea5 	bl	8007a9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	463b      	mov	r3, r7
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001d60:	4a23      	ldr	r2, [pc, #140]	@ (8001df0 <MX_TIM1_Init+0xb0>)
 8001d62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d64:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001d72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d92:	2301      	movs	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da2:	2301      	movs	r3, #1
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	480d      	ldr	r0, [pc, #52]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001db6:	f002 ffff 	bl	8004db8 <HAL_TIM_Encoder_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001dc0:	f000 f9ee 	bl	80021a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	@ (8001dec <MX_TIM1_Init+0xac>)
 8001dd6:	f003 fd67 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001de0:	f000 f9de 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	3730      	adds	r7, #48	@ 0x30
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000284 	.word	0x20000284
 8001df0:	40010000 	.word	0x40010000

08001df4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e06:	463b      	mov	r3, r7
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
 8001e14:	615a      	str	r2, [r3, #20]
 8001e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e18:	4b27      	ldr	r3, [pc, #156]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e1a:	4a28      	ldr	r2, [pc, #160]	@ (8001ebc <MX_TIM3_Init+0xc8>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e20:	2247      	movs	r2, #71	@ 0x47
 8001e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001e2a:	4b23      	ldr	r3, [pc, #140]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e3e:	481e      	ldr	r0, [pc, #120]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e40:	f002 fe68 	bl	8004b14 <HAL_TIM_PWM_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001e4a:	f000 f9a9 	bl	80021a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4816      	ldr	r0, [pc, #88]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e5e:	f003 fd23 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001e68:	f000 f99a 	bl	80021a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6c:	2360      	movs	r3, #96	@ 0x60
 8001e6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	2200      	movs	r2, #0
 8001e82:	4619      	mov	r1, r3
 8001e84:	480c      	ldr	r0, [pc, #48]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e86:	f003 f8cb 	bl	8005020 <HAL_TIM_PWM_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001e90:	f000 f986 	bl	80021a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e94:	463b      	mov	r3, r7
 8001e96:	2208      	movs	r2, #8
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001e9c:	f003 f8c0 	bl	8005020 <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001ea6:	f000 f97b 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <MX_TIM3_Init+0xc4>)
 8001eac:	f000 fa68 	bl	8002380 <HAL_TIM_MspPostInit>

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200002d0 	.word	0x200002d0
 8001ebc:	40000400 	.word	0x40000400

08001ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001ec6:	4a15      	ldr	r2, [pc, #84]	@ (8001f1c <MX_USART3_UART_Init+0x5c>)
 8001ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eca:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001ecc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_USART3_UART_Init+0x58>)
 8001f04:	f003 fd5e 	bl	80059c4 <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f0e:	f000 f947 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000031c 	.word	0x2000031c
 8001f1c:	40004800 	.word	0x40004800

08001f20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f2e:	2206      	movs	r2, #6
 8001f30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f34:	2202      	movs	r2, #2
 8001f36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f40:	2202      	movs	r2, #2
 8001f42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f50:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f64:	f000 ff7b 	bl	8002e5e <HAL_PCD_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f6e:	f000 f917 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200003a4 	.word	0x200003a4

08001f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08e      	sub	sp, #56	@ 0x38
 8001f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b7d      	ldr	r3, [pc, #500]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a7c      	ldr	r2, [pc, #496]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001faa:	4b77      	ldr	r3, [pc, #476]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	4a76      	ldr	r2, [pc, #472]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb6:	4b74      	ldr	r3, [pc, #464]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b71      	ldr	r3, [pc, #452]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a70      	ldr	r2, [pc, #448]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b6e      	ldr	r3, [pc, #440]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b6b      	ldr	r3, [pc, #428]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a6a      	ldr	r2, [pc, #424]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b68      	ldr	r3, [pc, #416]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff2:	4b65      	ldr	r3, [pc, #404]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a64      	ldr	r2, [pc, #400]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8001ff8:	f043 0320 	orr.w	r3, r3, #32
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b62      	ldr	r3, [pc, #392]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800200a:	4b5f      	ldr	r3, [pc, #380]	@ (8002188 <MX_GPIO_Init+0x20c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a5e      	ldr	r2, [pc, #376]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b5c      	ldr	r3, [pc, #368]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002022:	4b59      	ldr	r3, [pc, #356]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a58      	ldr	r2, [pc, #352]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b56      	ldr	r3, [pc, #344]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800203a:	4b53      	ldr	r3, [pc, #332]	@ (8002188 <MX_GPIO_Init+0x20c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a52      	ldr	r2, [pc, #328]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8002040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b50      	ldr	r3, [pc, #320]	@ (8002188 <MX_GPIO_Init+0x20c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2110      	movs	r1, #16
 8002056:	484d      	ldr	r0, [pc, #308]	@ (800218c <MX_GPIO_Init+0x210>)
 8002058:	f000 fee8 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800205c:	2200      	movs	r2, #0
 800205e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002062:	484b      	ldr	r0, [pc, #300]	@ (8002190 <MX_GPIO_Init+0x214>)
 8002064:	f000 fee2 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	2140      	movs	r1, #64	@ 0x40
 800206c:	4849      	ldr	r0, [pc, #292]	@ (8002194 <MX_GPIO_Init+0x218>)
 800206e:	f000 fedd 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002072:	2332      	movs	r3, #50	@ 0x32
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002082:	230b      	movs	r3, #11
 8002084:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208a:	4619      	mov	r1, r3
 800208c:	4842      	ldr	r0, [pc, #264]	@ (8002198 <MX_GPIO_Init+0x21c>)
 800208e:	f000 fd21 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002092:	2386      	movs	r3, #134	@ 0x86
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020a2:	230b      	movs	r3, #11
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	4837      	ldr	r0, [pc, #220]	@ (800218c <MX_GPIO_Init+0x210>)
 80020ae:	f000 fd11 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020b2:	2310      	movs	r3, #16
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c6:	4619      	mov	r1, r3
 80020c8:	4830      	ldr	r0, [pc, #192]	@ (800218c <MX_GPIO_Init+0x210>)
 80020ca:	f000 fd03 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80020ce:	f244 0381 	movw	r3, #16513	@ 0x4081
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d4:	2301      	movs	r3, #1
 80020d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e4:	4619      	mov	r1, r3
 80020e6:	482a      	ldr	r0, [pc, #168]	@ (8002190 <MX_GPIO_Init+0x214>)
 80020e8:	f000 fcf4 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : set_Pin */
  GPIO_InitStruct.Pin = set_Pin;
 80020ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020f2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80020f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(set_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002100:	4619      	mov	r1, r3
 8002102:	4826      	ldr	r0, [pc, #152]	@ (800219c <MX_GPIO_Init+0x220>)
 8002104:	f000 fce6 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002108:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800211a:	230b      	movs	r3, #11
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	481a      	ldr	r0, [pc, #104]	@ (8002190 <MX_GPIO_Init+0x214>)
 8002126:	f000 fcd5 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800212a:	2340      	movs	r3, #64	@ 0x40
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	4814      	ldr	r0, [pc, #80]	@ (8002194 <MX_GPIO_Init+0x218>)
 8002142:	f000 fcc7 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	480e      	ldr	r0, [pc, #56]	@ (8002194 <MX_GPIO_Init+0x218>)
 800215a:	f000 fcbb 	bl	8002ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800215e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002170:	230b      	movs	r3, #11
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002178:	4619      	mov	r1, r3
 800217a:	4806      	ldr	r0, [pc, #24]	@ (8002194 <MX_GPIO_Init+0x218>)
 800217c:	f000 fcaa 	bl	8002ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002180:	bf00      	nop
 8002182:	3738      	adds	r7, #56	@ 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40021800 	.word	0x40021800
 8002198:	40020800 	.word	0x40020800
 800219c:	40021400 	.word	0x40021400

080021a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <Error_Handler+0x8>

080021ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_MspInit+0x44>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	4a0e      	ldr	r2, [pc, #56]	@ (80021f0 <HAL_MspInit+0x44>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_MspInit+0x44>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_MspInit+0x44>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a08      	ldr	r2, [pc, #32]	@ (80021f0 <HAL_MspInit+0x44>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_MspInit+0x44>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	@ 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a25      	ldr	r2, [pc, #148]	@ (80022a8 <HAL_SPI_MspInit+0xb4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d143      	bne.n	800229e <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002216:	4b25      	ldr	r3, [pc, #148]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a24      	ldr	r2, [pc, #144]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 800221c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a1e      	ldr	r2, [pc, #120]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a18      	ldr	r2, [pc, #96]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <HAL_SPI_MspInit+0xb8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800225e:	2360      	movs	r3, #96	@ 0x60
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800226e:	2305      	movs	r3, #5
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	480d      	ldr	r0, [pc, #52]	@ (80022b0 <HAL_SPI_MspInit+0xbc>)
 800227a:	f000 fc2b 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800227e:	2320      	movs	r3, #32
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800228e:	2305      	movs	r3, #5
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	4806      	ldr	r0, [pc, #24]	@ (80022b4 <HAL_SPI_MspInit+0xc0>)
 800229a:	f000 fc1b 	bl	8002ad4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	@ 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40013000 	.word	0x40013000
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400

080022b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d128      	bne.n	800232c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022da:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <HAL_TIM_Encoder_MspInit+0x80>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a16      	ldr	r2, [pc, #88]	@ (8002338 <HAL_TIM_Encoder_MspInit+0x80>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <HAL_TIM_Encoder_MspInit+0x80>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_TIM_Encoder_MspInit+0x80>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <HAL_TIM_Encoder_MspInit+0x80>)
 80022f8:	f043 0310 	orr.w	r3, r3, #16
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <HAL_TIM_Encoder_MspInit+0x80>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800230a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800231c:	2301      	movs	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	@ (800233c <HAL_TIM_Encoder_MspInit+0x84>)
 8002328:	f000 fbd4 	bl	8002ad4 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	@ 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40010000 	.word	0x40010000
 8002338:	40023800 	.word	0x40023800
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <HAL_TIM_PWM_MspInit+0x38>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10b      	bne.n	800236a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_TIM_PWM_MspInit+0x3c>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	4a09      	ldr	r2, [pc, #36]	@ (800237c <HAL_TIM_PWM_MspInit+0x3c>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40
 800235e:	4b07      	ldr	r3, [pc, #28]	@ (800237c <HAL_TIM_PWM_MspInit+0x3c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40000400 	.word	0x40000400
 800237c:	40023800 	.word	0x40023800

08002380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_TIM_MspPostInit+0x64>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d11c      	bne.n	80023dc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_TIM_MspPostInit+0x68>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a10      	ldr	r2, [pc, #64]	@ (80023e8 <HAL_TIM_MspPostInit+0x68>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_TIM_MspPostInit+0x68>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80023ba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80023be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023cc:	2302      	movs	r3, #2
 80023ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	4619      	mov	r1, r3
 80023d6:	4805      	ldr	r0, [pc, #20]	@ (80023ec <HAL_TIM_MspPostInit+0x6c>)
 80023d8:	f000 fb7c 	bl	8002ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40020800 	.word	0x40020800

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0aa      	sub	sp, #168	@ 0xa8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	2284      	movs	r2, #132	@ 0x84
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f005 fb44 	bl	8007a9e <memset>
  if(huart->Instance==USART3)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a22      	ldr	r2, [pc, #136]	@ (80024a4 <HAL_UART_MspInit+0xb4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d13c      	bne.n	800249a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002424:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002426:	2300      	movs	r3, #0
 8002428:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	4618      	mov	r0, r3
 8002430:	f001 fb2a 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800243a:	f7ff feb1 	bl	80021a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800243e:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <HAL_UART_MspInit+0xb8>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <HAL_UART_MspInit+0xb8>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002448:	6413      	str	r3, [r2, #64]	@ 0x40
 800244a:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <HAL_UART_MspInit+0xb8>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002456:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <HAL_UART_MspInit+0xb8>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	4a13      	ldr	r2, [pc, #76]	@ (80024a8 <HAL_UART_MspInit+0xb8>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6313      	str	r3, [r2, #48]	@ 0x30
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HAL_UART_MspInit+0xb8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800246e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002472:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247c:	2301      	movs	r3, #1
 800247e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002488:	2307      	movs	r3, #7
 800248a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	@ (80024ac <HAL_UART_MspInit+0xbc>)
 8002496:	f000 fb1d 	bl	8002ad4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800249a:	bf00      	nop
 800249c:	37a8      	adds	r7, #168	@ 0xa8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40004800 	.word	0x40004800
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0ac      	sub	sp, #176	@ 0xb0
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c8:	f107 0318 	add.w	r3, r7, #24
 80024cc:	2284      	movs	r2, #132	@ 0x84
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f005 fae4 	bl	8007a9e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024de:	d159      	bne.n	8002594 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80024e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80024e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ec:	f107 0318 	add.w	r3, r7, #24
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 fac9 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80024fc:	f7ff fe50 	bl	80021a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	4b26      	ldr	r3, [pc, #152]	@ (800259c <HAL_PCD_MspInit+0xec>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	4a25      	ldr	r2, [pc, #148]	@ (800259c <HAL_PCD_MspInit+0xec>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6313      	str	r3, [r2, #48]	@ 0x30
 800250c:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_PCD_MspInit+0xec>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002518:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800251c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002532:	230a      	movs	r3, #10
 8002534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800253c:	4619      	mov	r1, r3
 800253e:	4818      	ldr	r0, [pc, #96]	@ (80025a0 <HAL_PCD_MspInit+0xf0>)
 8002540:	f000 fac8 	bl	8002ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800255c:	4619      	mov	r1, r3
 800255e:	4810      	ldr	r0, [pc, #64]	@ (80025a0 <HAL_PCD_MspInit+0xf0>)
 8002560:	f000 fab8 	bl	8002ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002564:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_PCD_MspInit+0xec>)
 8002566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002568:	4a0c      	ldr	r2, [pc, #48]	@ (800259c <HAL_PCD_MspInit+0xec>)
 800256a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002570:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_PCD_MspInit+0xec>)
 8002572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4b07      	ldr	r3, [pc, #28]	@ (800259c <HAL_PCD_MspInit+0xec>)
 800257e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002580:	4a06      	ldr	r2, [pc, #24]	@ (800259c <HAL_PCD_MspInit+0xec>)
 8002582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002586:	6453      	str	r3, [r2, #68]	@ 0x44
 8002588:	4b04      	ldr	r3, [pc, #16]	@ (800259c <HAL_PCD_MspInit+0xec>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002594:	bf00      	nop
 8002596:	37b0      	adds	r7, #176	@ 0xb0
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020000 	.word	0x40020000

080025a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <NMI_Handler+0x4>

080025ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <HardFault_Handler+0x4>

080025b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <MemManage_Handler+0x4>

080025bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <BusFault_Handler+0x4>

080025c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <UsageFault_Handler+0x4>

080025cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025fa:	f000 f941 	bl	8002880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}

08002602 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  return 1;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_kill>:

int _kill(int pid, int sig)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800261c:	f005 fa92 	bl	8007b44 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	2216      	movs	r2, #22
 8002624:	601a      	str	r2, [r3, #0]
  return -1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_exit>:

void _exit (int status)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800263a:	f04f 31ff 	mov.w	r1, #4294967295
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffe7 	bl	8002612 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <_exit+0x12>

08002648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e00a      	b.n	8002670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800265a:	f3af 8000 	nop.w
 800265e:	4601      	mov	r1, r0
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	60ba      	str	r2, [r7, #8]
 8002666:	b2ca      	uxtb	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3301      	adds	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	dbf0      	blt.n	800265a <_read+0x12>
  }

  return len;
 8002678:	687b      	ldr	r3, [r7, #4]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e009      	b.n	80026a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	60ba      	str	r2, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf1      	blt.n	8002694 <_write+0x12>
  }
  return len;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_close>:

int _close(int file)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e2:	605a      	str	r2, [r3, #4]
  return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_isatty>:

int _isatty(int file)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800272c:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <_sbrk+0x5c>)
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <_sbrk+0x60>)
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <_sbrk+0x64>)
 8002742:	4a12      	ldr	r2, [pc, #72]	@ (800278c <_sbrk+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d207      	bcs.n	8002764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002754:	f005 f9f6 	bl	8007b44 <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e009      	b.n	8002778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002764:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276a:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <_sbrk+0x64>)
 8002774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20050000 	.word	0x20050000
 8002784:	00000400 	.word	0x00000400
 8002788:	20000908 	.word	0x20000908
 800278c:	20000a60 	.word	0x20000a60

08002790 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <SystemInit+0x20>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <SystemInit+0x20>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b8:	f7ff ffea 	bl	8002790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027bc:	480c      	ldr	r0, [pc, #48]	@ (80027f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027be:	490d      	ldr	r1, [pc, #52]	@ (80027f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027c0:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027e2:	f005 f9b5 	bl	8007b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e6:	f7ff f8dd 	bl	80019a4 <main>
  bx  lr    
 80027ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80027f8:	0800a008 	.word	0x0800a008
  ldr r2, =_sbss
 80027fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002800:	20000a5c 	.word	0x20000a5c

08002804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC_IRQHandler>

08002806 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280a:	2003      	movs	r0, #3
 800280c:	f000 f92e 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002810:	2000      	movs	r0, #0
 8002812:	f000 f805 	bl	8002820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002816:	f7ff fcc9 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_InitTick+0x54>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_InitTick+0x58>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002836:	fbb3 f3f1 	udiv	r3, r3, r1
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f93b 	bl	8002aba <HAL_SYSTICK_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e00e      	b.n	800286c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d80a      	bhi.n	800286a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002854:	2200      	movs	r2, #0
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f000 f911 	bl	8002a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002860:	4a06      	ldr	r2, [pc, #24]	@ (800287c <HAL_InitTick+0x5c>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	2000000c 	.word	0x2000000c
 8002878:	20000014 	.word	0x20000014
 800287c:	20000010 	.word	0x20000010

08002880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_IncTick+0x20>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_IncTick+0x24>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4413      	add	r3, r2
 8002890:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <HAL_IncTick+0x24>)
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000014 	.word	0x20000014
 80028a4:	2000090c 	.word	0x2000090c

080028a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return uwTick;
 80028ac:	4b03      	ldr	r3, [pc, #12]	@ (80028bc <HAL_GetTick+0x14>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	2000090c 	.word	0x2000090c

080028c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7ff ffee 	bl	80028a8 <HAL_GetTick>
 80028cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d005      	beq.n	80028e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028da:	4b0a      	ldr	r3, [pc, #40]	@ (8002904 <HAL_Delay+0x44>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e6:	bf00      	nop
 80028e8:	f7ff ffde 	bl	80028a8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d8f7      	bhi.n	80028e8 <HAL_Delay+0x28>
  {
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000014 	.word	0x20000014

08002908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <__NVIC_SetPriorityGrouping+0x40>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	4313      	orrs	r3, r2
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <__NVIC_SetPriorityGrouping+0x40>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00
 800294c:	05fa0000 	.word	0x05fa0000

08002950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002954:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <__NVIC_GetPriorityGrouping+0x18>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f003 0307 	and.w	r3, r3, #7
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	@ (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	@ (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	@ 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	@ 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a38:	d301      	bcc.n	8002a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00f      	b.n	8002a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <SysTick_Config+0x40>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a46:	210f      	movs	r1, #15
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ff8e 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a50:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <SysTick_Config+0x40>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a56:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <SysTick_Config+0x40>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000e010 	.word	0xe000e010

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff47 	bl	8002908 <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff5c 	bl	8002950 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ff8e 	bl	80029c0 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5d 	bl	800296c <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffb0 	bl	8002a28 <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e175      	b.n	8002de0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8164 	bne.w	8002dda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x56>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80be 	beq.w	8002dda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	4b66      	ldr	r3, [pc, #408]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	4a65      	ldr	r2, [pc, #404]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6a:	4b63      	ldr	r3, [pc, #396]	@ (8002df8 <HAL_GPIO_Init+0x324>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c76:	4a61      	ldr	r2, [pc, #388]	@ (8002dfc <HAL_GPIO_Init+0x328>)
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	@ (8002e00 <HAL_GPIO_Init+0x32c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d037      	beq.n	8002d12 <HAL_GPIO_Init+0x23e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a57      	ldr	r2, [pc, #348]	@ (8002e04 <HAL_GPIO_Init+0x330>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d031      	beq.n	8002d0e <HAL_GPIO_Init+0x23a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a56      	ldr	r2, [pc, #344]	@ (8002e08 <HAL_GPIO_Init+0x334>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d02b      	beq.n	8002d0a <HAL_GPIO_Init+0x236>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a55      	ldr	r2, [pc, #340]	@ (8002e0c <HAL_GPIO_Init+0x338>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d025      	beq.n	8002d06 <HAL_GPIO_Init+0x232>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a54      	ldr	r2, [pc, #336]	@ (8002e10 <HAL_GPIO_Init+0x33c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01f      	beq.n	8002d02 <HAL_GPIO_Init+0x22e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a53      	ldr	r2, [pc, #332]	@ (8002e14 <HAL_GPIO_Init+0x340>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d019      	beq.n	8002cfe <HAL_GPIO_Init+0x22a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	@ (8002e18 <HAL_GPIO_Init+0x344>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_GPIO_Init+0x226>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a51      	ldr	r2, [pc, #324]	@ (8002e1c <HAL_GPIO_Init+0x348>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_GPIO_Init+0x222>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a50      	ldr	r2, [pc, #320]	@ (8002e20 <HAL_GPIO_Init+0x34c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <HAL_GPIO_Init+0x21e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e24 <HAL_GPIO_Init+0x350>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_GPIO_Init+0x21a>
 8002cea:	2309      	movs	r3, #9
 8002cec:	e012      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cee:	230a      	movs	r3, #10
 8002cf0:	e010      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	e00e      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	e00c      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cfa:	2306      	movs	r3, #6
 8002cfc:	e00a      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002cfe:	2305      	movs	r3, #5
 8002d00:	e008      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e006      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d06:	2303      	movs	r3, #3
 8002d08:	e004      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e002      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_GPIO_Init+0x240>
 8002d12:	2300      	movs	r3, #0
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	f002 0203 	and.w	r2, r2, #3
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	4093      	lsls	r3, r2
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d24:	4935      	ldr	r1, [pc, #212]	@ (8002dfc <HAL_GPIO_Init+0x328>)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d32:	4b3d      	ldr	r3, [pc, #244]	@ (8002e28 <HAL_GPIO_Init+0x354>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d56:	4a34      	ldr	r2, [pc, #208]	@ (8002e28 <HAL_GPIO_Init+0x354>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d5c:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <HAL_GPIO_Init+0x354>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d80:	4a29      	ldr	r2, [pc, #164]	@ (8002e28 <HAL_GPIO_Init+0x354>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d86:	4b28      	ldr	r3, [pc, #160]	@ (8002e28 <HAL_GPIO_Init+0x354>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002daa:	4a1f      	ldr	r2, [pc, #124]	@ (8002e28 <HAL_GPIO_Init+0x354>)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_GPIO_Init+0x354>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd4:	4a14      	ldr	r2, [pc, #80]	@ (8002e28 <HAL_GPIO_Init+0x354>)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	f67f ae86 	bls.w	8002af4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3724      	adds	r7, #36	@ 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40021400 	.word	0x40021400
 8002e18:	40021800 	.word	0x40021800
 8002e1c:	40021c00 	.word	0x40021c00
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40022400 	.word	0x40022400
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af02      	add	r7, sp, #8
 8002e64:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e108      	b.n	8003082 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fb10 	bl	80024b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2203      	movs	r2, #3
 8002e94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e9e:	d102      	bne.n	8002ea6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 fdb2 	bl	8006a14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7c1a      	ldrb	r2, [r3, #16]
 8002eb8:	f88d 2000 	strb.w	r2, [sp]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec0:	f003 fd4e 	bl	8006960 <USB_CoreInit>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0d5      	b.n	8003082 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fdaa 	bl	8006a36 <USB_SetCurrentMode>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0c6      	b.n	8003082 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
 8002ef8:	e04a      	b.n	8002f90 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3315      	adds	r3, #21
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	b298      	uxth	r0, r3
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	332e      	adds	r3, #46	@ 0x2e
 8002f36:	4602      	mov	r2, r0
 8002f38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	3318      	adds	r3, #24
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	331c      	adds	r3, #28
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3320      	adds	r3, #32
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3324      	adds	r3, #36	@ 0x24
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	791b      	ldrb	r3, [r3, #4]
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3af      	bcc.n	8002efa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	e044      	b.n	800302a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	3301      	adds	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	791b      	ldrb	r3, [r3, #4]
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	429a      	cmp	r2, r3
 8003032:	d3b5      	bcc.n	8002fa0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7c1a      	ldrb	r2, [r3, #16]
 800303c:	f88d 2000 	strb.w	r2, [sp]
 8003040:	3304      	adds	r3, #4
 8003042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003044:	f003 fd44 	bl	8006ad0 <USB_DevInit>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e013      	b.n	8003082 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	7b1b      	ldrb	r3, [r3, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d102      	bne.n	8003076 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f80b 	bl	800308c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f003 feff 	bl	8006e7e <USB_DevDisconnect>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ba:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	10000003 	.word	0x10000003

080030d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a04      	ldr	r2, [pc, #16]	@ (80030f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e2:	6013      	str	r3, [r2, #0]
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40007000 	.word	0x40007000

080030f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030fc:	2300      	movs	r3, #0
 80030fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e291      	b.n	800362e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8087 	beq.w	8003226 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003118:	4b96      	ldr	r3, [pc, #600]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b04      	cmp	r3, #4
 8003122:	d00c      	beq.n	800313e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003124:	4b93      	ldr	r3, [pc, #588]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d112      	bne.n	8003156 <HAL_RCC_OscConfig+0x62>
 8003130:	4b90      	ldr	r3, [pc, #576]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003138:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800313c:	d10b      	bne.n	8003156 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	4b8d      	ldr	r3, [pc, #564]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d06c      	beq.n	8003224 <HAL_RCC_OscConfig+0x130>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d168      	bne.n	8003224 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e26b      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x7a>
 8003160:	4b84      	ldr	r3, [pc, #528]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a83      	ldr	r2, [pc, #524]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e02e      	b.n	80031cc <HAL_RCC_OscConfig+0xd8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x9c>
 8003176:	4b7f      	ldr	r3, [pc, #508]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7e      	ldr	r2, [pc, #504]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 800317c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b7c      	ldr	r3, [pc, #496]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a7b      	ldr	r2, [pc, #492]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003188:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xd8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0xc0>
 800319a:	4b76      	ldr	r3, [pc, #472]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b73      	ldr	r3, [pc, #460]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a72      	ldr	r2, [pc, #456]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xd8>
 80031b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7ff fb68 	bl	80028a8 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7ff fb64 	bl	80028a8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	@ 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e21f      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b61      	ldr	r3, [pc, #388]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xe8>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7ff fb54 	bl	80028a8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff fb50 	bl	80028a8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e20b      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b57      	ldr	r3, [pc, #348]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x110>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d069      	beq.n	8003306 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003232:	4b50      	ldr	r3, [pc, #320]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b4d      	ldr	r3, [pc, #308]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x190>
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b47      	ldr	r3, [pc, #284]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x17a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1df      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	493d      	ldr	r1, [pc, #244]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e040      	b.n	8003306 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d023      	beq.n	80032d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b39      	ldr	r3, [pc, #228]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a38      	ldr	r2, [pc, #224]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7ff fb06 	bl	80028a8 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a0:	f7ff fb02 	bl	80028a8 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1bd      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b2:	4b30      	ldr	r3, [pc, #192]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032be:	4b2d      	ldr	r3, [pc, #180]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4929      	ldr	r1, [pc, #164]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
 80032d2:	e018      	b.n	8003306 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d4:	4b27      	ldr	r3, [pc, #156]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a26      	ldr	r2, [pc, #152]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7ff fae2 	bl	80028a8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e8:	f7ff fade 	bl	80028a8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e199      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d038      	beq.n	8003384 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d019      	beq.n	800334e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331a:	4b16      	ldr	r3, [pc, #88]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 800331c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331e:	4a15      	ldr	r2, [pc, #84]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7ff fabf 	bl	80028a8 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332e:	f7ff fabb 	bl	80028a8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e176      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003340:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x23a>
 800334c:	e01a      	b.n	8003384 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003352:	4a08      	ldr	r2, [pc, #32]	@ (8003374 <HAL_RCC_OscConfig+0x280>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7ff faa5 	bl	80028a8 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003362:	f7ff faa1 	bl	80028a8 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d903      	bls.n	8003378 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e15c      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
 8003374:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	4b91      	ldr	r3, [pc, #580]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 800337a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ee      	bne.n	8003362 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a4 	beq.w	80034da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b8b      	ldr	r3, [pc, #556]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b88      	ldr	r3, [pc, #544]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	4a87      	ldr	r2, [pc, #540]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033aa:	4b85      	ldr	r3, [pc, #532]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ba:	4b82      	ldr	r3, [pc, #520]	@ (80035c4 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d118      	bne.n	80033f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033c6:	4b7f      	ldr	r3, [pc, #508]	@ (80035c4 <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7e      	ldr	r2, [pc, #504]	@ (80035c4 <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7ff fa69 	bl	80028a8 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033da:	f7ff fa65 	bl	80028a8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b64      	cmp	r3, #100	@ 0x64
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e120      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ec:	4b75      	ldr	r3, [pc, #468]	@ (80035c4 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x31a>
 8003400:	4b6f      	ldr	r3, [pc, #444]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	4a6e      	ldr	r2, [pc, #440]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6713      	str	r3, [r2, #112]	@ 0x70
 800340c:	e02d      	b.n	800346a <HAL_RCC_OscConfig+0x376>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x33c>
 8003416:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341a:	4a69      	ldr	r2, [pc, #420]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6713      	str	r3, [r2, #112]	@ 0x70
 8003422:	4b67      	ldr	r3, [pc, #412]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	4a66      	ldr	r2, [pc, #408]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6713      	str	r3, [r2, #112]	@ 0x70
 800342e:	e01c      	b.n	800346a <HAL_RCC_OscConfig+0x376>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b05      	cmp	r3, #5
 8003436:	d10c      	bne.n	8003452 <HAL_RCC_OscConfig+0x35e>
 8003438:	4b61      	ldr	r3, [pc, #388]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343c:	4a60      	ldr	r2, [pc, #384]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 800343e:	f043 0304 	orr.w	r3, r3, #4
 8003442:	6713      	str	r3, [r2, #112]	@ 0x70
 8003444:	4b5e      	ldr	r3, [pc, #376]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003448:	4a5d      	ldr	r2, [pc, #372]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003450:	e00b      	b.n	800346a <HAL_RCC_OscConfig+0x376>
 8003452:	4b5b      	ldr	r3, [pc, #364]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	4a5a      	ldr	r2, [pc, #360]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	6713      	str	r3, [r2, #112]	@ 0x70
 800345e:	4b58      	ldr	r3, [pc, #352]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	4a57      	ldr	r2, [pc, #348]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d015      	beq.n	800349e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003472:	f7ff fa19 	bl	80028a8 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7ff fa15 	bl	80028a8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0ce      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	4b4b      	ldr	r3, [pc, #300]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ee      	beq.n	800347a <HAL_RCC_OscConfig+0x386>
 800349c:	e014      	b.n	80034c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349e:	f7ff fa03 	bl	80028a8 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7ff f9ff 	bl	80028a8 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e0b8      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034bc:	4b40      	ldr	r3, [pc, #256]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ee      	bne.n	80034a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d105      	bne.n	80034da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ce:	4b3c      	ldr	r3, [pc, #240]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a3b      	ldr	r2, [pc, #236]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80034d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80a4 	beq.w	800362c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e4:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d06b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d149      	bne.n	800358c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a30      	ldr	r2, [pc, #192]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80034fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7ff f9d0 	bl	80028a8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7ff f9cc 	bl	80028a8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e087      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	4b28      	ldr	r3, [pc, #160]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	3b01      	subs	r3, #1
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	061b      	lsls	r3, r3, #24
 800354e:	4313      	orrs	r3, r2
 8003550:	4a1b      	ldr	r2, [pc, #108]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003552:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003556:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003558:	4b19      	ldr	r3, [pc, #100]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7ff f9a0 	bl	80028a8 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356c:	f7ff f99c 	bl	80028a8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e057      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b10      	ldr	r3, [pc, #64]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x478>
 800358a:	e04f      	b.n	800362c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358c:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0b      	ldr	r2, [pc, #44]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 8003592:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7ff f986 	bl	80028a8 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7ff f982 	bl	80028a8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e03d      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_RCC_OscConfig+0x4cc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4ac>
 80035be:	e035      	b.n	800362c <HAL_RCC_OscConfig+0x538>
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_RCC_OscConfig+0x544>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d028      	beq.n	8003628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d121      	bne.n	8003628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d11a      	bne.n	8003628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003600:	4293      	cmp	r3, r2
 8003602:	d111      	bne.n	8003628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	3b01      	subs	r3, #1
 8003612:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d107      	bne.n	8003628 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800

0800363c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0d0      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b67      	ldr	r3, [pc, #412]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 020f 	bic.w	r2, r3, #15
 800366a:	4965      	ldr	r1, [pc, #404]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b63      	ldr	r3, [pc, #396]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b8      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800369c:	4b59      	ldr	r3, [pc, #356]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a58      	ldr	r2, [pc, #352]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4b53      	ldr	r3, [pc, #332]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a52      	ldr	r2, [pc, #328]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b50      	ldr	r3, [pc, #320]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	494d      	ldr	r1, [pc, #308]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d040      	beq.n	8003760 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b47      	ldr	r3, [pc, #284]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d115      	bne.n	800371e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b41      	ldr	r3, [pc, #260]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e073      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	4b3d      	ldr	r3, [pc, #244]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06b      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b39      	ldr	r3, [pc, #228]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4936      	ldr	r1, [pc, #216]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7ff f8ba 	bl	80028a8 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7ff f8b6 	bl	80028a8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e053      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2d      	ldr	r3, [pc, #180]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b27      	ldr	r3, [pc, #156]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d210      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 020f 	bic.w	r2, r3, #15
 8003776:	4922      	ldr	r1, [pc, #136]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 f821 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_RCC_ClockConfig+0x1c8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x1cc>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	@ (800380c <HAL_RCC_ClockConfig+0x1d0>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_ClockConfig+0x1d4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f816 	bl	8002820 <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00
 8003804:	40023800 	.word	0x40023800
 8003808:	08009c70 	.word	0x08009c70
 800380c:	2000000c 	.word	0x2000000c
 8003810:	20000010 	.word	0x20000010

08003814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b094      	sub	sp, #80	@ 0x50
 800381a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003820:	2300      	movs	r3, #0
 8003822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003824:	2300      	movs	r3, #0
 8003826:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800382c:	4b79      	ldr	r3, [pc, #484]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d00d      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x40>
 8003838:	2b08      	cmp	r3, #8
 800383a:	f200 80e1 	bhi.w	8003a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x34>
 8003842:	2b04      	cmp	r3, #4
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x3a>
 8003846:	e0db      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b73      	ldr	r3, [pc, #460]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800384a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800384c:	e0db      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800384e:	4b73      	ldr	r3, [pc, #460]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003852:	e0d8      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003854:	4b6f      	ldr	r3, [pc, #444]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800385c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800385e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d063      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	2200      	movs	r2, #0
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003874:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800387c:	633b      	str	r3, [r7, #48]	@ 0x30
 800387e:	2300      	movs	r3, #0
 8003880:	637b      	str	r3, [r7, #52]	@ 0x34
 8003882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003886:	4622      	mov	r2, r4
 8003888:	462b      	mov	r3, r5
 800388a:	f04f 0000 	mov.w	r0, #0
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	0159      	lsls	r1, r3, #5
 8003894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003898:	0150      	lsls	r0, r2, #5
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4621      	mov	r1, r4
 80038a0:	1a51      	subs	r1, r2, r1
 80038a2:	6139      	str	r1, [r7, #16]
 80038a4:	4629      	mov	r1, r5
 80038a6:	eb63 0301 	sbc.w	r3, r3, r1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b8:	4659      	mov	r1, fp
 80038ba:	018b      	lsls	r3, r1, #6
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038c2:	4651      	mov	r1, sl
 80038c4:	018a      	lsls	r2, r1, #6
 80038c6:	4651      	mov	r1, sl
 80038c8:	ebb2 0801 	subs.w	r8, r2, r1
 80038cc:	4659      	mov	r1, fp
 80038ce:	eb63 0901 	sbc.w	r9, r3, r1
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e6:	4690      	mov	r8, r2
 80038e8:	4699      	mov	r9, r3
 80038ea:	4623      	mov	r3, r4
 80038ec:	eb18 0303 	adds.w	r3, r8, r3
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	462b      	mov	r3, r5
 80038f4:	eb49 0303 	adc.w	r3, r9, r3
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003906:	4629      	mov	r1, r5
 8003908:	024b      	lsls	r3, r1, #9
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003910:	4621      	mov	r1, r4
 8003912:	024a      	lsls	r2, r1, #9
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800391e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003924:	f7fd f9b0 	bl	8000c88 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003930:	e058      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003932:	4b38      	ldr	r3, [pc, #224]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	2200      	movs	r2, #0
 800393a:	4618      	mov	r0, r3
 800393c:	4611      	mov	r1, r2
 800393e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
 8003948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800394c:	4642      	mov	r2, r8
 800394e:	464b      	mov	r3, r9
 8003950:	f04f 0000 	mov.w	r0, #0
 8003954:	f04f 0100 	mov.w	r1, #0
 8003958:	0159      	lsls	r1, r3, #5
 800395a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395e:	0150      	lsls	r0, r2, #5
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4641      	mov	r1, r8
 8003966:	ebb2 0a01 	subs.w	sl, r2, r1
 800396a:	4649      	mov	r1, r9
 800396c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800397c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003984:	ebb2 040a 	subs.w	r4, r2, sl
 8003988:	eb63 050b 	sbc.w	r5, r3, fp
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	00eb      	lsls	r3, r5, #3
 8003996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800399a:	00e2      	lsls	r2, r4, #3
 800399c:	4614      	mov	r4, r2
 800399e:	461d      	mov	r5, r3
 80039a0:	4643      	mov	r3, r8
 80039a2:	18e3      	adds	r3, r4, r3
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	464b      	mov	r3, r9
 80039a8:	eb45 0303 	adc.w	r3, r5, r3
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ba:	4629      	mov	r1, r5
 80039bc:	028b      	lsls	r3, r1, #10
 80039be:	4621      	mov	r1, r4
 80039c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039c4:	4621      	mov	r1, r4
 80039c6:	028a      	lsls	r2, r1, #10
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ce:	2200      	movs	r2, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	61fa      	str	r2, [r7, #28]
 80039d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d8:	f7fd f956 	bl	8000c88 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3750      	adds	r7, #80	@ 0x50
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200

08003a20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	2000000c 	.word	0x2000000c

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0a9b      	lsrs	r3, r3, #10
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4903      	ldr	r1, [pc, #12]	@ (8003a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	08009c80 	.word	0x08009c80

08003a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a64:	f7ff ffdc 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0b5b      	lsrs	r3, r3, #13
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	@ (8003a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	08009c80 	.word	0x08009c80

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d012      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ab0:	4b69      	ldr	r3, [pc, #420]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a68      	ldr	r2, [pc, #416]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003aba:	6093      	str	r3, [r2, #8]
 8003abc:	4b66      	ldr	r3, [pc, #408]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	4964      	ldr	r1, [pc, #400]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ae8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af0:	4959      	ldr	r1, [pc, #356]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b00:	d101      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d017      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b1e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	494a      	ldr	r1, [pc, #296]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 808b 	beq.w	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	4a39      	ldr	r2, [pc, #228]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b78:	4b37      	ldr	r3, [pc, #220]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b84:	4b35      	ldr	r3, [pc, #212]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a34      	ldr	r2, [pc, #208]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fe fe8a 	bl	80028a8 <HAL_GetTick>
 8003b94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fe fe86 	bl	80028a8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e357      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003baa:	4b2c      	ldr	r3, [pc, #176]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb6:	4b28      	ldr	r3, [pc, #160]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d035      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d02e      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd4:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bdc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bde:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bea:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bee:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bf6:	4a18      	ldr	r2, [pc, #96]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bfc:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d114      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe fe4e 	bl	80028a8 <HAL_GetTick>
 8003c0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fe fe4a 	bl	80028a8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e319      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0ee      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c3e:	d111      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c4c:	4b04      	ldr	r3, [pc, #16]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c4e:	400b      	ands	r3, r1
 8003c50:	4901      	ldr	r1, [pc, #4]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	0ffffcff 	.word	0x0ffffcff
 8003c64:	4baa      	ldr	r3, [pc, #680]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4aa9      	ldr	r2, [pc, #676]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c6e:	6093      	str	r3, [r2, #8]
 8003c70:	4ba7      	ldr	r3, [pc, #668]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	49a4      	ldr	r1, [pc, #656]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d010      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c8e:	4ba0      	ldr	r3, [pc, #640]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c94:	4a9e      	ldr	r2, [pc, #632]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	4999      	ldr	r1, [pc, #612]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cbc:	4b94      	ldr	r3, [pc, #592]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cca:	4991      	ldr	r1, [pc, #580]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cde:	4b8c      	ldr	r3, [pc, #560]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cec:	4988      	ldr	r1, [pc, #544]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d00:	4b83      	ldr	r3, [pc, #524]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0e:	4980      	ldr	r1, [pc, #512]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d22:	4b7b      	ldr	r3, [pc, #492]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d28:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d30:	4977      	ldr	r1, [pc, #476]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d44:	4b72      	ldr	r3, [pc, #456]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	496f      	ldr	r1, [pc, #444]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d66:	4b6a      	ldr	r3, [pc, #424]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6c:	f023 020c 	bic.w	r2, r3, #12
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d74:	4966      	ldr	r1, [pc, #408]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d88:	4b61      	ldr	r3, [pc, #388]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d96:	495e      	ldr	r1, [pc, #376]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003daa:	4b59      	ldr	r3, [pc, #356]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db8:	4955      	ldr	r1, [pc, #340]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	494d      	ldr	r1, [pc, #308]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dee:	4b48      	ldr	r3, [pc, #288]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	4944      	ldr	r1, [pc, #272]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e10:	4b3f      	ldr	r3, [pc, #252]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1e:	493c      	ldr	r1, [pc, #240]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e32:	4b37      	ldr	r3, [pc, #220]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e40:	4933      	ldr	r1, [pc, #204]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e54:	4b2e      	ldr	r3, [pc, #184]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e62:	492b      	ldr	r1, [pc, #172]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e76:	4b26      	ldr	r3, [pc, #152]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e84:	4922      	ldr	r1, [pc, #136]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e94:	d101      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eb6:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec4:	4912      	ldr	r1, [pc, #72]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ee8:	4909      	ldr	r1, [pc, #36]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d006      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80d9 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f04:	4b02      	ldr	r3, [pc, #8]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a01      	ldr	r2, [pc, #4]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f0e:	e001      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003f10:	40023800 	.word	0x40023800
 8003f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f16:	f7fe fcc7 	bl	80028a8 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f1e:	f7fe fcc3 	bl	80028a8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b64      	cmp	r3, #100	@ 0x64
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e194      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f30:	4b6c      	ldr	r3, [pc, #432]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d021      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11d      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f50:	4b64      	ldr	r3, [pc, #400]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f5e:	4b61      	ldr	r3, [pc, #388]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f64:	0e1b      	lsrs	r3, r3, #24
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	019a      	lsls	r2, r3, #6
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	071b      	lsls	r3, r3, #28
 8003f84:	4957      	ldr	r1, [pc, #348]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02e      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb6:	d129      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fc6:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fcc:	0f1b      	lsrs	r3, r3, #28
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	019a      	lsls	r2, r3, #6
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	071b      	lsls	r3, r3, #28
 8003fec:	493d      	ldr	r1, [pc, #244]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ffa:	f023 021f 	bic.w	r2, r3, #31
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	3b01      	subs	r3, #1
 8004004:	4937      	ldr	r1, [pc, #220]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004018:	4b32      	ldr	r3, [pc, #200]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800401a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800401e:	0e1b      	lsrs	r3, r3, #24
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004026:	4b2f      	ldr	r3, [pc, #188]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402c:	0f1b      	lsrs	r3, r3, #28
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	019a      	lsls	r2, r3, #6
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	431a      	orrs	r2, r3
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	431a      	orrs	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	071b      	lsls	r3, r3, #28
 800404c:	4925      	ldr	r1, [pc, #148]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d011      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	019a      	lsls	r2, r3, #6
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	061b      	lsls	r3, r3, #24
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	071b      	lsls	r3, r3, #28
 800407c:	4919      	ldr	r1, [pc, #100]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004084:	4b17      	ldr	r3, [pc, #92]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a16      	ldr	r2, [pc, #88]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800408a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800408e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fe fc0a 	bl	80028a8 <HAL_GetTick>
 8004094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004098:	f7fe fc06 	bl	80028a8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	@ 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e0d7      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040aa:	4b0e      	ldr	r3, [pc, #56]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f040 80cd 	bne.w	8004258 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a08      	ldr	r2, [pc, #32]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ca:	f7fe fbed 	bl	80028a8 <HAL_GetTick>
 80040ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040d0:	e00a      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040d2:	f7fe fbe9 	bl	80028a8 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b64      	cmp	r3, #100	@ 0x64
 80040de:	d903      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0ba      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80040e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f4:	d0ed      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02e      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d12a      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800411e:	4b51      	ldr	r3, [pc, #324]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800412c:	4b4d      	ldr	r3, [pc, #308]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004132:	0f1b      	lsrs	r3, r3, #28
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	019a      	lsls	r2, r3, #6
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	071b      	lsls	r3, r3, #28
 8004152:	4944      	ldr	r1, [pc, #272]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800415a:	4b42      	ldr	r3, [pc, #264]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800415c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004160:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	493d      	ldr	r1, [pc, #244]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d022      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004184:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004188:	d11d      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800418a:	4b36      	ldr	r3, [pc, #216]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004190:	0e1b      	lsrs	r3, r3, #24
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004198:	4b32      	ldr	r3, [pc, #200]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419e:	0f1b      	lsrs	r3, r3, #28
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	019a      	lsls	r2, r3, #6
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	431a      	orrs	r2, r3
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	4929      	ldr	r1, [pc, #164]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d028      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041d2:	4b24      	ldr	r3, [pc, #144]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	0e1b      	lsrs	r3, r3, #24
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041e0:	4b20      	ldr	r3, [pc, #128]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	019a      	lsls	r2, r3, #6
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	431a      	orrs	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	071b      	lsls	r3, r3, #28
 8004206:	4917      	ldr	r1, [pc, #92]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800420e:	4b15      	ldr	r3, [pc, #84]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004214:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	4911      	ldr	r1, [pc, #68]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004224:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0e      	ldr	r2, [pc, #56]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fe fb3a 	bl	80028a8 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004238:	f7fe fb36 	bl	80028a8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	@ 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e007      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800424a:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004256:	d1ef      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800

08004268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e09d      	b.n	80043b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d108      	bne.n	8004294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800428a:	d009      	beq.n	80042a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
 8004292:	e005      	b.n	80042a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd ff9a 	bl	80021f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042e0:	d902      	bls.n	80042e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	e002      	b.n	80042ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80042f6:	d007      	beq.n	8004308 <HAL_SPI_Init+0xa0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004300:	d002      	beq.n	8004308 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434a:	ea42 0103 	orr.w	r1, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	f003 0204 	and.w	r2, r3, #4
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004384:	ea42 0103 	orr.w	r1, r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b08a      	sub	sp, #40	@ 0x28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043cc:	2301      	movs	r3, #1
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x26>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e20a      	b.n	80047fa <HAL_SPI_TransmitReceive+0x43c>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ec:	f7fe fa5c 	bl	80028a8 <HAL_GetTick>
 80043f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004404:	887b      	ldrh	r3, [r7, #2]
 8004406:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004408:	7efb      	ldrb	r3, [r7, #27]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d00e      	beq.n	800442c <HAL_SPI_TransmitReceive+0x6e>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004414:	d106      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x66>
 800441e:	7efb      	ldrb	r3, [r7, #27]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d003      	beq.n	800442c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004424:	2302      	movs	r3, #2
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800442a:	e1e0      	b.n	80047ee <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_SPI_TransmitReceive+0x80>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SPI_TransmitReceive+0x80>
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004444:	e1d3      	b.n	80047ee <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b04      	cmp	r3, #4
 8004450:	d003      	beq.n	800445a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2205      	movs	r2, #5
 8004456:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	887a      	ldrh	r2, [r7, #2]
 800446a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	887a      	ldrh	r2, [r7, #2]
 8004472:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	887a      	ldrh	r2, [r7, #2]
 8004480:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	887a      	ldrh	r2, [r7, #2]
 8004486:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800449c:	d802      	bhi.n	80044a4 <HAL_SPI_TransmitReceive+0xe6>
 800449e:	8a3b      	ldrh	r3, [r7, #16]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d908      	bls.n	80044b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	e007      	b.n	80044c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b40      	cmp	r3, #64	@ 0x40
 80044d2:	d007      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044ec:	f240 8081 	bls.w	80045f2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_SPI_TransmitReceive+0x140>
 80044f8:	8a7b      	ldrh	r3, [r7, #18]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d16d      	bne.n	80045da <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	1c9a      	adds	r2, r3, #2
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004522:	e05a      	b.n	80045da <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d11b      	bne.n	800456a <HAL_SPI_TransmitReceive+0x1ac>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d016      	beq.n	800456a <HAL_SPI_TransmitReceive+0x1ac>
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	2b01      	cmp	r3, #1
 8004540:	d113      	bne.n	800456a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d11c      	bne.n	80045b2 <HAL_SPI_TransmitReceive+0x1f4>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d016      	beq.n	80045b2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	b292      	uxth	r2, r2
 8004590:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	1c9a      	adds	r2, r3, #2
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045ae:	2301      	movs	r3, #1
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045b2:	f7fe f979 	bl	80028a8 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045be:	429a      	cmp	r2, r3
 80045c0:	d80b      	bhi.n	80045da <HAL_SPI_TransmitReceive+0x21c>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d007      	beq.n	80045da <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80045d8:	e109      	b.n	80047ee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d19f      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x166>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d199      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x166>
 80045f0:	e0e3      	b.n	80047ba <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_SPI_TransmitReceive+0x244>
 80045fa:	8a7b      	ldrh	r3, [r7, #18]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 80cf 	bne.w	80047a0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d912      	bls.n	8004632 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004610:	881a      	ldrh	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	1c9a      	adds	r2, r3, #2
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b02      	subs	r3, #2
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004630:	e0b6      	b.n	80047a0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004658:	e0a2      	b.n	80047a0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d134      	bne.n	80046d2 <HAL_SPI_TransmitReceive+0x314>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d02f      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x314>
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	2b01      	cmp	r3, #1
 8004676:	d12c      	bne.n	80046d2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d912      	bls.n	80046a8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004686:	881a      	ldrh	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004692:	1c9a      	adds	r2, r3, #2
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b02      	subs	r3, #2
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046a6:	e012      	b.n	80046ce <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	7812      	ldrb	r2, [r2, #0]
 80046b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d148      	bne.n	8004772 <HAL_SPI_TransmitReceive+0x3b4>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d042      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d923      	bls.n	8004740 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	b292      	uxth	r2, r2
 8004704:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	1c9a      	adds	r2, r3, #2
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b02      	subs	r3, #2
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d81f      	bhi.n	800476e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	e016      	b.n	800476e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f103 020c 	add.w	r2, r3, #12
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800476e:	2301      	movs	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004772:	f7fe f899 	bl	80028a8 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800477e:	429a      	cmp	r2, r3
 8004780:	d803      	bhi.n	800478a <HAL_SPI_TransmitReceive+0x3cc>
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d102      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x3d2>
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800479e:	e026      	b.n	80047ee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f47f af57 	bne.w	800465a <HAL_SPI_TransmitReceive+0x29c>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f47f af50 	bne.w	800465a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f93e 	bl	8004a40 <SPI_EndRxTxTransaction>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e4:	e003      	b.n	80047ee <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80047f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3728      	adds	r7, #40	@ 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004814:	f7fe f848 	bl	80028a8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	4413      	add	r3, r2
 8004822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004824:	f7fe f840 	bl	80028a8 <HAL_GetTick>
 8004828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800482a:	4b39      	ldr	r3, [pc, #228]	@ (8004910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	015b      	lsls	r3, r3, #5
 8004830:	0d1b      	lsrs	r3, r3, #20
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800483a:	e054      	b.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004842:	d050      	beq.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004844:	f7fe f830 	bl	80028a8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	429a      	cmp	r2, r3
 8004852:	d902      	bls.n	800485a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d13d      	bne.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004872:	d111      	bne.n	8004898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487c:	d004      	beq.n	8004888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d107      	bne.n	8004898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048a0:	d10f      	bne.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e017      	b.n	8004906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	bf0c      	ite	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	2300      	movne	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	429a      	cmp	r2, r3
 8004902:	d19b      	bne.n	800483c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	2000000c 	.word	0x2000000c

08004914 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	@ 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004926:	f7fd ffbf 	bl	80028a8 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	4413      	add	r3, r2
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004936:	f7fd ffb7 	bl	80028a8 <HAL_GetTick>
 800493a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004944:	4b3d      	ldr	r3, [pc, #244]	@ (8004a3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	00da      	lsls	r2, r3, #3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	0d1b      	lsrs	r3, r3, #20
 8004954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800495c:	e060      	b.n	8004a20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004964:	d107      	bne.n	8004976 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004974:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d050      	beq.n	8004a20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800497e:	f7fd ff93 	bl	80028a8 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498a:	429a      	cmp	r2, r3
 800498c:	d902      	bls.n	8004994 <SPI_WaitFifoStateUntilTimeout+0x80>
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	d13d      	bne.n	8004a10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ac:	d111      	bne.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049b6:	d004      	beq.n	80049c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c0:	d107      	bne.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049da:	d10f      	bne.n	80049fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e010      	b.n	8004a32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d196      	bne.n	800495e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3728      	adds	r7, #40	@ 0x28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	2000000c 	.word	0x2000000c

08004a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff ff5b 	bl	8004914 <SPI_WaitFifoStateUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a68:	f043 0220 	orr.w	r2, r3, #32
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e046      	b.n	8004b02 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a74:	4b25      	ldr	r3, [pc, #148]	@ (8004b0c <SPI_EndRxTxTransaction+0xcc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a25      	ldr	r2, [pc, #148]	@ (8004b10 <SPI_EndRxTxTransaction+0xd0>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	0d5b      	lsrs	r3, r3, #21
 8004a80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a84:	fb02 f303 	mul.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a92:	d112      	bne.n	8004aba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2180      	movs	r1, #128	@ 0x80
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff feb0 	bl	8004804 <SPI_WaitFlagStateUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d016      	beq.n	8004ad8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aae:	f043 0220 	orr.w	r2, r3, #32
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e023      	b.n	8004b02 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad0:	2b80      	cmp	r3, #128	@ 0x80
 8004ad2:	d0f2      	beq.n	8004aba <SPI_EndRxTxTransaction+0x7a>
 8004ad4:	e000      	b.n	8004ad8 <SPI_EndRxTxTransaction+0x98>
        break;
 8004ad6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ff15 	bl	8004914 <SPI_WaitFifoStateUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e000      	b.n	8004b02 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	2000000c 	.word	0x2000000c
 8004b10:	165e9f81 	.word	0x165e9f81

08004b14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e049      	b.n	8004bba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fd fc00 	bl	8002340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f000 fb78 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_TIM_PWM_Start+0x24>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e03c      	b.n	8004c62 <HAL_TIM_PWM_Start+0x9e>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d109      	bne.n	8004c02 <HAL_TIM_PWM_Start+0x3e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	bf14      	ite	ne
 8004bfa:	2301      	movne	r3, #1
 8004bfc:	2300      	moveq	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	e02f      	b.n	8004c62 <HAL_TIM_PWM_Start+0x9e>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d109      	bne.n	8004c1c <HAL_TIM_PWM_Start+0x58>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e022      	b.n	8004c62 <HAL_TIM_PWM_Start+0x9e>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d109      	bne.n	8004c36 <HAL_TIM_PWM_Start+0x72>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e015      	b.n	8004c62 <HAL_TIM_PWM_Start+0x9e>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d109      	bne.n	8004c50 <HAL_TIM_PWM_Start+0x8c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	e008      	b.n	8004c62 <HAL_TIM_PWM_Start+0x9e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e092      	b.n	8004d90 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_PWM_Start+0xb6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c78:	e023      	b.n	8004cc2 <HAL_TIM_PWM_Start+0xfe>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_PWM_Start+0xc6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c88:	e01b      	b.n	8004cc2 <HAL_TIM_PWM_Start+0xfe>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d104      	bne.n	8004c9a <HAL_TIM_PWM_Start+0xd6>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c98:	e013      	b.n	8004cc2 <HAL_TIM_PWM_Start+0xfe>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_PWM_Start+0xe6>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ca8:	e00b      	b.n	8004cc2 <HAL_TIM_PWM_Start+0xfe>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_PWM_Start+0xf6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cb8:	e003      	b.n	8004cc2 <HAL_TIM_PWM_Start+0xfe>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	6839      	ldr	r1, [r7, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fdc6 	bl	800585c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a30      	ldr	r2, [pc, #192]	@ (8004d98 <HAL_TIM_PWM_Start+0x1d4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_TIM_PWM_Start+0x120>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2f      	ldr	r2, [pc, #188]	@ (8004d9c <HAL_TIM_PWM_Start+0x1d8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIM_PWM_Start+0x124>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <HAL_TIM_PWM_Start+0x126>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a25      	ldr	r2, [pc, #148]	@ (8004d98 <HAL_TIM_PWM_Start+0x1d4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d022      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x18a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d10:	d01d      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x18a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <HAL_TIM_PWM_Start+0x1dc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d018      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x18a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a20      	ldr	r2, [pc, #128]	@ (8004da4 <HAL_TIM_PWM_Start+0x1e0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x18a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004da8 <HAL_TIM_PWM_Start+0x1e4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00e      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x18a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a19      	ldr	r2, [pc, #100]	@ (8004d9c <HAL_TIM_PWM_Start+0x1d8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d009      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x18a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <HAL_TIM_PWM_Start+0x1e8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x18a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <HAL_TIM_PWM_Start+0x1ec>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d115      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	4b17      	ldr	r3, [pc, #92]	@ (8004db4 <HAL_TIM_PWM_Start+0x1f0>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b06      	cmp	r3, #6
 8004d5e:	d015      	beq.n	8004d8c <HAL_TIM_PWM_Start+0x1c8>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d66:	d011      	beq.n	8004d8c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d78:	e008      	b.n	8004d8c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e000      	b.n	8004d8e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40010400 	.word	0x40010400
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40000800 	.word	0x40000800
 8004da8:	40000c00 	.word	0x40000c00
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40001800 	.word	0x40001800
 8004db4:	00010007 	.word	0x00010007

08004db8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e08f      	b.n	8004eec <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d106      	bne.n	8004de6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7fd fa69 	bl	80022b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6899      	ldr	r1, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef4 <HAL_TIM_Encoder_Init+0x13c>)
 8004dfa:	400b      	ands	r3, r1
 8004dfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f000 fa1d 	bl	8005248 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4b31      	ldr	r3, [pc, #196]	@ (8004ef8 <HAL_TIM_Encoder_Init+0x140>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	4313      	orrs	r3, r2
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004efc <HAL_TIM_Encoder_Init+0x144>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4b2a      	ldr	r3, [pc, #168]	@ (8004f00 <HAL_TIM_Encoder_Init+0x148>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	4313      	orrs	r3, r2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	011a      	lsls	r2, r3, #4
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	031b      	lsls	r3, r3, #12
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004e8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	fffebff8 	.word	0xfffebff8
 8004ef8:	fffffcfc 	.word	0xfffffcfc
 8004efc:	fffff3f3 	.word	0xfffff3f3
 8004f00:	ffff0f0f 	.word	0xffff0f0f

08004f04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d110      	bne.n	8004f56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d102      	bne.n	8004f40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f3a:	7b7b      	ldrb	r3, [r7, #13]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d001      	beq.n	8004f44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e069      	b.n	8005018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f54:	e031      	b.n	8004fba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d110      	bne.n	8004f7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f5c:	7bbb      	ldrb	r3, [r7, #14]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f62:	7b3b      	ldrb	r3, [r7, #12]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d001      	beq.n	8004f6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e055      	b.n	8005018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f7c:	e01d      	b.n	8004fba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d108      	bne.n	8004f96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d105      	bne.n	8004f96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f8a:	7b7b      	ldrb	r3, [r7, #13]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d102      	bne.n	8004f96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f90:	7b3b      	ldrb	r3, [r7, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e03e      	b.n	8005018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_TIM_Encoder_Start+0xc4>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d008      	beq.n	8004fd8 <HAL_TIM_Encoder_Start+0xd4>
 8004fc6:	e00f      	b.n	8004fe8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fc43 	bl	800585c <TIM_CCxChannelCmd>
      break;
 8004fd6:	e016      	b.n	8005006 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	2104      	movs	r1, #4
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fc3b 	bl	800585c <TIM_CCxChannelCmd>
      break;
 8004fe6:	e00e      	b.n	8005006 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2201      	movs	r2, #1
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fc33 	bl	800585c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	2104      	movs	r1, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fc2c 	bl	800585c <TIM_CCxChannelCmd>
      break;
 8005004:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800503a:	2302      	movs	r3, #2
 800503c:	e0ff      	b.n	800523e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b14      	cmp	r3, #20
 800504a:	f200 80f0 	bhi.w	800522e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800504e:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	080050a9 	.word	0x080050a9
 8005058:	0800522f 	.word	0x0800522f
 800505c:	0800522f 	.word	0x0800522f
 8005060:	0800522f 	.word	0x0800522f
 8005064:	080050e9 	.word	0x080050e9
 8005068:	0800522f 	.word	0x0800522f
 800506c:	0800522f 	.word	0x0800522f
 8005070:	0800522f 	.word	0x0800522f
 8005074:	0800512b 	.word	0x0800512b
 8005078:	0800522f 	.word	0x0800522f
 800507c:	0800522f 	.word	0x0800522f
 8005080:	0800522f 	.word	0x0800522f
 8005084:	0800516b 	.word	0x0800516b
 8005088:	0800522f 	.word	0x0800522f
 800508c:	0800522f 	.word	0x0800522f
 8005090:	0800522f 	.word	0x0800522f
 8005094:	080051ad 	.word	0x080051ad
 8005098:	0800522f 	.word	0x0800522f
 800509c:	0800522f 	.word	0x0800522f
 80050a0:	0800522f 	.word	0x0800522f
 80050a4:	080051ed 	.word	0x080051ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f976 	bl	80053a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0208 	orr.w	r2, r2, #8
 80050c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6999      	ldr	r1, [r3, #24]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	619a      	str	r2, [r3, #24]
      break;
 80050e6:	e0a5      	b.n	8005234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f9c8 	bl	8005484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6999      	ldr	r1, [r3, #24]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	021a      	lsls	r2, r3, #8
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	619a      	str	r2, [r3, #24]
      break;
 8005128:	e084      	b.n	8005234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fa1f 	bl	8005574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0208 	orr.w	r2, r2, #8
 8005144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0204 	bic.w	r2, r2, #4
 8005154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69d9      	ldr	r1, [r3, #28]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	61da      	str	r2, [r3, #28]
      break;
 8005168:	e064      	b.n	8005234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fa75 	bl	8005660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69d9      	ldr	r1, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	021a      	lsls	r2, r3, #8
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	61da      	str	r2, [r3, #28]
      break;
 80051aa:	e043      	b.n	8005234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 faac 	bl	8005710 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0208 	orr.w	r2, r2, #8
 80051c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0204 	bic.w	r2, r2, #4
 80051d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051ea:	e023      	b.n	8005234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fade 	bl	80057b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800522c:	e002      	b.n	8005234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	75fb      	strb	r3, [r7, #23]
      break;
 8005232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800523c:	7dfb      	ldrb	r3, [r7, #23]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop

08005248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a46      	ldr	r2, [pc, #280]	@ (8005374 <TIM_Base_SetConfig+0x12c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d00f      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a43      	ldr	r2, [pc, #268]	@ (8005378 <TIM_Base_SetConfig+0x130>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a42      	ldr	r2, [pc, #264]	@ (800537c <TIM_Base_SetConfig+0x134>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a41      	ldr	r2, [pc, #260]	@ (8005380 <TIM_Base_SetConfig+0x138>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a40      	ldr	r2, [pc, #256]	@ (8005384 <TIM_Base_SetConfig+0x13c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d108      	bne.n	800529a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a35      	ldr	r2, [pc, #212]	@ (8005374 <TIM_Base_SetConfig+0x12c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a8:	d027      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a32      	ldr	r2, [pc, #200]	@ (8005378 <TIM_Base_SetConfig+0x130>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d023      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a31      	ldr	r2, [pc, #196]	@ (800537c <TIM_Base_SetConfig+0x134>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a30      	ldr	r2, [pc, #192]	@ (8005380 <TIM_Base_SetConfig+0x138>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005384 <TIM_Base_SetConfig+0x13c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d017      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005388 <TIM_Base_SetConfig+0x140>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2d      	ldr	r2, [pc, #180]	@ (800538c <TIM_Base_SetConfig+0x144>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005390 <TIM_Base_SetConfig+0x148>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005394 <TIM_Base_SetConfig+0x14c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005398 <TIM_Base_SetConfig+0x150>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a29      	ldr	r2, [pc, #164]	@ (800539c <TIM_Base_SetConfig+0x154>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a10      	ldr	r2, [pc, #64]	@ (8005374 <TIM_Base_SetConfig+0x12c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0xf8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a12      	ldr	r2, [pc, #72]	@ (8005384 <TIM_Base_SetConfig+0x13c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f023 0201 	bic.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]
  }
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40010400 	.word	0x40010400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800
 8005394:	40001800 	.word	0x40001800
 8005398:	40001c00 	.word	0x40001c00
 800539c:	40002000 	.word	0x40002000

080053a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f023 0201 	bic.w	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <TIM_OC1_SetConfig+0xd8>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f023 0302 	bic.w	r3, r3, #2
 80053e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a21      	ldr	r2, [pc, #132]	@ (800547c <TIM_OC1_SetConfig+0xdc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC1_SetConfig+0x64>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a20      	ldr	r2, [pc, #128]	@ (8005480 <TIM_OC1_SetConfig+0xe0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10c      	bne.n	800541e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0308 	bic.w	r3, r3, #8
 800540a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 0304 	bic.w	r3, r3, #4
 800541c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a16      	ldr	r2, [pc, #88]	@ (800547c <TIM_OC1_SetConfig+0xdc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_OC1_SetConfig+0x8e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <TIM_OC1_SetConfig+0xe0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d111      	bne.n	8005452 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	621a      	str	r2, [r3, #32]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	fffeff8f 	.word	0xfffeff8f
 800547c:	40010000 	.word	0x40010000
 8005480:	40010400 	.word	0x40010400

08005484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f023 0210 	bic.w	r2, r3, #16
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4b2e      	ldr	r3, [pc, #184]	@ (8005568 <TIM_OC2_SetConfig+0xe4>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0320 	bic.w	r3, r3, #32
 80054ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a23      	ldr	r2, [pc, #140]	@ (800556c <TIM_OC2_SetConfig+0xe8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_OC2_SetConfig+0x68>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a22      	ldr	r2, [pc, #136]	@ (8005570 <TIM_OC2_SetConfig+0xec>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d10d      	bne.n	8005508 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005506:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a18      	ldr	r2, [pc, #96]	@ (800556c <TIM_OC2_SetConfig+0xe8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_OC2_SetConfig+0x94>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <TIM_OC2_SetConfig+0xec>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d113      	bne.n	8005540 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800551e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	feff8fff 	.word	0xfeff8fff
 800556c:	40010000 	.word	0x40010000
 8005570:	40010400 	.word	0x40010400

08005574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4b2d      	ldr	r3, [pc, #180]	@ (8005654 <TIM_OC3_SetConfig+0xe0>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0303 	bic.w	r3, r3, #3
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a22      	ldr	r2, [pc, #136]	@ (8005658 <TIM_OC3_SetConfig+0xe4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_OC3_SetConfig+0x66>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a21      	ldr	r2, [pc, #132]	@ (800565c <TIM_OC3_SetConfig+0xe8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d10d      	bne.n	80055f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a17      	ldr	r2, [pc, #92]	@ (8005658 <TIM_OC3_SetConfig+0xe4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_OC3_SetConfig+0x92>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a16      	ldr	r2, [pc, #88]	@ (800565c <TIM_OC3_SetConfig+0xe8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d113      	bne.n	800562e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	fffeff8f 	.word	0xfffeff8f
 8005658:	40010000 	.word	0x40010000
 800565c:	40010400 	.word	0x40010400

08005660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4b1e      	ldr	r3, [pc, #120]	@ (8005704 <TIM_OC4_SetConfig+0xa4>)
 800568c:	4013      	ands	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	031b      	lsls	r3, r3, #12
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a13      	ldr	r2, [pc, #76]	@ (8005708 <TIM_OC4_SetConfig+0xa8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_OC4_SetConfig+0x68>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a12      	ldr	r2, [pc, #72]	@ (800570c <TIM_OC4_SetConfig+0xac>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d109      	bne.n	80056dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	019b      	lsls	r3, r3, #6
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	feff8fff 	.word	0xfeff8fff
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <TIM_OC5_SetConfig+0x98>)
 800573c:	4013      	ands	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005750:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a12      	ldr	r2, [pc, #72]	@ (80057ac <TIM_OC5_SetConfig+0x9c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC5_SetConfig+0x5e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a11      	ldr	r2, [pc, #68]	@ (80057b0 <TIM_OC5_SetConfig+0xa0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d109      	bne.n	8005782 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005774:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	fffeff8f 	.word	0xfffeff8f
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40010400 	.word	0x40010400

080057b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4b1c      	ldr	r3, [pc, #112]	@ (8005850 <TIM_OC6_SetConfig+0x9c>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	051b      	lsls	r3, r3, #20
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	4313      	orrs	r3, r2
 8005802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a13      	ldr	r2, [pc, #76]	@ (8005854 <TIM_OC6_SetConfig+0xa0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC6_SetConfig+0x60>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a12      	ldr	r2, [pc, #72]	@ (8005858 <TIM_OC6_SetConfig+0xa4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d109      	bne.n	8005828 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	feff8fff 	.word	0xfeff8fff
 8005854:	40010000 	.word	0x40010000
 8005858:	40010400 	.word	0x40010400

0800585c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	2201      	movs	r2, #1
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1a      	ldr	r2, [r3, #32]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	43db      	mvns	r3, r3
 800587e:	401a      	ands	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1a      	ldr	r2, [r3, #32]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058bc:	2302      	movs	r3, #2
 80058be:	e06d      	b.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a30      	ldr	r2, [pc, #192]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d108      	bne.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a20      	ldr	r2, [pc, #128]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005932:	d01d      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1d      	ldr	r2, [pc, #116]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1c      	ldr	r2, [pc, #112]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1a      	ldr	r2, [pc, #104]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a15      	ldr	r2, [pc, #84]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a16      	ldr	r2, [pc, #88]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10c      	bne.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005976:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4313      	orrs	r3, r2
 8005980:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40010400 	.word	0x40010400
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40001800 	.word	0x40001800

080059c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e040      	b.n	8005a58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fc fd02 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2224      	movs	r2, #36	@ 0x24
 80059f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fb70 	bl	80060f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f909 	bl	8005c28 <UART_SetConfig>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e01b      	b.n	8005a58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fbef 	bl	8006234 <UART_CheckIdleState>
 8005a56:	4603      	mov	r3, r0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	@ 0x28
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d177      	bne.n	8005b68 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_UART_Transmit+0x24>
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e070      	b.n	8005b6a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2221      	movs	r2, #33	@ 0x21
 8005a94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a96:	f7fc ff07 	bl	80028a8 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab4:	d108      	bne.n	8005ac8 <HAL_UART_Transmit+0x68>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e003      	b.n	8005ad0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ad0:	e02f      	b.n	8005b32 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2180      	movs	r1, #128	@ 0x80
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fc00 	bl	80062e2 <UART_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e03b      	b.n	8005b6a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	3302      	adds	r3, #2
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	e007      	b.n	8005b20 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1c9      	bne.n	8005ad2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2140      	movs	r1, #64	@ 0x40
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fbca 	bl	80062e2 <UART_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e005      	b.n	8005b6a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e000      	b.n	8005b6a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b68:	2302      	movs	r3, #2
  }
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b08a      	sub	sp, #40	@ 0x28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d132      	bne.n	8005bf0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_UART_Receive_IT+0x24>
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e02b      	b.n	8005bf2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d018      	beq.n	8005be0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	613b      	str	r3, [r7, #16]
   return(result);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	623b      	str	r3, [r7, #32]
 8005bce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	69f9      	ldr	r1, [r7, #28]
 8005bd2:	6a3a      	ldr	r2, [r7, #32]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e6      	bne.n	8005bae <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	461a      	mov	r2, r3
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fbe8 	bl	80063bc <UART_Start_Receive_IT>
 8005bec:	4603      	mov	r3, r0
 8005bee:	e000      	b.n	8005bf2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3728      	adds	r7, #40	@ 0x28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4ba6      	ldr	r3, [pc, #664]	@ (8005eec <UART_SetConfig+0x2c4>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	6979      	ldr	r1, [r7, #20]
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a94      	ldr	r2, [pc, #592]	@ (8005ef0 <UART_SetConfig+0x2c8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d120      	bne.n	8005ce6 <UART_SetConfig+0xbe>
 8005ca4:	4b93      	ldr	r3, [pc, #588]	@ (8005ef4 <UART_SetConfig+0x2cc>)
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d816      	bhi.n	8005ce0 <UART_SetConfig+0xb8>
 8005cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb8 <UART_SetConfig+0x90>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cd5 	.word	0x08005cd5
 8005cc0:	08005ccf 	.word	0x08005ccf
 8005cc4:	08005cdb 	.word	0x08005cdb
 8005cc8:	2301      	movs	r3, #1
 8005cca:	77fb      	strb	r3, [r7, #31]
 8005ccc:	e150      	b.n	8005f70 <UART_SetConfig+0x348>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	77fb      	strb	r3, [r7, #31]
 8005cd2:	e14d      	b.n	8005f70 <UART_SetConfig+0x348>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	e14a      	b.n	8005f70 <UART_SetConfig+0x348>
 8005cda:	2308      	movs	r3, #8
 8005cdc:	77fb      	strb	r3, [r7, #31]
 8005cde:	e147      	b.n	8005f70 <UART_SetConfig+0x348>
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e144      	b.n	8005f70 <UART_SetConfig+0x348>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a83      	ldr	r2, [pc, #524]	@ (8005ef8 <UART_SetConfig+0x2d0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d132      	bne.n	8005d56 <UART_SetConfig+0x12e>
 8005cf0:	4b80      	ldr	r3, [pc, #512]	@ (8005ef4 <UART_SetConfig+0x2cc>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf6:	f003 030c 	and.w	r3, r3, #12
 8005cfa:	2b0c      	cmp	r3, #12
 8005cfc:	d828      	bhi.n	8005d50 <UART_SetConfig+0x128>
 8005cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <UART_SetConfig+0xdc>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d51 	.word	0x08005d51
 8005d0c:	08005d51 	.word	0x08005d51
 8005d10:	08005d51 	.word	0x08005d51
 8005d14:	08005d45 	.word	0x08005d45
 8005d18:	08005d51 	.word	0x08005d51
 8005d1c:	08005d51 	.word	0x08005d51
 8005d20:	08005d51 	.word	0x08005d51
 8005d24:	08005d3f 	.word	0x08005d3f
 8005d28:	08005d51 	.word	0x08005d51
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d51 	.word	0x08005d51
 8005d34:	08005d4b 	.word	0x08005d4b
 8005d38:	2300      	movs	r3, #0
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e118      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e115      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d44:	2304      	movs	r3, #4
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e112      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e10f      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d50:	2310      	movs	r3, #16
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e10c      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a68      	ldr	r2, [pc, #416]	@ (8005efc <UART_SetConfig+0x2d4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d120      	bne.n	8005da2 <UART_SetConfig+0x17a>
 8005d60:	4b64      	ldr	r3, [pc, #400]	@ (8005ef4 <UART_SetConfig+0x2cc>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d6a:	2b30      	cmp	r3, #48	@ 0x30
 8005d6c:	d013      	beq.n	8005d96 <UART_SetConfig+0x16e>
 8005d6e:	2b30      	cmp	r3, #48	@ 0x30
 8005d70:	d814      	bhi.n	8005d9c <UART_SetConfig+0x174>
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d009      	beq.n	8005d8a <UART_SetConfig+0x162>
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d810      	bhi.n	8005d9c <UART_SetConfig+0x174>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <UART_SetConfig+0x15c>
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d006      	beq.n	8005d90 <UART_SetConfig+0x168>
 8005d82:	e00b      	b.n	8005d9c <UART_SetConfig+0x174>
 8005d84:	2300      	movs	r3, #0
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e0f2      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	77fb      	strb	r3, [r7, #31]
 8005d8e:	e0ef      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d90:	2304      	movs	r3, #4
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e0ec      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d96:	2308      	movs	r3, #8
 8005d98:	77fb      	strb	r3, [r7, #31]
 8005d9a:	e0e9      	b.n	8005f70 <UART_SetConfig+0x348>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e0e6      	b.n	8005f70 <UART_SetConfig+0x348>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a56      	ldr	r2, [pc, #344]	@ (8005f00 <UART_SetConfig+0x2d8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d120      	bne.n	8005dee <UART_SetConfig+0x1c6>
 8005dac:	4b51      	ldr	r3, [pc, #324]	@ (8005ef4 <UART_SetConfig+0x2cc>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005db8:	d013      	beq.n	8005de2 <UART_SetConfig+0x1ba>
 8005dba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dbc:	d814      	bhi.n	8005de8 <UART_SetConfig+0x1c0>
 8005dbe:	2b80      	cmp	r3, #128	@ 0x80
 8005dc0:	d009      	beq.n	8005dd6 <UART_SetConfig+0x1ae>
 8005dc2:	2b80      	cmp	r3, #128	@ 0x80
 8005dc4:	d810      	bhi.n	8005de8 <UART_SetConfig+0x1c0>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <UART_SetConfig+0x1a8>
 8005dca:	2b40      	cmp	r3, #64	@ 0x40
 8005dcc:	d006      	beq.n	8005ddc <UART_SetConfig+0x1b4>
 8005dce:	e00b      	b.n	8005de8 <UART_SetConfig+0x1c0>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e0cc      	b.n	8005f70 <UART_SetConfig+0x348>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	77fb      	strb	r3, [r7, #31]
 8005dda:	e0c9      	b.n	8005f70 <UART_SetConfig+0x348>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	77fb      	strb	r3, [r7, #31]
 8005de0:	e0c6      	b.n	8005f70 <UART_SetConfig+0x348>
 8005de2:	2308      	movs	r3, #8
 8005de4:	77fb      	strb	r3, [r7, #31]
 8005de6:	e0c3      	b.n	8005f70 <UART_SetConfig+0x348>
 8005de8:	2310      	movs	r3, #16
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e0c0      	b.n	8005f70 <UART_SetConfig+0x348>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a44      	ldr	r2, [pc, #272]	@ (8005f04 <UART_SetConfig+0x2dc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d125      	bne.n	8005e44 <UART_SetConfig+0x21c>
 8005df8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ef4 <UART_SetConfig+0x2cc>)
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e06:	d017      	beq.n	8005e38 <UART_SetConfig+0x210>
 8005e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e0c:	d817      	bhi.n	8005e3e <UART_SetConfig+0x216>
 8005e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e12:	d00b      	beq.n	8005e2c <UART_SetConfig+0x204>
 8005e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e18:	d811      	bhi.n	8005e3e <UART_SetConfig+0x216>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <UART_SetConfig+0x1fe>
 8005e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e22:	d006      	beq.n	8005e32 <UART_SetConfig+0x20a>
 8005e24:	e00b      	b.n	8005e3e <UART_SetConfig+0x216>
 8005e26:	2300      	movs	r3, #0
 8005e28:	77fb      	strb	r3, [r7, #31]
 8005e2a:	e0a1      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e09e      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e32:	2304      	movs	r3, #4
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	e09b      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e38:	2308      	movs	r3, #8
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e098      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e3e:	2310      	movs	r3, #16
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e095      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2f      	ldr	r2, [pc, #188]	@ (8005f08 <UART_SetConfig+0x2e0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d125      	bne.n	8005e9a <UART_SetConfig+0x272>
 8005e4e:	4b29      	ldr	r3, [pc, #164]	@ (8005ef4 <UART_SetConfig+0x2cc>)
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e5c:	d017      	beq.n	8005e8e <UART_SetConfig+0x266>
 8005e5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e62:	d817      	bhi.n	8005e94 <UART_SetConfig+0x26c>
 8005e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e68:	d00b      	beq.n	8005e82 <UART_SetConfig+0x25a>
 8005e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e6e:	d811      	bhi.n	8005e94 <UART_SetConfig+0x26c>
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <UART_SetConfig+0x254>
 8005e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e78:	d006      	beq.n	8005e88 <UART_SetConfig+0x260>
 8005e7a:	e00b      	b.n	8005e94 <UART_SetConfig+0x26c>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	77fb      	strb	r3, [r7, #31]
 8005e80:	e076      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e82:	2302      	movs	r3, #2
 8005e84:	77fb      	strb	r3, [r7, #31]
 8005e86:	e073      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e070      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e8e:	2308      	movs	r3, #8
 8005e90:	77fb      	strb	r3, [r7, #31]
 8005e92:	e06d      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e94:	2310      	movs	r3, #16
 8005e96:	77fb      	strb	r3, [r7, #31]
 8005e98:	e06a      	b.n	8005f70 <UART_SetConfig+0x348>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f0c <UART_SetConfig+0x2e4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d138      	bne.n	8005f16 <UART_SetConfig+0x2ee>
 8005ea4:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <UART_SetConfig+0x2cc>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eaa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005eae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eb2:	d017      	beq.n	8005ee4 <UART_SetConfig+0x2bc>
 8005eb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eb8:	d82a      	bhi.n	8005f10 <UART_SetConfig+0x2e8>
 8005eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ebe:	d00b      	beq.n	8005ed8 <UART_SetConfig+0x2b0>
 8005ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec4:	d824      	bhi.n	8005f10 <UART_SetConfig+0x2e8>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <UART_SetConfig+0x2aa>
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ece:	d006      	beq.n	8005ede <UART_SetConfig+0x2b6>
 8005ed0:	e01e      	b.n	8005f10 <UART_SetConfig+0x2e8>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	77fb      	strb	r3, [r7, #31]
 8005ed6:	e04b      	b.n	8005f70 <UART_SetConfig+0x348>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	77fb      	strb	r3, [r7, #31]
 8005edc:	e048      	b.n	8005f70 <UART_SetConfig+0x348>
 8005ede:	2304      	movs	r3, #4
 8005ee0:	77fb      	strb	r3, [r7, #31]
 8005ee2:	e045      	b.n	8005f70 <UART_SetConfig+0x348>
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	77fb      	strb	r3, [r7, #31]
 8005ee8:	e042      	b.n	8005f70 <UART_SetConfig+0x348>
 8005eea:	bf00      	nop
 8005eec:	efff69f3 	.word	0xefff69f3
 8005ef0:	40011000 	.word	0x40011000
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	40004400 	.word	0x40004400
 8005efc:	40004800 	.word	0x40004800
 8005f00:	40004c00 	.word	0x40004c00
 8005f04:	40005000 	.word	0x40005000
 8005f08:	40011400 	.word	0x40011400
 8005f0c:	40007800 	.word	0x40007800
 8005f10:	2310      	movs	r3, #16
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e02c      	b.n	8005f70 <UART_SetConfig+0x348>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a72      	ldr	r2, [pc, #456]	@ (80060e4 <UART_SetConfig+0x4bc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d125      	bne.n	8005f6c <UART_SetConfig+0x344>
 8005f20:	4b71      	ldr	r3, [pc, #452]	@ (80060e8 <UART_SetConfig+0x4c0>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f2a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f2e:	d017      	beq.n	8005f60 <UART_SetConfig+0x338>
 8005f30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f34:	d817      	bhi.n	8005f66 <UART_SetConfig+0x33e>
 8005f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f3a:	d00b      	beq.n	8005f54 <UART_SetConfig+0x32c>
 8005f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f40:	d811      	bhi.n	8005f66 <UART_SetConfig+0x33e>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <UART_SetConfig+0x326>
 8005f46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f4a:	d006      	beq.n	8005f5a <UART_SetConfig+0x332>
 8005f4c:	e00b      	b.n	8005f66 <UART_SetConfig+0x33e>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	77fb      	strb	r3, [r7, #31]
 8005f52:	e00d      	b.n	8005f70 <UART_SetConfig+0x348>
 8005f54:	2302      	movs	r3, #2
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e00a      	b.n	8005f70 <UART_SetConfig+0x348>
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e007      	b.n	8005f70 <UART_SetConfig+0x348>
 8005f60:	2308      	movs	r3, #8
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e004      	b.n	8005f70 <UART_SetConfig+0x348>
 8005f66:	2310      	movs	r3, #16
 8005f68:	77fb      	strb	r3, [r7, #31]
 8005f6a:	e001      	b.n	8005f70 <UART_SetConfig+0x348>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f78:	d15b      	bne.n	8006032 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f7a:	7ffb      	ldrb	r3, [r7, #31]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d828      	bhi.n	8005fd2 <UART_SetConfig+0x3aa>
 8005f80:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <UART_SetConfig+0x360>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	08005fd3 	.word	0x08005fd3
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fd3 	.word	0x08005fd3
 8005fa0:	08005fd3 	.word	0x08005fd3
 8005fa4:	08005fd3 	.word	0x08005fd3
 8005fa8:	08005fcb 	.word	0x08005fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fac:	f7fd fd44 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8005fb0:	61b8      	str	r0, [r7, #24]
        break;
 8005fb2:	e013      	b.n	8005fdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb4:	f7fd fd54 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8005fb8:	61b8      	str	r0, [r7, #24]
        break;
 8005fba:	e00f      	b.n	8005fdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80060ec <UART_SetConfig+0x4c4>)
 8005fbe:	61bb      	str	r3, [r7, #24]
        break;
 8005fc0:	e00c      	b.n	8005fdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc2:	f7fd fc27 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 8005fc6:	61b8      	str	r0, [r7, #24]
        break;
 8005fc8:	e008      	b.n	8005fdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fce:	61bb      	str	r3, [r7, #24]
        break;
 8005fd0:	e004      	b.n	8005fdc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	77bb      	strb	r3, [r7, #30]
        break;
 8005fda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d074      	beq.n	80060cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	005a      	lsls	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	441a      	add	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	2b0f      	cmp	r3, #15
 8005ffc:	d916      	bls.n	800602c <UART_SetConfig+0x404>
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006004:	d212      	bcs.n	800602c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f023 030f 	bic.w	r3, r3, #15
 800600e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	b29b      	uxth	r3, r3
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	b29a      	uxth	r2, r3
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	4313      	orrs	r3, r2
 8006020:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	89fa      	ldrh	r2, [r7, #14]
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	e04f      	b.n	80060cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	77bb      	strb	r3, [r7, #30]
 8006030:	e04c      	b.n	80060cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006032:	7ffb      	ldrb	r3, [r7, #31]
 8006034:	2b08      	cmp	r3, #8
 8006036:	d828      	bhi.n	800608a <UART_SetConfig+0x462>
 8006038:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <UART_SetConfig+0x418>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	08006065 	.word	0x08006065
 8006044:	0800606d 	.word	0x0800606d
 8006048:	08006075 	.word	0x08006075
 800604c:	0800608b 	.word	0x0800608b
 8006050:	0800607b 	.word	0x0800607b
 8006054:	0800608b 	.word	0x0800608b
 8006058:	0800608b 	.word	0x0800608b
 800605c:	0800608b 	.word	0x0800608b
 8006060:	08006083 	.word	0x08006083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006064:	f7fd fce8 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 8006068:	61b8      	str	r0, [r7, #24]
        break;
 800606a:	e013      	b.n	8006094 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800606c:	f7fd fcf8 	bl	8003a60 <HAL_RCC_GetPCLK2Freq>
 8006070:	61b8      	str	r0, [r7, #24]
        break;
 8006072:	e00f      	b.n	8006094 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006074:	4b1d      	ldr	r3, [pc, #116]	@ (80060ec <UART_SetConfig+0x4c4>)
 8006076:	61bb      	str	r3, [r7, #24]
        break;
 8006078:	e00c      	b.n	8006094 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607a:	f7fd fbcb 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 800607e:	61b8      	str	r0, [r7, #24]
        break;
 8006080:	e008      	b.n	8006094 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006086:	61bb      	str	r3, [r7, #24]
        break;
 8006088:	e004      	b.n	8006094 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	77bb      	strb	r3, [r7, #30]
        break;
 8006092:	bf00      	nop
    }

    if (pclk != 0U)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d018      	beq.n	80060cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	085a      	lsrs	r2, r3, #1
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	441a      	add	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b0f      	cmp	r3, #15
 80060b2:	d909      	bls.n	80060c8 <UART_SetConfig+0x4a0>
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ba:	d205      	bcs.n	80060c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	e001      	b.n	80060cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80060d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40007c00 	.word	0x40007c00
 80060e8:	40023800 	.word	0x40023800
 80060ec:	00f42400 	.word	0x00f42400

080060f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00a      	beq.n	800615e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01a      	beq.n	8006206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ee:	d10a      	bne.n	8006206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	605a      	str	r2, [r3, #4]
  }
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	@ 0x30
 8006238:	af02      	add	r7, sp, #8
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006244:	f7fc fb30 	bl	80028a8 <HAL_GetTick>
 8006248:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b08      	cmp	r3, #8
 8006256:	d12e      	bne.n	80062b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006258:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	2200      	movs	r2, #0
 8006262:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f83b 	bl	80062e2 <UART_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d021      	beq.n	80062b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006286:	623b      	str	r3, [r7, #32]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	61fb      	str	r3, [r7, #28]
 8006292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	69b9      	ldr	r1, [r7, #24]
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	617b      	str	r3, [r7, #20]
   return(result);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e6      	bne.n	8006272 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e011      	b.n	80062da <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3728      	adds	r7, #40	@ 0x28
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	4613      	mov	r3, r2
 80062f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f2:	e04f      	b.n	8006394 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d04b      	beq.n	8006394 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fc:	f7fc fad4 	bl	80028a8 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	d302      	bcc.n	8006312 <UART_WaitOnFlagUntilTimeout+0x30>
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e04e      	b.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d037      	beq.n	8006394 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b80      	cmp	r3, #128	@ 0x80
 8006328:	d034      	beq.n	8006394 <UART_WaitOnFlagUntilTimeout+0xb2>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b40      	cmp	r3, #64	@ 0x40
 800632e:	d031      	beq.n	8006394 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b08      	cmp	r3, #8
 800633c:	d110      	bne.n	8006360 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2208      	movs	r2, #8
 8006344:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f8fe 	bl	8006548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2208      	movs	r2, #8
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e029      	b.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800636e:	d111      	bne.n	8006394 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006378:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f8e4 	bl	8006548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e00f      	b.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69da      	ldr	r2, [r3, #28]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4013      	ands	r3, r2
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d0a0      	beq.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063bc:	b480      	push	{r7}
 80063be:	b097      	sub	sp, #92	@ 0x5c
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	88fa      	ldrh	r2, [r7, #6]
 80063d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ee:	d10e      	bne.n	800640e <UART_Start_Receive_IT+0x52>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d105      	bne.n	8006404 <UART_Start_Receive_IT+0x48>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80063fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006402:	e02d      	b.n	8006460 <UART_Start_Receive_IT+0xa4>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	22ff      	movs	r2, #255	@ 0xff
 8006408:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800640c:	e028      	b.n	8006460 <UART_Start_Receive_IT+0xa4>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10d      	bne.n	8006432 <UART_Start_Receive_IT+0x76>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <UART_Start_Receive_IT+0x6c>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	22ff      	movs	r2, #255	@ 0xff
 8006422:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006426:	e01b      	b.n	8006460 <UART_Start_Receive_IT+0xa4>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	227f      	movs	r2, #127	@ 0x7f
 800642c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006430:	e016      	b.n	8006460 <UART_Start_Receive_IT+0xa4>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800643a:	d10d      	bne.n	8006458 <UART_Start_Receive_IT+0x9c>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <UART_Start_Receive_IT+0x92>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	227f      	movs	r2, #127	@ 0x7f
 8006448:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800644c:	e008      	b.n	8006460 <UART_Start_Receive_IT+0xa4>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	223f      	movs	r2, #63	@ 0x3f
 8006452:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006456:	e003      	b.n	8006460 <UART_Start_Receive_IT+0xa4>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2222      	movs	r2, #34	@ 0x22
 800646c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3308      	adds	r3, #8
 8006476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	657b      	str	r3, [r7, #84]	@ 0x54
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3308      	adds	r3, #8
 800648e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006490:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006492:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006496:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800649e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e5      	bne.n	8006470 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ac:	d107      	bne.n	80064be <UART_Start_Receive_IT+0x102>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a21      	ldr	r2, [pc, #132]	@ (8006540 <UART_Start_Receive_IT+0x184>)
 80064ba:	669a      	str	r2, [r3, #104]	@ 0x68
 80064bc:	e002      	b.n	80064c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a20      	ldr	r2, [pc, #128]	@ (8006544 <UART_Start_Receive_IT+0x188>)
 80064c2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d019      	beq.n	8006500 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80064e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80064ec:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e6      	bne.n	80064cc <UART_Start_Receive_IT+0x110>
 80064fe:	e018      	b.n	8006532 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	613b      	str	r3, [r7, #16]
   return(result);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f043 0320 	orr.w	r3, r3, #32
 8006514:	653b      	str	r3, [r7, #80]	@ 0x50
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	69f9      	ldr	r1, [r7, #28]
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	61bb      	str	r3, [r7, #24]
   return(result);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e6      	bne.n	8006500 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	375c      	adds	r7, #92	@ 0x5c
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	080067b9 	.word	0x080067b9
 8006544:	08006611 	.word	0x08006611

08006548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b095      	sub	sp, #84	@ 0x54
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800656e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006570:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006574:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800657c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e6      	bne.n	8006550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3308      	adds	r3, #8
 8006588:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	61fb      	str	r3, [r7, #28]
   return(result);
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	f023 0301 	bic.w	r3, r3, #1
 8006598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e5      	bne.n	8006582 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d118      	bne.n	80065f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f023 0310 	bic.w	r3, r3, #16
 80065d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6979      	ldr	r1, [r7, #20]
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006604:	bf00      	nop
 8006606:	3754      	adds	r7, #84	@ 0x54
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b09c      	sub	sp, #112	@ 0x70
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800661e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006628:	2b22      	cmp	r3, #34	@ 0x22
 800662a:	f040 80b9 	bne.w	80067a0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006638:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800663c:	b2d9      	uxtb	r1, r3
 800663e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006642:	b2da      	uxtb	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006648:	400a      	ands	r2, r1
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	f040 809c 	bne.w	80067b0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800668c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006696:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006698:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800669c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e6      	bne.n	8006678 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3308      	adds	r3, #8
 80066b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066bc:	f023 0301 	bic.w	r3, r3, #1
 80066c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80066ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80066cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e5      	bne.n	80066aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d018      	beq.n	8006732 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	623b      	str	r3, [r7, #32]
   return(result);
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006714:	663b      	str	r3, [r7, #96]	@ 0x60
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800671e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006720:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800672c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e6      	bne.n	8006700 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006736:	2b01      	cmp	r3, #1
 8006738:	d12e      	bne.n	8006798 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	60fb      	str	r3, [r7, #12]
   return(result);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 0310 	bic.w	r3, r3, #16
 8006754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	69b9      	ldr	r1, [r7, #24]
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	617b      	str	r3, [r7, #20]
   return(result);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e6      	bne.n	8006740 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b10      	cmp	r3, #16
 800677e:	d103      	bne.n	8006788 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2210      	movs	r2, #16
 8006786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff fa3c 	bl	8005c0e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006796:	e00b      	b.n	80067b0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fa2e 	bl	8005bfa <HAL_UART_RxCpltCallback>
}
 800679e:	e007      	b.n	80067b0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0208 	orr.w	r2, r2, #8
 80067ae:	619a      	str	r2, [r3, #24]
}
 80067b0:	bf00      	nop
 80067b2:	3770      	adds	r7, #112	@ 0x70
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b09c      	sub	sp, #112	@ 0x70
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d0:	2b22      	cmp	r3, #34	@ 0x22
 80067d2:	f040 80b9 	bne.w	8006948 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80067e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80067ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067ee:	4013      	ands	r3, r2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fa:	1c9a      	adds	r2, r3, #2
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006806:	b29b      	uxth	r3, r3
 8006808:	3b01      	subs	r3, #1
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	f040 809c 	bne.w	8006958 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800682e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006834:	667b      	str	r3, [r7, #100]	@ 0x64
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800683e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006840:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006844:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800684c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e6      	bne.n	8006820 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	663b      	str	r3, [r7, #96]	@ 0x60
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006872:	643a      	str	r2, [r7, #64]	@ 0x40
 8006874:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e5      	bne.n	8006852 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d018      	beq.n	80068da <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d12e      	bne.n	8006940 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f023 0310 	bic.w	r3, r3, #16
 80068fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6979      	ldr	r1, [r7, #20]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	613b      	str	r3, [r7, #16]
   return(result);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e6      	bne.n	80068e8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b10      	cmp	r3, #16
 8006926:	d103      	bne.n	8006930 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2210      	movs	r2, #16
 800692e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff f968 	bl	8005c0e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800693e:	e00b      	b.n	8006958 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff f95a 	bl	8005bfa <HAL_UART_RxCpltCallback>
}
 8006946:	e007      	b.n	8006958 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f042 0208 	orr.w	r2, r2, #8
 8006956:	619a      	str	r2, [r3, #24]
}
 8006958:	bf00      	nop
 800695a:	3770      	adds	r7, #112	@ 0x70
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006960:	b084      	sub	sp, #16
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	f107 001c 	add.w	r0, r7, #28
 800696e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006972:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006976:	2b01      	cmp	r3, #1
 8006978:	d121      	bne.n	80069be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	4b21      	ldr	r3, [pc, #132]	@ (8006a10 <USB_CoreInit+0xb0>)
 800698c:	4013      	ands	r3, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800699e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d105      	bne.n	80069b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa92 	bl	8006edc <USB_CoreReset>
 80069b8:	4603      	mov	r3, r0
 80069ba:	73fb      	strb	r3, [r7, #15]
 80069bc:	e010      	b.n	80069e0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa86 	bl	8006edc <USB_CoreReset>
 80069d0:	4603      	mov	r3, r0
 80069d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80069e0:	7fbb      	ldrb	r3, [r7, #30]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d10b      	bne.n	80069fe <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f043 0206 	orr.w	r2, r3, #6
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f043 0220 	orr.w	r2, r3, #32
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a0a:	b004      	add	sp, #16
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	ffbdffbf 	.word	0xffbdffbf

08006a14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f023 0201 	bic.w	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d115      	bne.n	8006a84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a64:	200a      	movs	r0, #10
 8006a66:	f7fb ff2b 	bl	80028c0 <HAL_Delay>
      ms += 10U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	330a      	adds	r3, #10
 8006a6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fa25 	bl	8006ec0 <USB_GetMode>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d01e      	beq.n	8006aba <USB_SetCurrentMode+0x84>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a80:	d9f0      	bls.n	8006a64 <USB_SetCurrentMode+0x2e>
 8006a82:	e01a      	b.n	8006aba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d115      	bne.n	8006ab6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a96:	200a      	movs	r0, #10
 8006a98:	f7fb ff12 	bl	80028c0 <HAL_Delay>
      ms += 10U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	330a      	adds	r3, #10
 8006aa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa0c 	bl	8006ec0 <USB_GetMode>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d005      	beq.n	8006aba <USB_SetCurrentMode+0x84>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ab2:	d9f0      	bls.n	8006a96 <USB_SetCurrentMode+0x60>
 8006ab4:	e001      	b.n	8006aba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e005      	b.n	8006ac6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2bc8      	cmp	r3, #200	@ 0xc8
 8006abe:	d101      	bne.n	8006ac4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b086      	sub	sp, #24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	e009      	b.n	8006b04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	3340      	adds	r3, #64	@ 0x40
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	2200      	movs	r2, #0
 8006afc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3301      	adds	r3, #1
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b0e      	cmp	r3, #14
 8006b08:	d9f2      	bls.n	8006af0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d11c      	bne.n	8006b4c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b20:	f043 0302 	orr.w	r3, r3, #2
 8006b24:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	e005      	b.n	8006b58 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b5e:	461a      	mov	r2, r3
 8006b60:	2300      	movs	r3, #0
 8006b62:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d10d      	bne.n	8006b88 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b74:	2100      	movs	r1, #0
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f968 	bl	8006e4c <USB_SetDevSpeed>
 8006b7c:	e008      	b.n	8006b90 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b7e:	2101      	movs	r1, #1
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f963 	bl	8006e4c <USB_SetDevSpeed>
 8006b86:	e003      	b.n	8006b90 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b88:	2103      	movs	r1, #3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f95e 	bl	8006e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b90:	2110      	movs	r1, #16
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f8fa 	bl	8006d8c <USB_FlushTxFifo>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f924 	bl	8006df0 <USB_FlushRxFifo>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb8:	461a      	mov	r2, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	e043      	b.n	8006c64 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bf2:	d118      	bne.n	8006c26 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c06:	461a      	mov	r2, r3
 8006c08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	e013      	b.n	8006c38 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	e008      	b.n	8006c38 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c32:	461a      	mov	r2, r3
 8006c34:	2300      	movs	r3, #0
 8006c36:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c44:	461a      	mov	r2, r3
 8006c46:	2300      	movs	r3, #0
 8006c48:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c56:	461a      	mov	r2, r3
 8006c58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	3301      	adds	r3, #1
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c68:	461a      	mov	r2, r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d3b5      	bcc.n	8006bdc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	e043      	b.n	8006cfe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c8c:	d118      	bne.n	8006cc0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	e013      	b.n	8006cd2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	e008      	b.n	8006cd2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ccc:	461a      	mov	r2, r3
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cde:	461a      	mov	r2, r3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d02:	461a      	mov	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d3b5      	bcc.n	8006c76 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d105      	bne.n	8006d40 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f043 0210 	orr.w	r2, r3, #16
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	4b0f      	ldr	r3, [pc, #60]	@ (8006d84 <USB_DevInit+0x2b4>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f043 0208 	orr.w	r2, r3, #8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d105      	bne.n	8006d74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <USB_DevInit+0x2b8>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d80:	b004      	add	sp, #16
 8006d82:	4770      	bx	lr
 8006d84:	803c3800 	.word	0x803c3800
 8006d88:	40000004 	.word	0x40000004

08006d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006da6:	d901      	bls.n	8006dac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e01b      	b.n	8006de4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	daf2      	bge.n	8006d9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	019b      	lsls	r3, r3, #6
 8006dbc:	f043 0220 	orr.w	r2, r3, #32
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dd0:	d901      	bls.n	8006dd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e006      	b.n	8006de4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d0f0      	beq.n	8006dc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e08:	d901      	bls.n	8006e0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e018      	b.n	8006e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	daf2      	bge.n	8006dfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2210      	movs	r2, #16
 8006e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e2c:	d901      	bls.n	8006e32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e006      	b.n	8006e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d0f0      	beq.n	8006e20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e98:	f023 0303 	bic.w	r3, r3, #3
 8006e9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006eac:	f043 0302 	orr.w	r3, r3, #2
 8006eb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ef4:	d901      	bls.n	8006efa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e01b      	b.n	8006f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	daf2      	bge.n	8006ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f043 0201 	orr.w	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f1e:	d901      	bls.n	8006f24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e006      	b.n	8006f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d0f0      	beq.n	8006f12 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
	...

08006f40 <arm_pid_init_f32>:
 8006f40:	ed90 7a08 	vldr	s14, [r0, #32]
 8006f44:	edd0 7a06 	vldr	s15, [r0, #24]
 8006f48:	ed90 6a07 	vldr	s12, [r0, #28]
 8006f4c:	eef1 6a67 	vneg.f32	s13, s15
 8006f50:	ed80 7a02 	vstr	s14, [r0, #8]
 8006f54:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006f58:	ee37 6a07 	vadd.f32	s12, s14, s14
 8006f5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f60:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8006f64:	edc0 7a00 	vstr	s15, [r0]
 8006f68:	ed80 7a01 	vstr	s14, [r0, #4]
 8006f6c:	b901      	cbnz	r1, 8006f70 <arm_pid_init_f32+0x30>
 8006f6e:	4770      	bx	lr
 8006f70:	2300      	movs	r3, #0
 8006f72:	60c3      	str	r3, [r0, #12]
 8006f74:	6103      	str	r3, [r0, #16]
 8006f76:	6143      	str	r3, [r0, #20]
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop

08006f7c <__cvt>:
 8006f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	ec57 6b10 	vmov	r6, r7, d0
 8006f84:	2f00      	cmp	r7, #0
 8006f86:	460c      	mov	r4, r1
 8006f88:	4619      	mov	r1, r3
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	bfbb      	ittet	lt
 8006f8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f92:	461f      	movlt	r7, r3
 8006f94:	2300      	movge	r3, #0
 8006f96:	232d      	movlt	r3, #45	@ 0x2d
 8006f98:	700b      	strb	r3, [r1, #0]
 8006f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006fa0:	4691      	mov	r9, r2
 8006fa2:	f023 0820 	bic.w	r8, r3, #32
 8006fa6:	bfbc      	itt	lt
 8006fa8:	4632      	movlt	r2, r6
 8006faa:	4616      	movlt	r6, r2
 8006fac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fb0:	d005      	beq.n	8006fbe <__cvt+0x42>
 8006fb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006fb6:	d100      	bne.n	8006fba <__cvt+0x3e>
 8006fb8:	3401      	adds	r4, #1
 8006fba:	2102      	movs	r1, #2
 8006fbc:	e000      	b.n	8006fc0 <__cvt+0x44>
 8006fbe:	2103      	movs	r1, #3
 8006fc0:	ab03      	add	r3, sp, #12
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	ab02      	add	r3, sp, #8
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	ec47 6b10 	vmov	d0, r6, r7
 8006fcc:	4653      	mov	r3, sl
 8006fce:	4622      	mov	r2, r4
 8006fd0:	f000 fe6e 	bl	8007cb0 <_dtoa_r>
 8006fd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006fd8:	4605      	mov	r5, r0
 8006fda:	d119      	bne.n	8007010 <__cvt+0x94>
 8006fdc:	f019 0f01 	tst.w	r9, #1
 8006fe0:	d00e      	beq.n	8007000 <__cvt+0x84>
 8006fe2:	eb00 0904 	add.w	r9, r0, r4
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4630      	mov	r0, r6
 8006fec:	4639      	mov	r1, r7
 8006fee:	f7f9 fd8b 	bl	8000b08 <__aeabi_dcmpeq>
 8006ff2:	b108      	cbz	r0, 8006ff8 <__cvt+0x7c>
 8006ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ff8:	2230      	movs	r2, #48	@ 0x30
 8006ffa:	9b03      	ldr	r3, [sp, #12]
 8006ffc:	454b      	cmp	r3, r9
 8006ffe:	d31e      	bcc.n	800703e <__cvt+0xc2>
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007004:	1b5b      	subs	r3, r3, r5
 8007006:	4628      	mov	r0, r5
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	b004      	add	sp, #16
 800700c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007014:	eb00 0904 	add.w	r9, r0, r4
 8007018:	d1e5      	bne.n	8006fe6 <__cvt+0x6a>
 800701a:	7803      	ldrb	r3, [r0, #0]
 800701c:	2b30      	cmp	r3, #48	@ 0x30
 800701e:	d10a      	bne.n	8007036 <__cvt+0xba>
 8007020:	2200      	movs	r2, #0
 8007022:	2300      	movs	r3, #0
 8007024:	4630      	mov	r0, r6
 8007026:	4639      	mov	r1, r7
 8007028:	f7f9 fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800702c:	b918      	cbnz	r0, 8007036 <__cvt+0xba>
 800702e:	f1c4 0401 	rsb	r4, r4, #1
 8007032:	f8ca 4000 	str.w	r4, [sl]
 8007036:	f8da 3000 	ldr.w	r3, [sl]
 800703a:	4499      	add	r9, r3
 800703c:	e7d3      	b.n	8006fe6 <__cvt+0x6a>
 800703e:	1c59      	adds	r1, r3, #1
 8007040:	9103      	str	r1, [sp, #12]
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e7d9      	b.n	8006ffa <__cvt+0x7e>

08007046 <__exponent>:
 8007046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007048:	2900      	cmp	r1, #0
 800704a:	bfba      	itte	lt
 800704c:	4249      	neglt	r1, r1
 800704e:	232d      	movlt	r3, #45	@ 0x2d
 8007050:	232b      	movge	r3, #43	@ 0x2b
 8007052:	2909      	cmp	r1, #9
 8007054:	7002      	strb	r2, [r0, #0]
 8007056:	7043      	strb	r3, [r0, #1]
 8007058:	dd29      	ble.n	80070ae <__exponent+0x68>
 800705a:	f10d 0307 	add.w	r3, sp, #7
 800705e:	461d      	mov	r5, r3
 8007060:	270a      	movs	r7, #10
 8007062:	461a      	mov	r2, r3
 8007064:	fbb1 f6f7 	udiv	r6, r1, r7
 8007068:	fb07 1416 	mls	r4, r7, r6, r1
 800706c:	3430      	adds	r4, #48	@ 0x30
 800706e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007072:	460c      	mov	r4, r1
 8007074:	2c63      	cmp	r4, #99	@ 0x63
 8007076:	f103 33ff 	add.w	r3, r3, #4294967295
 800707a:	4631      	mov	r1, r6
 800707c:	dcf1      	bgt.n	8007062 <__exponent+0x1c>
 800707e:	3130      	adds	r1, #48	@ 0x30
 8007080:	1e94      	subs	r4, r2, #2
 8007082:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007086:	1c41      	adds	r1, r0, #1
 8007088:	4623      	mov	r3, r4
 800708a:	42ab      	cmp	r3, r5
 800708c:	d30a      	bcc.n	80070a4 <__exponent+0x5e>
 800708e:	f10d 0309 	add.w	r3, sp, #9
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	42ac      	cmp	r4, r5
 8007096:	bf88      	it	hi
 8007098:	2300      	movhi	r3, #0
 800709a:	3302      	adds	r3, #2
 800709c:	4403      	add	r3, r0
 800709e:	1a18      	subs	r0, r3, r0
 80070a0:	b003      	add	sp, #12
 80070a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80070a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80070ac:	e7ed      	b.n	800708a <__exponent+0x44>
 80070ae:	2330      	movs	r3, #48	@ 0x30
 80070b0:	3130      	adds	r1, #48	@ 0x30
 80070b2:	7083      	strb	r3, [r0, #2]
 80070b4:	70c1      	strb	r1, [r0, #3]
 80070b6:	1d03      	adds	r3, r0, #4
 80070b8:	e7f1      	b.n	800709e <__exponent+0x58>
	...

080070bc <_printf_float>:
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	b08d      	sub	sp, #52	@ 0x34
 80070c2:	460c      	mov	r4, r1
 80070c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80070c8:	4616      	mov	r6, r2
 80070ca:	461f      	mov	r7, r3
 80070cc:	4605      	mov	r5, r0
 80070ce:	f000 fcef 	bl	8007ab0 <_localeconv_r>
 80070d2:	6803      	ldr	r3, [r0, #0]
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7f9 f8ea 	bl	80002b0 <strlen>
 80070dc:	2300      	movs	r3, #0
 80070de:	930a      	str	r3, [sp, #40]	@ 0x28
 80070e0:	f8d8 3000 	ldr.w	r3, [r8]
 80070e4:	9005      	str	r0, [sp, #20]
 80070e6:	3307      	adds	r3, #7
 80070e8:	f023 0307 	bic.w	r3, r3, #7
 80070ec:	f103 0208 	add.w	r2, r3, #8
 80070f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070f4:	f8d4 b000 	ldr.w	fp, [r4]
 80070f8:	f8c8 2000 	str.w	r2, [r8]
 80070fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007100:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007104:	9307      	str	r3, [sp, #28]
 8007106:	f8cd 8018 	str.w	r8, [sp, #24]
 800710a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800710e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007112:	4b9c      	ldr	r3, [pc, #624]	@ (8007384 <_printf_float+0x2c8>)
 8007114:	f04f 32ff 	mov.w	r2, #4294967295
 8007118:	f7f9 fd28 	bl	8000b6c <__aeabi_dcmpun>
 800711c:	bb70      	cbnz	r0, 800717c <_printf_float+0xc0>
 800711e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007122:	4b98      	ldr	r3, [pc, #608]	@ (8007384 <_printf_float+0x2c8>)
 8007124:	f04f 32ff 	mov.w	r2, #4294967295
 8007128:	f7f9 fd02 	bl	8000b30 <__aeabi_dcmple>
 800712c:	bb30      	cbnz	r0, 800717c <_printf_float+0xc0>
 800712e:	2200      	movs	r2, #0
 8007130:	2300      	movs	r3, #0
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 fcf1 	bl	8000b1c <__aeabi_dcmplt>
 800713a:	b110      	cbz	r0, 8007142 <_printf_float+0x86>
 800713c:	232d      	movs	r3, #45	@ 0x2d
 800713e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007142:	4a91      	ldr	r2, [pc, #580]	@ (8007388 <_printf_float+0x2cc>)
 8007144:	4b91      	ldr	r3, [pc, #580]	@ (800738c <_printf_float+0x2d0>)
 8007146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800714a:	bf94      	ite	ls
 800714c:	4690      	movls	r8, r2
 800714e:	4698      	movhi	r8, r3
 8007150:	2303      	movs	r3, #3
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	f02b 0304 	bic.w	r3, fp, #4
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	f04f 0900 	mov.w	r9, #0
 800715e:	9700      	str	r7, [sp, #0]
 8007160:	4633      	mov	r3, r6
 8007162:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007164:	4621      	mov	r1, r4
 8007166:	4628      	mov	r0, r5
 8007168:	f000 f9d2 	bl	8007510 <_printf_common>
 800716c:	3001      	adds	r0, #1
 800716e:	f040 808d 	bne.w	800728c <_printf_float+0x1d0>
 8007172:	f04f 30ff 	mov.w	r0, #4294967295
 8007176:	b00d      	add	sp, #52	@ 0x34
 8007178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717c:	4642      	mov	r2, r8
 800717e:	464b      	mov	r3, r9
 8007180:	4640      	mov	r0, r8
 8007182:	4649      	mov	r1, r9
 8007184:	f7f9 fcf2 	bl	8000b6c <__aeabi_dcmpun>
 8007188:	b140      	cbz	r0, 800719c <_printf_float+0xe0>
 800718a:	464b      	mov	r3, r9
 800718c:	2b00      	cmp	r3, #0
 800718e:	bfbc      	itt	lt
 8007190:	232d      	movlt	r3, #45	@ 0x2d
 8007192:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007196:	4a7e      	ldr	r2, [pc, #504]	@ (8007390 <_printf_float+0x2d4>)
 8007198:	4b7e      	ldr	r3, [pc, #504]	@ (8007394 <_printf_float+0x2d8>)
 800719a:	e7d4      	b.n	8007146 <_printf_float+0x8a>
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80071a2:	9206      	str	r2, [sp, #24]
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	d13b      	bne.n	8007220 <_printf_float+0x164>
 80071a8:	2306      	movs	r3, #6
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80071b0:	2300      	movs	r3, #0
 80071b2:	6022      	str	r2, [r4, #0]
 80071b4:	9303      	str	r3, [sp, #12]
 80071b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80071b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80071bc:	ab09      	add	r3, sp, #36	@ 0x24
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	6861      	ldr	r1, [r4, #4]
 80071c2:	ec49 8b10 	vmov	d0, r8, r9
 80071c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80071ca:	4628      	mov	r0, r5
 80071cc:	f7ff fed6 	bl	8006f7c <__cvt>
 80071d0:	9b06      	ldr	r3, [sp, #24]
 80071d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071d4:	2b47      	cmp	r3, #71	@ 0x47
 80071d6:	4680      	mov	r8, r0
 80071d8:	d129      	bne.n	800722e <_printf_float+0x172>
 80071da:	1cc8      	adds	r0, r1, #3
 80071dc:	db02      	blt.n	80071e4 <_printf_float+0x128>
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	4299      	cmp	r1, r3
 80071e2:	dd41      	ble.n	8007268 <_printf_float+0x1ac>
 80071e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80071e8:	fa5f fa8a 	uxtb.w	sl, sl
 80071ec:	3901      	subs	r1, #1
 80071ee:	4652      	mov	r2, sl
 80071f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80071f6:	f7ff ff26 	bl	8007046 <__exponent>
 80071fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071fc:	1813      	adds	r3, r2, r0
 80071fe:	2a01      	cmp	r2, #1
 8007200:	4681      	mov	r9, r0
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	dc02      	bgt.n	800720c <_printf_float+0x150>
 8007206:	6822      	ldr	r2, [r4, #0]
 8007208:	07d2      	lsls	r2, r2, #31
 800720a:	d501      	bpl.n	8007210 <_printf_float+0x154>
 800720c:	3301      	adds	r3, #1
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0a2      	beq.n	800715e <_printf_float+0xa2>
 8007218:	232d      	movs	r3, #45	@ 0x2d
 800721a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800721e:	e79e      	b.n	800715e <_printf_float+0xa2>
 8007220:	9a06      	ldr	r2, [sp, #24]
 8007222:	2a47      	cmp	r2, #71	@ 0x47
 8007224:	d1c2      	bne.n	80071ac <_printf_float+0xf0>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1c0      	bne.n	80071ac <_printf_float+0xf0>
 800722a:	2301      	movs	r3, #1
 800722c:	e7bd      	b.n	80071aa <_printf_float+0xee>
 800722e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007232:	d9db      	bls.n	80071ec <_printf_float+0x130>
 8007234:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007238:	d118      	bne.n	800726c <_printf_float+0x1b0>
 800723a:	2900      	cmp	r1, #0
 800723c:	6863      	ldr	r3, [r4, #4]
 800723e:	dd0b      	ble.n	8007258 <_printf_float+0x19c>
 8007240:	6121      	str	r1, [r4, #16]
 8007242:	b913      	cbnz	r3, 800724a <_printf_float+0x18e>
 8007244:	6822      	ldr	r2, [r4, #0]
 8007246:	07d0      	lsls	r0, r2, #31
 8007248:	d502      	bpl.n	8007250 <_printf_float+0x194>
 800724a:	3301      	adds	r3, #1
 800724c:	440b      	add	r3, r1
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007252:	f04f 0900 	mov.w	r9, #0
 8007256:	e7db      	b.n	8007210 <_printf_float+0x154>
 8007258:	b913      	cbnz	r3, 8007260 <_printf_float+0x1a4>
 800725a:	6822      	ldr	r2, [r4, #0]
 800725c:	07d2      	lsls	r2, r2, #31
 800725e:	d501      	bpl.n	8007264 <_printf_float+0x1a8>
 8007260:	3302      	adds	r3, #2
 8007262:	e7f4      	b.n	800724e <_printf_float+0x192>
 8007264:	2301      	movs	r3, #1
 8007266:	e7f2      	b.n	800724e <_printf_float+0x192>
 8007268:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800726c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800726e:	4299      	cmp	r1, r3
 8007270:	db05      	blt.n	800727e <_printf_float+0x1c2>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	6121      	str	r1, [r4, #16]
 8007276:	07d8      	lsls	r0, r3, #31
 8007278:	d5ea      	bpl.n	8007250 <_printf_float+0x194>
 800727a:	1c4b      	adds	r3, r1, #1
 800727c:	e7e7      	b.n	800724e <_printf_float+0x192>
 800727e:	2900      	cmp	r1, #0
 8007280:	bfd4      	ite	le
 8007282:	f1c1 0202 	rsble	r2, r1, #2
 8007286:	2201      	movgt	r2, #1
 8007288:	4413      	add	r3, r2
 800728a:	e7e0      	b.n	800724e <_printf_float+0x192>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	055a      	lsls	r2, r3, #21
 8007290:	d407      	bmi.n	80072a2 <_printf_float+0x1e6>
 8007292:	6923      	ldr	r3, [r4, #16]
 8007294:	4642      	mov	r2, r8
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	d12b      	bne.n	80072f8 <_printf_float+0x23c>
 80072a0:	e767      	b.n	8007172 <_printf_float+0xb6>
 80072a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072a6:	f240 80dd 	bls.w	8007464 <_printf_float+0x3a8>
 80072aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072ae:	2200      	movs	r2, #0
 80072b0:	2300      	movs	r3, #0
 80072b2:	f7f9 fc29 	bl	8000b08 <__aeabi_dcmpeq>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d033      	beq.n	8007322 <_printf_float+0x266>
 80072ba:	4a37      	ldr	r2, [pc, #220]	@ (8007398 <_printf_float+0x2dc>)
 80072bc:	2301      	movs	r3, #1
 80072be:	4631      	mov	r1, r6
 80072c0:	4628      	mov	r0, r5
 80072c2:	47b8      	blx	r7
 80072c4:	3001      	adds	r0, #1
 80072c6:	f43f af54 	beq.w	8007172 <_printf_float+0xb6>
 80072ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80072ce:	4543      	cmp	r3, r8
 80072d0:	db02      	blt.n	80072d8 <_printf_float+0x21c>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	07d8      	lsls	r0, r3, #31
 80072d6:	d50f      	bpl.n	80072f8 <_printf_float+0x23c>
 80072d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072dc:	4631      	mov	r1, r6
 80072de:	4628      	mov	r0, r5
 80072e0:	47b8      	blx	r7
 80072e2:	3001      	adds	r0, #1
 80072e4:	f43f af45 	beq.w	8007172 <_printf_float+0xb6>
 80072e8:	f04f 0900 	mov.w	r9, #0
 80072ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80072f0:	f104 0a1a 	add.w	sl, r4, #26
 80072f4:	45c8      	cmp	r8, r9
 80072f6:	dc09      	bgt.n	800730c <_printf_float+0x250>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	079b      	lsls	r3, r3, #30
 80072fc:	f100 8103 	bmi.w	8007506 <_printf_float+0x44a>
 8007300:	68e0      	ldr	r0, [r4, #12]
 8007302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007304:	4298      	cmp	r0, r3
 8007306:	bfb8      	it	lt
 8007308:	4618      	movlt	r0, r3
 800730a:	e734      	b.n	8007176 <_printf_float+0xba>
 800730c:	2301      	movs	r3, #1
 800730e:	4652      	mov	r2, sl
 8007310:	4631      	mov	r1, r6
 8007312:	4628      	mov	r0, r5
 8007314:	47b8      	blx	r7
 8007316:	3001      	adds	r0, #1
 8007318:	f43f af2b 	beq.w	8007172 <_printf_float+0xb6>
 800731c:	f109 0901 	add.w	r9, r9, #1
 8007320:	e7e8      	b.n	80072f4 <_printf_float+0x238>
 8007322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007324:	2b00      	cmp	r3, #0
 8007326:	dc39      	bgt.n	800739c <_printf_float+0x2e0>
 8007328:	4a1b      	ldr	r2, [pc, #108]	@ (8007398 <_printf_float+0x2dc>)
 800732a:	2301      	movs	r3, #1
 800732c:	4631      	mov	r1, r6
 800732e:	4628      	mov	r0, r5
 8007330:	47b8      	blx	r7
 8007332:	3001      	adds	r0, #1
 8007334:	f43f af1d 	beq.w	8007172 <_printf_float+0xb6>
 8007338:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800733c:	ea59 0303 	orrs.w	r3, r9, r3
 8007340:	d102      	bne.n	8007348 <_printf_float+0x28c>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	07d9      	lsls	r1, r3, #31
 8007346:	d5d7      	bpl.n	80072f8 <_printf_float+0x23c>
 8007348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	f43f af0d 	beq.w	8007172 <_printf_float+0xb6>
 8007358:	f04f 0a00 	mov.w	sl, #0
 800735c:	f104 0b1a 	add.w	fp, r4, #26
 8007360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007362:	425b      	negs	r3, r3
 8007364:	4553      	cmp	r3, sl
 8007366:	dc01      	bgt.n	800736c <_printf_float+0x2b0>
 8007368:	464b      	mov	r3, r9
 800736a:	e793      	b.n	8007294 <_printf_float+0x1d8>
 800736c:	2301      	movs	r3, #1
 800736e:	465a      	mov	r2, fp
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f43f aefb 	beq.w	8007172 <_printf_float+0xb6>
 800737c:	f10a 0a01 	add.w	sl, sl, #1
 8007380:	e7ee      	b.n	8007360 <_printf_float+0x2a4>
 8007382:	bf00      	nop
 8007384:	7fefffff 	.word	0x7fefffff
 8007388:	08009c88 	.word	0x08009c88
 800738c:	08009c8c 	.word	0x08009c8c
 8007390:	08009c90 	.word	0x08009c90
 8007394:	08009c94 	.word	0x08009c94
 8007398:	08009c98 	.word	0x08009c98
 800739c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800739e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80073a2:	4553      	cmp	r3, sl
 80073a4:	bfa8      	it	ge
 80073a6:	4653      	movge	r3, sl
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	4699      	mov	r9, r3
 80073ac:	dc36      	bgt.n	800741c <_printf_float+0x360>
 80073ae:	f04f 0b00 	mov.w	fp, #0
 80073b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073b6:	f104 021a 	add.w	r2, r4, #26
 80073ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80073bc:	9306      	str	r3, [sp, #24]
 80073be:	eba3 0309 	sub.w	r3, r3, r9
 80073c2:	455b      	cmp	r3, fp
 80073c4:	dc31      	bgt.n	800742a <_printf_float+0x36e>
 80073c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c8:	459a      	cmp	sl, r3
 80073ca:	dc3a      	bgt.n	8007442 <_printf_float+0x386>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	07da      	lsls	r2, r3, #31
 80073d0:	d437      	bmi.n	8007442 <_printf_float+0x386>
 80073d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d4:	ebaa 0903 	sub.w	r9, sl, r3
 80073d8:	9b06      	ldr	r3, [sp, #24]
 80073da:	ebaa 0303 	sub.w	r3, sl, r3
 80073de:	4599      	cmp	r9, r3
 80073e0:	bfa8      	it	ge
 80073e2:	4699      	movge	r9, r3
 80073e4:	f1b9 0f00 	cmp.w	r9, #0
 80073e8:	dc33      	bgt.n	8007452 <_printf_float+0x396>
 80073ea:	f04f 0800 	mov.w	r8, #0
 80073ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073f2:	f104 0b1a 	add.w	fp, r4, #26
 80073f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f8:	ebaa 0303 	sub.w	r3, sl, r3
 80073fc:	eba3 0309 	sub.w	r3, r3, r9
 8007400:	4543      	cmp	r3, r8
 8007402:	f77f af79 	ble.w	80072f8 <_printf_float+0x23c>
 8007406:	2301      	movs	r3, #1
 8007408:	465a      	mov	r2, fp
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	47b8      	blx	r7
 8007410:	3001      	adds	r0, #1
 8007412:	f43f aeae 	beq.w	8007172 <_printf_float+0xb6>
 8007416:	f108 0801 	add.w	r8, r8, #1
 800741a:	e7ec      	b.n	80073f6 <_printf_float+0x33a>
 800741c:	4642      	mov	r2, r8
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	d1c2      	bne.n	80073ae <_printf_float+0x2f2>
 8007428:	e6a3      	b.n	8007172 <_printf_float+0xb6>
 800742a:	2301      	movs	r3, #1
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	9206      	str	r2, [sp, #24]
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f ae9c 	beq.w	8007172 <_printf_float+0xb6>
 800743a:	9a06      	ldr	r2, [sp, #24]
 800743c:	f10b 0b01 	add.w	fp, fp, #1
 8007440:	e7bb      	b.n	80073ba <_printf_float+0x2fe>
 8007442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	d1c0      	bne.n	80073d2 <_printf_float+0x316>
 8007450:	e68f      	b.n	8007172 <_printf_float+0xb6>
 8007452:	9a06      	ldr	r2, [sp, #24]
 8007454:	464b      	mov	r3, r9
 8007456:	4442      	add	r2, r8
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	d1c3      	bne.n	80073ea <_printf_float+0x32e>
 8007462:	e686      	b.n	8007172 <_printf_float+0xb6>
 8007464:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007468:	f1ba 0f01 	cmp.w	sl, #1
 800746c:	dc01      	bgt.n	8007472 <_printf_float+0x3b6>
 800746e:	07db      	lsls	r3, r3, #31
 8007470:	d536      	bpl.n	80074e0 <_printf_float+0x424>
 8007472:	2301      	movs	r3, #1
 8007474:	4642      	mov	r2, r8
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	f43f ae78 	beq.w	8007172 <_printf_float+0xb6>
 8007482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	f43f ae70 	beq.w	8007172 <_printf_float+0xb6>
 8007492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007496:	2200      	movs	r2, #0
 8007498:	2300      	movs	r3, #0
 800749a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800749e:	f7f9 fb33 	bl	8000b08 <__aeabi_dcmpeq>
 80074a2:	b9c0      	cbnz	r0, 80074d6 <_printf_float+0x41a>
 80074a4:	4653      	mov	r3, sl
 80074a6:	f108 0201 	add.w	r2, r8, #1
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	d10c      	bne.n	80074ce <_printf_float+0x412>
 80074b4:	e65d      	b.n	8007172 <_printf_float+0xb6>
 80074b6:	2301      	movs	r3, #1
 80074b8:	465a      	mov	r2, fp
 80074ba:	4631      	mov	r1, r6
 80074bc:	4628      	mov	r0, r5
 80074be:	47b8      	blx	r7
 80074c0:	3001      	adds	r0, #1
 80074c2:	f43f ae56 	beq.w	8007172 <_printf_float+0xb6>
 80074c6:	f108 0801 	add.w	r8, r8, #1
 80074ca:	45d0      	cmp	r8, sl
 80074cc:	dbf3      	blt.n	80074b6 <_printf_float+0x3fa>
 80074ce:	464b      	mov	r3, r9
 80074d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80074d4:	e6df      	b.n	8007296 <_printf_float+0x1da>
 80074d6:	f04f 0800 	mov.w	r8, #0
 80074da:	f104 0b1a 	add.w	fp, r4, #26
 80074de:	e7f4      	b.n	80074ca <_printf_float+0x40e>
 80074e0:	2301      	movs	r3, #1
 80074e2:	4642      	mov	r2, r8
 80074e4:	e7e1      	b.n	80074aa <_printf_float+0x3ee>
 80074e6:	2301      	movs	r3, #1
 80074e8:	464a      	mov	r2, r9
 80074ea:	4631      	mov	r1, r6
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b8      	blx	r7
 80074f0:	3001      	adds	r0, #1
 80074f2:	f43f ae3e 	beq.w	8007172 <_printf_float+0xb6>
 80074f6:	f108 0801 	add.w	r8, r8, #1
 80074fa:	68e3      	ldr	r3, [r4, #12]
 80074fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074fe:	1a5b      	subs	r3, r3, r1
 8007500:	4543      	cmp	r3, r8
 8007502:	dcf0      	bgt.n	80074e6 <_printf_float+0x42a>
 8007504:	e6fc      	b.n	8007300 <_printf_float+0x244>
 8007506:	f04f 0800 	mov.w	r8, #0
 800750a:	f104 0919 	add.w	r9, r4, #25
 800750e:	e7f4      	b.n	80074fa <_printf_float+0x43e>

08007510 <_printf_common>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	4616      	mov	r6, r2
 8007516:	4698      	mov	r8, r3
 8007518:	688a      	ldr	r2, [r1, #8]
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007520:	4293      	cmp	r3, r2
 8007522:	bfb8      	it	lt
 8007524:	4613      	movlt	r3, r2
 8007526:	6033      	str	r3, [r6, #0]
 8007528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800752c:	4607      	mov	r7, r0
 800752e:	460c      	mov	r4, r1
 8007530:	b10a      	cbz	r2, 8007536 <_printf_common+0x26>
 8007532:	3301      	adds	r3, #1
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	0699      	lsls	r1, r3, #26
 800753a:	bf42      	ittt	mi
 800753c:	6833      	ldrmi	r3, [r6, #0]
 800753e:	3302      	addmi	r3, #2
 8007540:	6033      	strmi	r3, [r6, #0]
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	f015 0506 	ands.w	r5, r5, #6
 8007548:	d106      	bne.n	8007558 <_printf_common+0x48>
 800754a:	f104 0a19 	add.w	sl, r4, #25
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	6832      	ldr	r2, [r6, #0]
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	42ab      	cmp	r3, r5
 8007556:	dc26      	bgt.n	80075a6 <_printf_common+0x96>
 8007558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	3b00      	subs	r3, #0
 8007560:	bf18      	it	ne
 8007562:	2301      	movne	r3, #1
 8007564:	0692      	lsls	r2, r2, #26
 8007566:	d42b      	bmi.n	80075c0 <_printf_common+0xb0>
 8007568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800756c:	4641      	mov	r1, r8
 800756e:	4638      	mov	r0, r7
 8007570:	47c8      	blx	r9
 8007572:	3001      	adds	r0, #1
 8007574:	d01e      	beq.n	80075b4 <_printf_common+0xa4>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	6922      	ldr	r2, [r4, #16]
 800757a:	f003 0306 	and.w	r3, r3, #6
 800757e:	2b04      	cmp	r3, #4
 8007580:	bf02      	ittt	eq
 8007582:	68e5      	ldreq	r5, [r4, #12]
 8007584:	6833      	ldreq	r3, [r6, #0]
 8007586:	1aed      	subeq	r5, r5, r3
 8007588:	68a3      	ldr	r3, [r4, #8]
 800758a:	bf0c      	ite	eq
 800758c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007590:	2500      	movne	r5, #0
 8007592:	4293      	cmp	r3, r2
 8007594:	bfc4      	itt	gt
 8007596:	1a9b      	subgt	r3, r3, r2
 8007598:	18ed      	addgt	r5, r5, r3
 800759a:	2600      	movs	r6, #0
 800759c:	341a      	adds	r4, #26
 800759e:	42b5      	cmp	r5, r6
 80075a0:	d11a      	bne.n	80075d8 <_printf_common+0xc8>
 80075a2:	2000      	movs	r0, #0
 80075a4:	e008      	b.n	80075b8 <_printf_common+0xa8>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4652      	mov	r2, sl
 80075aa:	4641      	mov	r1, r8
 80075ac:	4638      	mov	r0, r7
 80075ae:	47c8      	blx	r9
 80075b0:	3001      	adds	r0, #1
 80075b2:	d103      	bne.n	80075bc <_printf_common+0xac>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	3501      	adds	r5, #1
 80075be:	e7c6      	b.n	800754e <_printf_common+0x3e>
 80075c0:	18e1      	adds	r1, r4, r3
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	2030      	movs	r0, #48	@ 0x30
 80075c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ca:	4422      	add	r2, r4
 80075cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075d4:	3302      	adds	r3, #2
 80075d6:	e7c7      	b.n	8007568 <_printf_common+0x58>
 80075d8:	2301      	movs	r3, #1
 80075da:	4622      	mov	r2, r4
 80075dc:	4641      	mov	r1, r8
 80075de:	4638      	mov	r0, r7
 80075e0:	47c8      	blx	r9
 80075e2:	3001      	adds	r0, #1
 80075e4:	d0e6      	beq.n	80075b4 <_printf_common+0xa4>
 80075e6:	3601      	adds	r6, #1
 80075e8:	e7d9      	b.n	800759e <_printf_common+0x8e>
	...

080075ec <_printf_i>:
 80075ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f0:	7e0f      	ldrb	r7, [r1, #24]
 80075f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075f4:	2f78      	cmp	r7, #120	@ 0x78
 80075f6:	4691      	mov	r9, r2
 80075f8:	4680      	mov	r8, r0
 80075fa:	460c      	mov	r4, r1
 80075fc:	469a      	mov	sl, r3
 80075fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007602:	d807      	bhi.n	8007614 <_printf_i+0x28>
 8007604:	2f62      	cmp	r7, #98	@ 0x62
 8007606:	d80a      	bhi.n	800761e <_printf_i+0x32>
 8007608:	2f00      	cmp	r7, #0
 800760a:	f000 80d2 	beq.w	80077b2 <_printf_i+0x1c6>
 800760e:	2f58      	cmp	r7, #88	@ 0x58
 8007610:	f000 80b9 	beq.w	8007786 <_printf_i+0x19a>
 8007614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800761c:	e03a      	b.n	8007694 <_printf_i+0xa8>
 800761e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007622:	2b15      	cmp	r3, #21
 8007624:	d8f6      	bhi.n	8007614 <_printf_i+0x28>
 8007626:	a101      	add	r1, pc, #4	@ (adr r1, 800762c <_printf_i+0x40>)
 8007628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800762c:	08007685 	.word	0x08007685
 8007630:	08007699 	.word	0x08007699
 8007634:	08007615 	.word	0x08007615
 8007638:	08007615 	.word	0x08007615
 800763c:	08007615 	.word	0x08007615
 8007640:	08007615 	.word	0x08007615
 8007644:	08007699 	.word	0x08007699
 8007648:	08007615 	.word	0x08007615
 800764c:	08007615 	.word	0x08007615
 8007650:	08007615 	.word	0x08007615
 8007654:	08007615 	.word	0x08007615
 8007658:	08007799 	.word	0x08007799
 800765c:	080076c3 	.word	0x080076c3
 8007660:	08007753 	.word	0x08007753
 8007664:	08007615 	.word	0x08007615
 8007668:	08007615 	.word	0x08007615
 800766c:	080077bb 	.word	0x080077bb
 8007670:	08007615 	.word	0x08007615
 8007674:	080076c3 	.word	0x080076c3
 8007678:	08007615 	.word	0x08007615
 800767c:	08007615 	.word	0x08007615
 8007680:	0800775b 	.word	0x0800775b
 8007684:	6833      	ldr	r3, [r6, #0]
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6032      	str	r2, [r6, #0]
 800768c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007694:	2301      	movs	r3, #1
 8007696:	e09d      	b.n	80077d4 <_printf_i+0x1e8>
 8007698:	6833      	ldr	r3, [r6, #0]
 800769a:	6820      	ldr	r0, [r4, #0]
 800769c:	1d19      	adds	r1, r3, #4
 800769e:	6031      	str	r1, [r6, #0]
 80076a0:	0606      	lsls	r6, r0, #24
 80076a2:	d501      	bpl.n	80076a8 <_printf_i+0xbc>
 80076a4:	681d      	ldr	r5, [r3, #0]
 80076a6:	e003      	b.n	80076b0 <_printf_i+0xc4>
 80076a8:	0645      	lsls	r5, r0, #25
 80076aa:	d5fb      	bpl.n	80076a4 <_printf_i+0xb8>
 80076ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	da03      	bge.n	80076bc <_printf_i+0xd0>
 80076b4:	232d      	movs	r3, #45	@ 0x2d
 80076b6:	426d      	negs	r5, r5
 80076b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076bc:	4859      	ldr	r0, [pc, #356]	@ (8007824 <_printf_i+0x238>)
 80076be:	230a      	movs	r3, #10
 80076c0:	e011      	b.n	80076e6 <_printf_i+0xfa>
 80076c2:	6821      	ldr	r1, [r4, #0]
 80076c4:	6833      	ldr	r3, [r6, #0]
 80076c6:	0608      	lsls	r0, r1, #24
 80076c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80076cc:	d402      	bmi.n	80076d4 <_printf_i+0xe8>
 80076ce:	0649      	lsls	r1, r1, #25
 80076d0:	bf48      	it	mi
 80076d2:	b2ad      	uxthmi	r5, r5
 80076d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076d6:	4853      	ldr	r0, [pc, #332]	@ (8007824 <_printf_i+0x238>)
 80076d8:	6033      	str	r3, [r6, #0]
 80076da:	bf14      	ite	ne
 80076dc:	230a      	movne	r3, #10
 80076de:	2308      	moveq	r3, #8
 80076e0:	2100      	movs	r1, #0
 80076e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076e6:	6866      	ldr	r6, [r4, #4]
 80076e8:	60a6      	str	r6, [r4, #8]
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	bfa2      	ittt	ge
 80076ee:	6821      	ldrge	r1, [r4, #0]
 80076f0:	f021 0104 	bicge.w	r1, r1, #4
 80076f4:	6021      	strge	r1, [r4, #0]
 80076f6:	b90d      	cbnz	r5, 80076fc <_printf_i+0x110>
 80076f8:	2e00      	cmp	r6, #0
 80076fa:	d04b      	beq.n	8007794 <_printf_i+0x1a8>
 80076fc:	4616      	mov	r6, r2
 80076fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007702:	fb03 5711 	mls	r7, r3, r1, r5
 8007706:	5dc7      	ldrb	r7, [r0, r7]
 8007708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800770c:	462f      	mov	r7, r5
 800770e:	42bb      	cmp	r3, r7
 8007710:	460d      	mov	r5, r1
 8007712:	d9f4      	bls.n	80076fe <_printf_i+0x112>
 8007714:	2b08      	cmp	r3, #8
 8007716:	d10b      	bne.n	8007730 <_printf_i+0x144>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	07df      	lsls	r7, r3, #31
 800771c:	d508      	bpl.n	8007730 <_printf_i+0x144>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	6861      	ldr	r1, [r4, #4]
 8007722:	4299      	cmp	r1, r3
 8007724:	bfde      	ittt	le
 8007726:	2330      	movle	r3, #48	@ 0x30
 8007728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800772c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007730:	1b92      	subs	r2, r2, r6
 8007732:	6122      	str	r2, [r4, #16]
 8007734:	f8cd a000 	str.w	sl, [sp]
 8007738:	464b      	mov	r3, r9
 800773a:	aa03      	add	r2, sp, #12
 800773c:	4621      	mov	r1, r4
 800773e:	4640      	mov	r0, r8
 8007740:	f7ff fee6 	bl	8007510 <_printf_common>
 8007744:	3001      	adds	r0, #1
 8007746:	d14a      	bne.n	80077de <_printf_i+0x1f2>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	b004      	add	sp, #16
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	f043 0320 	orr.w	r3, r3, #32
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	4833      	ldr	r0, [pc, #204]	@ (8007828 <_printf_i+0x23c>)
 800775c:	2778      	movs	r7, #120	@ 0x78
 800775e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	6831      	ldr	r1, [r6, #0]
 8007766:	061f      	lsls	r7, r3, #24
 8007768:	f851 5b04 	ldr.w	r5, [r1], #4
 800776c:	d402      	bmi.n	8007774 <_printf_i+0x188>
 800776e:	065f      	lsls	r7, r3, #25
 8007770:	bf48      	it	mi
 8007772:	b2ad      	uxthmi	r5, r5
 8007774:	6031      	str	r1, [r6, #0]
 8007776:	07d9      	lsls	r1, r3, #31
 8007778:	bf44      	itt	mi
 800777a:	f043 0320 	orrmi.w	r3, r3, #32
 800777e:	6023      	strmi	r3, [r4, #0]
 8007780:	b11d      	cbz	r5, 800778a <_printf_i+0x19e>
 8007782:	2310      	movs	r3, #16
 8007784:	e7ac      	b.n	80076e0 <_printf_i+0xf4>
 8007786:	4827      	ldr	r0, [pc, #156]	@ (8007824 <_printf_i+0x238>)
 8007788:	e7e9      	b.n	800775e <_printf_i+0x172>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	f023 0320 	bic.w	r3, r3, #32
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	e7f6      	b.n	8007782 <_printf_i+0x196>
 8007794:	4616      	mov	r6, r2
 8007796:	e7bd      	b.n	8007714 <_printf_i+0x128>
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	6825      	ldr	r5, [r4, #0]
 800779c:	6961      	ldr	r1, [r4, #20]
 800779e:	1d18      	adds	r0, r3, #4
 80077a0:	6030      	str	r0, [r6, #0]
 80077a2:	062e      	lsls	r6, r5, #24
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	d501      	bpl.n	80077ac <_printf_i+0x1c0>
 80077a8:	6019      	str	r1, [r3, #0]
 80077aa:	e002      	b.n	80077b2 <_printf_i+0x1c6>
 80077ac:	0668      	lsls	r0, r5, #25
 80077ae:	d5fb      	bpl.n	80077a8 <_printf_i+0x1bc>
 80077b0:	8019      	strh	r1, [r3, #0]
 80077b2:	2300      	movs	r3, #0
 80077b4:	6123      	str	r3, [r4, #16]
 80077b6:	4616      	mov	r6, r2
 80077b8:	e7bc      	b.n	8007734 <_printf_i+0x148>
 80077ba:	6833      	ldr	r3, [r6, #0]
 80077bc:	1d1a      	adds	r2, r3, #4
 80077be:	6032      	str	r2, [r6, #0]
 80077c0:	681e      	ldr	r6, [r3, #0]
 80077c2:	6862      	ldr	r2, [r4, #4]
 80077c4:	2100      	movs	r1, #0
 80077c6:	4630      	mov	r0, r6
 80077c8:	f7f8 fd22 	bl	8000210 <memchr>
 80077cc:	b108      	cbz	r0, 80077d2 <_printf_i+0x1e6>
 80077ce:	1b80      	subs	r0, r0, r6
 80077d0:	6060      	str	r0, [r4, #4]
 80077d2:	6863      	ldr	r3, [r4, #4]
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	2300      	movs	r3, #0
 80077d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077dc:	e7aa      	b.n	8007734 <_printf_i+0x148>
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	4632      	mov	r2, r6
 80077e2:	4649      	mov	r1, r9
 80077e4:	4640      	mov	r0, r8
 80077e6:	47d0      	blx	sl
 80077e8:	3001      	adds	r0, #1
 80077ea:	d0ad      	beq.n	8007748 <_printf_i+0x15c>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	079b      	lsls	r3, r3, #30
 80077f0:	d413      	bmi.n	800781a <_printf_i+0x22e>
 80077f2:	68e0      	ldr	r0, [r4, #12]
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	4298      	cmp	r0, r3
 80077f8:	bfb8      	it	lt
 80077fa:	4618      	movlt	r0, r3
 80077fc:	e7a6      	b.n	800774c <_printf_i+0x160>
 80077fe:	2301      	movs	r3, #1
 8007800:	4632      	mov	r2, r6
 8007802:	4649      	mov	r1, r9
 8007804:	4640      	mov	r0, r8
 8007806:	47d0      	blx	sl
 8007808:	3001      	adds	r0, #1
 800780a:	d09d      	beq.n	8007748 <_printf_i+0x15c>
 800780c:	3501      	adds	r5, #1
 800780e:	68e3      	ldr	r3, [r4, #12]
 8007810:	9903      	ldr	r1, [sp, #12]
 8007812:	1a5b      	subs	r3, r3, r1
 8007814:	42ab      	cmp	r3, r5
 8007816:	dcf2      	bgt.n	80077fe <_printf_i+0x212>
 8007818:	e7eb      	b.n	80077f2 <_printf_i+0x206>
 800781a:	2500      	movs	r5, #0
 800781c:	f104 0619 	add.w	r6, r4, #25
 8007820:	e7f5      	b.n	800780e <_printf_i+0x222>
 8007822:	bf00      	nop
 8007824:	08009c9a 	.word	0x08009c9a
 8007828:	08009cab 	.word	0x08009cab

0800782c <std>:
 800782c:	2300      	movs	r3, #0
 800782e:	b510      	push	{r4, lr}
 8007830:	4604      	mov	r4, r0
 8007832:	e9c0 3300 	strd	r3, r3, [r0]
 8007836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800783a:	6083      	str	r3, [r0, #8]
 800783c:	8181      	strh	r1, [r0, #12]
 800783e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007840:	81c2      	strh	r2, [r0, #14]
 8007842:	6183      	str	r3, [r0, #24]
 8007844:	4619      	mov	r1, r3
 8007846:	2208      	movs	r2, #8
 8007848:	305c      	adds	r0, #92	@ 0x5c
 800784a:	f000 f928 	bl	8007a9e <memset>
 800784e:	4b0d      	ldr	r3, [pc, #52]	@ (8007884 <std+0x58>)
 8007850:	6263      	str	r3, [r4, #36]	@ 0x24
 8007852:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <std+0x5c>)
 8007854:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007856:	4b0d      	ldr	r3, [pc, #52]	@ (800788c <std+0x60>)
 8007858:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800785a:	4b0d      	ldr	r3, [pc, #52]	@ (8007890 <std+0x64>)
 800785c:	6323      	str	r3, [r4, #48]	@ 0x30
 800785e:	4b0d      	ldr	r3, [pc, #52]	@ (8007894 <std+0x68>)
 8007860:	6224      	str	r4, [r4, #32]
 8007862:	429c      	cmp	r4, r3
 8007864:	d006      	beq.n	8007874 <std+0x48>
 8007866:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800786a:	4294      	cmp	r4, r2
 800786c:	d002      	beq.n	8007874 <std+0x48>
 800786e:	33d0      	adds	r3, #208	@ 0xd0
 8007870:	429c      	cmp	r4, r3
 8007872:	d105      	bne.n	8007880 <std+0x54>
 8007874:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787c:	f000 b98c 	b.w	8007b98 <__retarget_lock_init_recursive>
 8007880:	bd10      	pop	{r4, pc}
 8007882:	bf00      	nop
 8007884:	08007a19 	.word	0x08007a19
 8007888:	08007a3b 	.word	0x08007a3b
 800788c:	08007a73 	.word	0x08007a73
 8007890:	08007a97 	.word	0x08007a97
 8007894:	20000910 	.word	0x20000910

08007898 <stdio_exit_handler>:
 8007898:	4a02      	ldr	r2, [pc, #8]	@ (80078a4 <stdio_exit_handler+0xc>)
 800789a:	4903      	ldr	r1, [pc, #12]	@ (80078a8 <stdio_exit_handler+0x10>)
 800789c:	4803      	ldr	r0, [pc, #12]	@ (80078ac <stdio_exit_handler+0x14>)
 800789e:	f000 b869 	b.w	8007974 <_fwalk_sglue>
 80078a2:	bf00      	nop
 80078a4:	20000018 	.word	0x20000018
 80078a8:	080094f5 	.word	0x080094f5
 80078ac:	20000028 	.word	0x20000028

080078b0 <cleanup_stdio>:
 80078b0:	6841      	ldr	r1, [r0, #4]
 80078b2:	4b0c      	ldr	r3, [pc, #48]	@ (80078e4 <cleanup_stdio+0x34>)
 80078b4:	4299      	cmp	r1, r3
 80078b6:	b510      	push	{r4, lr}
 80078b8:	4604      	mov	r4, r0
 80078ba:	d001      	beq.n	80078c0 <cleanup_stdio+0x10>
 80078bc:	f001 fe1a 	bl	80094f4 <_fflush_r>
 80078c0:	68a1      	ldr	r1, [r4, #8]
 80078c2:	4b09      	ldr	r3, [pc, #36]	@ (80078e8 <cleanup_stdio+0x38>)
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d002      	beq.n	80078ce <cleanup_stdio+0x1e>
 80078c8:	4620      	mov	r0, r4
 80078ca:	f001 fe13 	bl	80094f4 <_fflush_r>
 80078ce:	68e1      	ldr	r1, [r4, #12]
 80078d0:	4b06      	ldr	r3, [pc, #24]	@ (80078ec <cleanup_stdio+0x3c>)
 80078d2:	4299      	cmp	r1, r3
 80078d4:	d004      	beq.n	80078e0 <cleanup_stdio+0x30>
 80078d6:	4620      	mov	r0, r4
 80078d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078dc:	f001 be0a 	b.w	80094f4 <_fflush_r>
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	bf00      	nop
 80078e4:	20000910 	.word	0x20000910
 80078e8:	20000978 	.word	0x20000978
 80078ec:	200009e0 	.word	0x200009e0

080078f0 <global_stdio_init.part.0>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <global_stdio_init.part.0+0x30>)
 80078f4:	4c0b      	ldr	r4, [pc, #44]	@ (8007924 <global_stdio_init.part.0+0x34>)
 80078f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007928 <global_stdio_init.part.0+0x38>)
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	4620      	mov	r0, r4
 80078fc:	2200      	movs	r2, #0
 80078fe:	2104      	movs	r1, #4
 8007900:	f7ff ff94 	bl	800782c <std>
 8007904:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007908:	2201      	movs	r2, #1
 800790a:	2109      	movs	r1, #9
 800790c:	f7ff ff8e 	bl	800782c <std>
 8007910:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007914:	2202      	movs	r2, #2
 8007916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800791a:	2112      	movs	r1, #18
 800791c:	f7ff bf86 	b.w	800782c <std>
 8007920:	20000a48 	.word	0x20000a48
 8007924:	20000910 	.word	0x20000910
 8007928:	08007899 	.word	0x08007899

0800792c <__sfp_lock_acquire>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__sfp_lock_acquire+0x8>)
 800792e:	f000 b934 	b.w	8007b9a <__retarget_lock_acquire_recursive>
 8007932:	bf00      	nop
 8007934:	20000a51 	.word	0x20000a51

08007938 <__sfp_lock_release>:
 8007938:	4801      	ldr	r0, [pc, #4]	@ (8007940 <__sfp_lock_release+0x8>)
 800793a:	f000 b92f 	b.w	8007b9c <__retarget_lock_release_recursive>
 800793e:	bf00      	nop
 8007940:	20000a51 	.word	0x20000a51

08007944 <__sinit>:
 8007944:	b510      	push	{r4, lr}
 8007946:	4604      	mov	r4, r0
 8007948:	f7ff fff0 	bl	800792c <__sfp_lock_acquire>
 800794c:	6a23      	ldr	r3, [r4, #32]
 800794e:	b11b      	cbz	r3, 8007958 <__sinit+0x14>
 8007950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007954:	f7ff bff0 	b.w	8007938 <__sfp_lock_release>
 8007958:	4b04      	ldr	r3, [pc, #16]	@ (800796c <__sinit+0x28>)
 800795a:	6223      	str	r3, [r4, #32]
 800795c:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <__sinit+0x2c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f5      	bne.n	8007950 <__sinit+0xc>
 8007964:	f7ff ffc4 	bl	80078f0 <global_stdio_init.part.0>
 8007968:	e7f2      	b.n	8007950 <__sinit+0xc>
 800796a:	bf00      	nop
 800796c:	080078b1 	.word	0x080078b1
 8007970:	20000a48 	.word	0x20000a48

08007974 <_fwalk_sglue>:
 8007974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007978:	4607      	mov	r7, r0
 800797a:	4688      	mov	r8, r1
 800797c:	4614      	mov	r4, r2
 800797e:	2600      	movs	r6, #0
 8007980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007984:	f1b9 0901 	subs.w	r9, r9, #1
 8007988:	d505      	bpl.n	8007996 <_fwalk_sglue+0x22>
 800798a:	6824      	ldr	r4, [r4, #0]
 800798c:	2c00      	cmp	r4, #0
 800798e:	d1f7      	bne.n	8007980 <_fwalk_sglue+0xc>
 8007990:	4630      	mov	r0, r6
 8007992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007996:	89ab      	ldrh	r3, [r5, #12]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d907      	bls.n	80079ac <_fwalk_sglue+0x38>
 800799c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079a0:	3301      	adds	r3, #1
 80079a2:	d003      	beq.n	80079ac <_fwalk_sglue+0x38>
 80079a4:	4629      	mov	r1, r5
 80079a6:	4638      	mov	r0, r7
 80079a8:	47c0      	blx	r8
 80079aa:	4306      	orrs	r6, r0
 80079ac:	3568      	adds	r5, #104	@ 0x68
 80079ae:	e7e9      	b.n	8007984 <_fwalk_sglue+0x10>

080079b0 <sniprintf>:
 80079b0:	b40c      	push	{r2, r3}
 80079b2:	b530      	push	{r4, r5, lr}
 80079b4:	4b17      	ldr	r3, [pc, #92]	@ (8007a14 <sniprintf+0x64>)
 80079b6:	1e0c      	subs	r4, r1, #0
 80079b8:	681d      	ldr	r5, [r3, #0]
 80079ba:	b09d      	sub	sp, #116	@ 0x74
 80079bc:	da08      	bge.n	80079d0 <sniprintf+0x20>
 80079be:	238b      	movs	r3, #139	@ 0x8b
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295
 80079c6:	b01d      	add	sp, #116	@ 0x74
 80079c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079cc:	b002      	add	sp, #8
 80079ce:	4770      	bx	lr
 80079d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80079d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079d8:	bf14      	ite	ne
 80079da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079de:	4623      	moveq	r3, r4
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	9307      	str	r3, [sp, #28]
 80079e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079e8:	9002      	str	r0, [sp, #8]
 80079ea:	9006      	str	r0, [sp, #24]
 80079ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079f2:	ab21      	add	r3, sp, #132	@ 0x84
 80079f4:	a902      	add	r1, sp, #8
 80079f6:	4628      	mov	r0, r5
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	f001 fbfb 	bl	80091f4 <_svfiprintf_r>
 80079fe:	1c43      	adds	r3, r0, #1
 8007a00:	bfbc      	itt	lt
 8007a02:	238b      	movlt	r3, #139	@ 0x8b
 8007a04:	602b      	strlt	r3, [r5, #0]
 8007a06:	2c00      	cmp	r4, #0
 8007a08:	d0dd      	beq.n	80079c6 <sniprintf+0x16>
 8007a0a:	9b02      	ldr	r3, [sp, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e7d9      	b.n	80079c6 <sniprintf+0x16>
 8007a12:	bf00      	nop
 8007a14:	20000024 	.word	0x20000024

08007a18 <__sread>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a20:	f000 f86c 	bl	8007afc <_read_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	bfab      	itete	ge
 8007a28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a2c:	181b      	addge	r3, r3, r0
 8007a2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a32:	bfac      	ite	ge
 8007a34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a36:	81a3      	strhlt	r3, [r4, #12]
 8007a38:	bd10      	pop	{r4, pc}

08007a3a <__swrite>:
 8007a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3e:	461f      	mov	r7, r3
 8007a40:	898b      	ldrh	r3, [r1, #12]
 8007a42:	05db      	lsls	r3, r3, #23
 8007a44:	4605      	mov	r5, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	4616      	mov	r6, r2
 8007a4a:	d505      	bpl.n	8007a58 <__swrite+0x1e>
 8007a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a50:	2302      	movs	r3, #2
 8007a52:	2200      	movs	r2, #0
 8007a54:	f000 f840 	bl	8007ad8 <_lseek_r>
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a62:	81a3      	strh	r3, [r4, #12]
 8007a64:	4632      	mov	r2, r6
 8007a66:	463b      	mov	r3, r7
 8007a68:	4628      	mov	r0, r5
 8007a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6e:	f000 b857 	b.w	8007b20 <_write_r>

08007a72 <__sseek>:
 8007a72:	b510      	push	{r4, lr}
 8007a74:	460c      	mov	r4, r1
 8007a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7a:	f000 f82d 	bl	8007ad8 <_lseek_r>
 8007a7e:	1c43      	adds	r3, r0, #1
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	bf15      	itete	ne
 8007a84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a8e:	81a3      	strheq	r3, [r4, #12]
 8007a90:	bf18      	it	ne
 8007a92:	81a3      	strhne	r3, [r4, #12]
 8007a94:	bd10      	pop	{r4, pc}

08007a96 <__sclose>:
 8007a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a9a:	f000 b80d 	b.w	8007ab8 <_close_r>

08007a9e <memset>:
 8007a9e:	4402      	add	r2, r0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d100      	bne.n	8007aa8 <memset+0xa>
 8007aa6:	4770      	bx	lr
 8007aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8007aac:	e7f9      	b.n	8007aa2 <memset+0x4>
	...

08007ab0 <_localeconv_r>:
 8007ab0:	4800      	ldr	r0, [pc, #0]	@ (8007ab4 <_localeconv_r+0x4>)
 8007ab2:	4770      	bx	lr
 8007ab4:	20000164 	.word	0x20000164

08007ab8 <_close_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d06      	ldr	r5, [pc, #24]	@ (8007ad4 <_close_r+0x1c>)
 8007abc:	2300      	movs	r3, #0
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	f7fa fdf9 	bl	80026ba <_close>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_close_r+0x1a>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_close_r+0x1a>
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	20000a4c 	.word	0x20000a4c

08007ad8 <_lseek_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d07      	ldr	r5, [pc, #28]	@ (8007af8 <_lseek_r+0x20>)
 8007adc:	4604      	mov	r4, r0
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f7fa fe0e 	bl	8002708 <_lseek>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_lseek_r+0x1e>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_lseek_r+0x1e>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20000a4c 	.word	0x20000a4c

08007afc <_read_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	@ (8007b1c <_read_r+0x20>)
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f7fa fd9c 	bl	8002648 <_read>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_read_r+0x1e>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_read_r+0x1e>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000a4c 	.word	0x20000a4c

08007b20 <_write_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d07      	ldr	r5, [pc, #28]	@ (8007b40 <_write_r+0x20>)
 8007b24:	4604      	mov	r4, r0
 8007b26:	4608      	mov	r0, r1
 8007b28:	4611      	mov	r1, r2
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	602a      	str	r2, [r5, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f7fa fda7 	bl	8002682 <_write>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_write_r+0x1e>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_write_r+0x1e>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	20000a4c 	.word	0x20000a4c

08007b44 <__errno>:
 8007b44:	4b01      	ldr	r3, [pc, #4]	@ (8007b4c <__errno+0x8>)
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	20000024 	.word	0x20000024

08007b50 <__libc_init_array>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4d0d      	ldr	r5, [pc, #52]	@ (8007b88 <__libc_init_array+0x38>)
 8007b54:	4c0d      	ldr	r4, [pc, #52]	@ (8007b8c <__libc_init_array+0x3c>)
 8007b56:	1b64      	subs	r4, r4, r5
 8007b58:	10a4      	asrs	r4, r4, #2
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	42a6      	cmp	r6, r4
 8007b5e:	d109      	bne.n	8007b74 <__libc_init_array+0x24>
 8007b60:	4d0b      	ldr	r5, [pc, #44]	@ (8007b90 <__libc_init_array+0x40>)
 8007b62:	4c0c      	ldr	r4, [pc, #48]	@ (8007b94 <__libc_init_array+0x44>)
 8007b64:	f002 f864 	bl	8009c30 <_init>
 8007b68:	1b64      	subs	r4, r4, r5
 8007b6a:	10a4      	asrs	r4, r4, #2
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	42a6      	cmp	r6, r4
 8007b70:	d105      	bne.n	8007b7e <__libc_init_array+0x2e>
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
 8007b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b78:	4798      	blx	r3
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7ee      	b.n	8007b5c <__libc_init_array+0xc>
 8007b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b82:	4798      	blx	r3
 8007b84:	3601      	adds	r6, #1
 8007b86:	e7f2      	b.n	8007b6e <__libc_init_array+0x1e>
 8007b88:	0800a000 	.word	0x0800a000
 8007b8c:	0800a000 	.word	0x0800a000
 8007b90:	0800a000 	.word	0x0800a000
 8007b94:	0800a004 	.word	0x0800a004

08007b98 <__retarget_lock_init_recursive>:
 8007b98:	4770      	bx	lr

08007b9a <__retarget_lock_acquire_recursive>:
 8007b9a:	4770      	bx	lr

08007b9c <__retarget_lock_release_recursive>:
 8007b9c:	4770      	bx	lr

08007b9e <quorem>:
 8007b9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba2:	6903      	ldr	r3, [r0, #16]
 8007ba4:	690c      	ldr	r4, [r1, #16]
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	4607      	mov	r7, r0
 8007baa:	db7e      	blt.n	8007caa <quorem+0x10c>
 8007bac:	3c01      	subs	r4, #1
 8007bae:	f101 0814 	add.w	r8, r1, #20
 8007bb2:	00a3      	lsls	r3, r4, #2
 8007bb4:	f100 0514 	add.w	r5, r0, #20
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd4:	d32e      	bcc.n	8007c34 <quorem+0x96>
 8007bd6:	f04f 0a00 	mov.w	sl, #0
 8007bda:	46c4      	mov	ip, r8
 8007bdc:	46ae      	mov	lr, r5
 8007bde:	46d3      	mov	fp, sl
 8007be0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007be4:	b298      	uxth	r0, r3
 8007be6:	fb06 a000 	mla	r0, r6, r0, sl
 8007bea:	0c02      	lsrs	r2, r0, #16
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	fb06 2303 	mla	r3, r6, r3, r2
 8007bf2:	f8de 2000 	ldr.w	r2, [lr]
 8007bf6:	b280      	uxth	r0, r0
 8007bf8:	b292      	uxth	r2, r2
 8007bfa:	1a12      	subs	r2, r2, r0
 8007bfc:	445a      	add	r2, fp
 8007bfe:	f8de 0000 	ldr.w	r0, [lr]
 8007c02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c10:	b292      	uxth	r2, r2
 8007c12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c16:	45e1      	cmp	r9, ip
 8007c18:	f84e 2b04 	str.w	r2, [lr], #4
 8007c1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c20:	d2de      	bcs.n	8007be0 <quorem+0x42>
 8007c22:	9b00      	ldr	r3, [sp, #0]
 8007c24:	58eb      	ldr	r3, [r5, r3]
 8007c26:	b92b      	cbnz	r3, 8007c34 <quorem+0x96>
 8007c28:	9b01      	ldr	r3, [sp, #4]
 8007c2a:	3b04      	subs	r3, #4
 8007c2c:	429d      	cmp	r5, r3
 8007c2e:	461a      	mov	r2, r3
 8007c30:	d32f      	bcc.n	8007c92 <quorem+0xf4>
 8007c32:	613c      	str	r4, [r7, #16]
 8007c34:	4638      	mov	r0, r7
 8007c36:	f001 f979 	bl	8008f2c <__mcmp>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	db25      	blt.n	8007c8a <quorem+0xec>
 8007c3e:	4629      	mov	r1, r5
 8007c40:	2000      	movs	r0, #0
 8007c42:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c46:	f8d1 c000 	ldr.w	ip, [r1]
 8007c4a:	fa1f fe82 	uxth.w	lr, r2
 8007c4e:	fa1f f38c 	uxth.w	r3, ip
 8007c52:	eba3 030e 	sub.w	r3, r3, lr
 8007c56:	4403      	add	r3, r0
 8007c58:	0c12      	lsrs	r2, r2, #16
 8007c5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c68:	45c1      	cmp	r9, r8
 8007c6a:	f841 3b04 	str.w	r3, [r1], #4
 8007c6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c72:	d2e6      	bcs.n	8007c42 <quorem+0xa4>
 8007c74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7c:	b922      	cbnz	r2, 8007c88 <quorem+0xea>
 8007c7e:	3b04      	subs	r3, #4
 8007c80:	429d      	cmp	r5, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	d30b      	bcc.n	8007c9e <quorem+0x100>
 8007c86:	613c      	str	r4, [r7, #16]
 8007c88:	3601      	adds	r6, #1
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	b003      	add	sp, #12
 8007c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d1cb      	bne.n	8007c32 <quorem+0x94>
 8007c9a:	3c01      	subs	r4, #1
 8007c9c:	e7c6      	b.n	8007c2c <quorem+0x8e>
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d1ef      	bne.n	8007c86 <quorem+0xe8>
 8007ca6:	3c01      	subs	r4, #1
 8007ca8:	e7ea      	b.n	8007c80 <quorem+0xe2>
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7ee      	b.n	8007c8c <quorem+0xee>
	...

08007cb0 <_dtoa_r>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	69c7      	ldr	r7, [r0, #28]
 8007cb6:	b099      	sub	sp, #100	@ 0x64
 8007cb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007cbc:	ec55 4b10 	vmov	r4, r5, d0
 8007cc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007cc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cc4:	4683      	mov	fp, r0
 8007cc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cca:	b97f      	cbnz	r7, 8007cec <_dtoa_r+0x3c>
 8007ccc:	2010      	movs	r0, #16
 8007cce:	f000 fdfd 	bl	80088cc <malloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007cd8:	b920      	cbnz	r0, 8007ce4 <_dtoa_r+0x34>
 8007cda:	4ba7      	ldr	r3, [pc, #668]	@ (8007f78 <_dtoa_r+0x2c8>)
 8007cdc:	21ef      	movs	r1, #239	@ 0xef
 8007cde:	48a7      	ldr	r0, [pc, #668]	@ (8007f7c <_dtoa_r+0x2cc>)
 8007ce0:	f001 fc68 	bl	80095b4 <__assert_func>
 8007ce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ce8:	6007      	str	r7, [r0, #0]
 8007cea:	60c7      	str	r7, [r0, #12]
 8007cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cf0:	6819      	ldr	r1, [r3, #0]
 8007cf2:	b159      	cbz	r1, 8007d0c <_dtoa_r+0x5c>
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	604a      	str	r2, [r1, #4]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4093      	lsls	r3, r2
 8007cfc:	608b      	str	r3, [r1, #8]
 8007cfe:	4658      	mov	r0, fp
 8007d00:	f000 feda 	bl	8008ab8 <_Bfree>
 8007d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	1e2b      	subs	r3, r5, #0
 8007d0e:	bfb9      	ittee	lt
 8007d10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d14:	9303      	strlt	r3, [sp, #12]
 8007d16:	2300      	movge	r3, #0
 8007d18:	6033      	strge	r3, [r6, #0]
 8007d1a:	9f03      	ldr	r7, [sp, #12]
 8007d1c:	4b98      	ldr	r3, [pc, #608]	@ (8007f80 <_dtoa_r+0x2d0>)
 8007d1e:	bfbc      	itt	lt
 8007d20:	2201      	movlt	r2, #1
 8007d22:	6032      	strlt	r2, [r6, #0]
 8007d24:	43bb      	bics	r3, r7
 8007d26:	d112      	bne.n	8007d4e <_dtoa_r+0x9e>
 8007d28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d34:	4323      	orrs	r3, r4
 8007d36:	f000 854d 	beq.w	80087d4 <_dtoa_r+0xb24>
 8007d3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f94 <_dtoa_r+0x2e4>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 854f 	beq.w	80087e4 <_dtoa_r+0xb34>
 8007d46:	f10a 0303 	add.w	r3, sl, #3
 8007d4a:	f000 bd49 	b.w	80087e0 <_dtoa_r+0xb30>
 8007d4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d52:	2200      	movs	r2, #0
 8007d54:	ec51 0b17 	vmov	r0, r1, d7
 8007d58:	2300      	movs	r3, #0
 8007d5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d5e:	f7f8 fed3 	bl	8000b08 <__aeabi_dcmpeq>
 8007d62:	4680      	mov	r8, r0
 8007d64:	b158      	cbz	r0, 8007d7e <_dtoa_r+0xce>
 8007d66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d68:	2301      	movs	r3, #1
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d6e:	b113      	cbz	r3, 8007d76 <_dtoa_r+0xc6>
 8007d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d72:	4b84      	ldr	r3, [pc, #528]	@ (8007f84 <_dtoa_r+0x2d4>)
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f98 <_dtoa_r+0x2e8>
 8007d7a:	f000 bd33 	b.w	80087e4 <_dtoa_r+0xb34>
 8007d7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d82:	aa16      	add	r2, sp, #88	@ 0x58
 8007d84:	a917      	add	r1, sp, #92	@ 0x5c
 8007d86:	4658      	mov	r0, fp
 8007d88:	f001 f980 	bl	800908c <__d2b>
 8007d8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d90:	4681      	mov	r9, r0
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	d077      	beq.n	8007e86 <_dtoa_r+0x1d6>
 8007d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007da4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007da8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007dac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007db0:	4619      	mov	r1, r3
 8007db2:	2200      	movs	r2, #0
 8007db4:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <_dtoa_r+0x2d8>)
 8007db6:	f7f8 fa87 	bl	80002c8 <__aeabi_dsub>
 8007dba:	a369      	add	r3, pc, #420	@ (adr r3, 8007f60 <_dtoa_r+0x2b0>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f7f8 fc3a 	bl	8000638 <__aeabi_dmul>
 8007dc4:	a368      	add	r3, pc, #416	@ (adr r3, 8007f68 <_dtoa_r+0x2b8>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fa7f 	bl	80002cc <__adddf3>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	f7f8 fbc6 	bl	8000564 <__aeabi_i2d>
 8007dd8:	a365      	add	r3, pc, #404	@ (adr r3, 8007f70 <_dtoa_r+0x2c0>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fc2b 	bl	8000638 <__aeabi_dmul>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 fa6f 	bl	80002cc <__adddf3>
 8007dee:	4604      	mov	r4, r0
 8007df0:	460d      	mov	r5, r1
 8007df2:	f7f8 fed1 	bl	8000b98 <__aeabi_d2iz>
 8007df6:	2200      	movs	r2, #0
 8007df8:	4607      	mov	r7, r0
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f8 fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8007e04:	b140      	cbz	r0, 8007e18 <_dtoa_r+0x168>
 8007e06:	4638      	mov	r0, r7
 8007e08:	f7f8 fbac 	bl	8000564 <__aeabi_i2d>
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	462b      	mov	r3, r5
 8007e10:	f7f8 fe7a 	bl	8000b08 <__aeabi_dcmpeq>
 8007e14:	b900      	cbnz	r0, 8007e18 <_dtoa_r+0x168>
 8007e16:	3f01      	subs	r7, #1
 8007e18:	2f16      	cmp	r7, #22
 8007e1a:	d851      	bhi.n	8007ec0 <_dtoa_r+0x210>
 8007e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8007f8c <_dtoa_r+0x2dc>)
 8007e1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e2a:	f7f8 fe77 	bl	8000b1c <__aeabi_dcmplt>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d048      	beq.n	8007ec4 <_dtoa_r+0x214>
 8007e32:	3f01      	subs	r7, #1
 8007e34:	2300      	movs	r3, #0
 8007e36:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e3a:	1b9b      	subs	r3, r3, r6
 8007e3c:	1e5a      	subs	r2, r3, #1
 8007e3e:	bf44      	itt	mi
 8007e40:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e44:	2300      	movmi	r3, #0
 8007e46:	9208      	str	r2, [sp, #32]
 8007e48:	bf54      	ite	pl
 8007e4a:	f04f 0800 	movpl.w	r8, #0
 8007e4e:	9308      	strmi	r3, [sp, #32]
 8007e50:	2f00      	cmp	r7, #0
 8007e52:	db39      	blt.n	8007ec8 <_dtoa_r+0x218>
 8007e54:	9b08      	ldr	r3, [sp, #32]
 8007e56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e58:	443b      	add	r3, r7
 8007e5a:	9308      	str	r3, [sp, #32]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d864      	bhi.n	8007f30 <_dtoa_r+0x280>
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	bfc4      	itt	gt
 8007e6a:	3b04      	subgt	r3, #4
 8007e6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e70:	f1a3 0302 	sub.w	r3, r3, #2
 8007e74:	bfcc      	ite	gt
 8007e76:	2400      	movgt	r4, #0
 8007e78:	2401      	movle	r4, #1
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d863      	bhi.n	8007f46 <_dtoa_r+0x296>
 8007e7e:	e8df f003 	tbb	[pc, r3]
 8007e82:	372a      	.short	0x372a
 8007e84:	5535      	.short	0x5535
 8007e86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e8a:	441e      	add	r6, r3
 8007e8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	bfc1      	itttt	gt
 8007e94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e98:	409f      	lslgt	r7, r3
 8007e9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ea2:	bfd6      	itet	le
 8007ea4:	f1c3 0320 	rsble	r3, r3, #32
 8007ea8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007eac:	fa04 f003 	lslle.w	r0, r4, r3
 8007eb0:	f7f8 fb48 	bl	8000544 <__aeabi_ui2d>
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007eba:	3e01      	subs	r6, #1
 8007ebc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007ebe:	e777      	b.n	8007db0 <_dtoa_r+0x100>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e7b8      	b.n	8007e36 <_dtoa_r+0x186>
 8007ec4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ec6:	e7b7      	b.n	8007e38 <_dtoa_r+0x188>
 8007ec8:	427b      	negs	r3, r7
 8007eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ecc:	2300      	movs	r3, #0
 8007ece:	eba8 0807 	sub.w	r8, r8, r7
 8007ed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ed4:	e7c4      	b.n	8007e60 <_dtoa_r+0x1b0>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dc35      	bgt.n	8007f4c <_dtoa_r+0x29c>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	9307      	str	r3, [sp, #28]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eea:	e00b      	b.n	8007f04 <_dtoa_r+0x254>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e7f3      	b.n	8007ed8 <_dtoa_r+0x228>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ef6:	18fb      	adds	r3, r7, r3
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	bfb8      	it	lt
 8007f02:	2301      	movlt	r3, #1
 8007f04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	f102 0514 	add.w	r5, r2, #20
 8007f10:	429d      	cmp	r5, r3
 8007f12:	d91f      	bls.n	8007f54 <_dtoa_r+0x2a4>
 8007f14:	6041      	str	r1, [r0, #4]
 8007f16:	4658      	mov	r0, fp
 8007f18:	f000 fd8e 	bl	8008a38 <_Balloc>
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d13c      	bne.n	8007f9c <_dtoa_r+0x2ec>
 8007f22:	4b1b      	ldr	r3, [pc, #108]	@ (8007f90 <_dtoa_r+0x2e0>)
 8007f24:	4602      	mov	r2, r0
 8007f26:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f2a:	e6d8      	b.n	8007cde <_dtoa_r+0x2e>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e7e0      	b.n	8007ef2 <_dtoa_r+0x242>
 8007f30:	2401      	movs	r4, #1
 8007f32:	2300      	movs	r3, #0
 8007f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	9307      	str	r3, [sp, #28]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2312      	movs	r3, #18
 8007f44:	e7d0      	b.n	8007ee8 <_dtoa_r+0x238>
 8007f46:	2301      	movs	r3, #1
 8007f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f4a:	e7f5      	b.n	8007f38 <_dtoa_r+0x288>
 8007f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	9307      	str	r3, [sp, #28]
 8007f52:	e7d7      	b.n	8007f04 <_dtoa_r+0x254>
 8007f54:	3101      	adds	r1, #1
 8007f56:	0052      	lsls	r2, r2, #1
 8007f58:	e7d8      	b.n	8007f0c <_dtoa_r+0x25c>
 8007f5a:	bf00      	nop
 8007f5c:	f3af 8000 	nop.w
 8007f60:	636f4361 	.word	0x636f4361
 8007f64:	3fd287a7 	.word	0x3fd287a7
 8007f68:	8b60c8b3 	.word	0x8b60c8b3
 8007f6c:	3fc68a28 	.word	0x3fc68a28
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	08009cc9 	.word	0x08009cc9
 8007f7c:	08009ce0 	.word	0x08009ce0
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	08009c99 	.word	0x08009c99
 8007f88:	3ff80000 	.word	0x3ff80000
 8007f8c:	08009dd8 	.word	0x08009dd8
 8007f90:	08009d38 	.word	0x08009d38
 8007f94:	08009cc5 	.word	0x08009cc5
 8007f98:	08009c98 	.word	0x08009c98
 8007f9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fa0:	6018      	str	r0, [r3, #0]
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	2b0e      	cmp	r3, #14
 8007fa6:	f200 80a4 	bhi.w	80080f2 <_dtoa_r+0x442>
 8007faa:	2c00      	cmp	r4, #0
 8007fac:	f000 80a1 	beq.w	80080f2 <_dtoa_r+0x442>
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	dd33      	ble.n	800801c <_dtoa_r+0x36c>
 8007fb4:	4bad      	ldr	r3, [pc, #692]	@ (800826c <_dtoa_r+0x5bc>)
 8007fb6:	f007 020f 	and.w	r2, r7, #15
 8007fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fbe:	ed93 7b00 	vldr	d7, [r3]
 8007fc2:	05f8      	lsls	r0, r7, #23
 8007fc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007fc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fcc:	d516      	bpl.n	8007ffc <_dtoa_r+0x34c>
 8007fce:	4ba8      	ldr	r3, [pc, #672]	@ (8008270 <_dtoa_r+0x5c0>)
 8007fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fd8:	f7f8 fc58 	bl	800088c <__aeabi_ddiv>
 8007fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe0:	f004 040f 	and.w	r4, r4, #15
 8007fe4:	2603      	movs	r6, #3
 8007fe6:	4da2      	ldr	r5, [pc, #648]	@ (8008270 <_dtoa_r+0x5c0>)
 8007fe8:	b954      	cbnz	r4, 8008000 <_dtoa_r+0x350>
 8007fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff2:	f7f8 fc4b 	bl	800088c <__aeabi_ddiv>
 8007ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffa:	e028      	b.n	800804e <_dtoa_r+0x39e>
 8007ffc:	2602      	movs	r6, #2
 8007ffe:	e7f2      	b.n	8007fe6 <_dtoa_r+0x336>
 8008000:	07e1      	lsls	r1, r4, #31
 8008002:	d508      	bpl.n	8008016 <_dtoa_r+0x366>
 8008004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800800c:	f7f8 fb14 	bl	8000638 <__aeabi_dmul>
 8008010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008014:	3601      	adds	r6, #1
 8008016:	1064      	asrs	r4, r4, #1
 8008018:	3508      	adds	r5, #8
 800801a:	e7e5      	b.n	8007fe8 <_dtoa_r+0x338>
 800801c:	f000 80d2 	beq.w	80081c4 <_dtoa_r+0x514>
 8008020:	427c      	negs	r4, r7
 8008022:	4b92      	ldr	r3, [pc, #584]	@ (800826c <_dtoa_r+0x5bc>)
 8008024:	4d92      	ldr	r5, [pc, #584]	@ (8008270 <_dtoa_r+0x5c0>)
 8008026:	f004 020f 	and.w	r2, r4, #15
 800802a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008036:	f7f8 faff 	bl	8000638 <__aeabi_dmul>
 800803a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800803e:	1124      	asrs	r4, r4, #4
 8008040:	2300      	movs	r3, #0
 8008042:	2602      	movs	r6, #2
 8008044:	2c00      	cmp	r4, #0
 8008046:	f040 80b2 	bne.w	80081ae <_dtoa_r+0x4fe>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1d3      	bne.n	8007ff6 <_dtoa_r+0x346>
 800804e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008050:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80b7 	beq.w	80081c8 <_dtoa_r+0x518>
 800805a:	4b86      	ldr	r3, [pc, #536]	@ (8008274 <_dtoa_r+0x5c4>)
 800805c:	2200      	movs	r2, #0
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f000 80ae 	beq.w	80081c8 <_dtoa_r+0x518>
 800806c:	9b07      	ldr	r3, [sp, #28]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 80aa 	beq.w	80081c8 <_dtoa_r+0x518>
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	dd37      	ble.n	80080ea <_dtoa_r+0x43a>
 800807a:	1e7b      	subs	r3, r7, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	4620      	mov	r0, r4
 8008080:	4b7d      	ldr	r3, [pc, #500]	@ (8008278 <_dtoa_r+0x5c8>)
 8008082:	2200      	movs	r2, #0
 8008084:	4629      	mov	r1, r5
 8008086:	f7f8 fad7 	bl	8000638 <__aeabi_dmul>
 800808a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800808e:	9c00      	ldr	r4, [sp, #0]
 8008090:	3601      	adds	r6, #1
 8008092:	4630      	mov	r0, r6
 8008094:	f7f8 fa66 	bl	8000564 <__aeabi_i2d>
 8008098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800809c:	f7f8 facc 	bl	8000638 <__aeabi_dmul>
 80080a0:	4b76      	ldr	r3, [pc, #472]	@ (800827c <_dtoa_r+0x5cc>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	f7f8 f912 	bl	80002cc <__adddf3>
 80080a8:	4605      	mov	r5, r0
 80080aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	f040 808d 	bne.w	80081ce <_dtoa_r+0x51e>
 80080b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b8:	4b71      	ldr	r3, [pc, #452]	@ (8008280 <_dtoa_r+0x5d0>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	f7f8 f904 	bl	80002c8 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080c8:	462a      	mov	r2, r5
 80080ca:	4633      	mov	r3, r6
 80080cc:	f7f8 fd44 	bl	8000b58 <__aeabi_dcmpgt>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	f040 828b 	bne.w	80085ec <_dtoa_r+0x93c>
 80080d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080da:	462a      	mov	r2, r5
 80080dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080e0:	f7f8 fd1c 	bl	8000b1c <__aeabi_dcmplt>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f040 8128 	bne.w	800833a <_dtoa_r+0x68a>
 80080ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f2c0 815a 	blt.w	80083ae <_dtoa_r+0x6fe>
 80080fa:	2f0e      	cmp	r7, #14
 80080fc:	f300 8157 	bgt.w	80083ae <_dtoa_r+0x6fe>
 8008100:	4b5a      	ldr	r3, [pc, #360]	@ (800826c <_dtoa_r+0x5bc>)
 8008102:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008106:	ed93 7b00 	vldr	d7, [r3]
 800810a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800810c:	2b00      	cmp	r3, #0
 800810e:	ed8d 7b00 	vstr	d7, [sp]
 8008112:	da03      	bge.n	800811c <_dtoa_r+0x46c>
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	f340 8101 	ble.w	800831e <_dtoa_r+0x66e>
 800811c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008120:	4656      	mov	r6, sl
 8008122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 fbaf 	bl	800088c <__aeabi_ddiv>
 800812e:	f7f8 fd33 	bl	8000b98 <__aeabi_d2iz>
 8008132:	4680      	mov	r8, r0
 8008134:	f7f8 fa16 	bl	8000564 <__aeabi_i2d>
 8008138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800813c:	f7f8 fa7c 	bl	8000638 <__aeabi_dmul>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800814c:	f7f8 f8bc 	bl	80002c8 <__aeabi_dsub>
 8008150:	f806 4b01 	strb.w	r4, [r6], #1
 8008154:	9d07      	ldr	r5, [sp, #28]
 8008156:	eba6 040a 	sub.w	r4, r6, sl
 800815a:	42a5      	cmp	r5, r4
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	f040 8117 	bne.w	8008392 <_dtoa_r+0x6e2>
 8008164:	f7f8 f8b2 	bl	80002cc <__adddf3>
 8008168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	f7f8 fcf2 	bl	8000b58 <__aeabi_dcmpgt>
 8008174:	2800      	cmp	r0, #0
 8008176:	f040 80f9 	bne.w	800836c <_dtoa_r+0x6bc>
 800817a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 fcc1 	bl	8000b08 <__aeabi_dcmpeq>
 8008186:	b118      	cbz	r0, 8008190 <_dtoa_r+0x4e0>
 8008188:	f018 0f01 	tst.w	r8, #1
 800818c:	f040 80ee 	bne.w	800836c <_dtoa_r+0x6bc>
 8008190:	4649      	mov	r1, r9
 8008192:	4658      	mov	r0, fp
 8008194:	f000 fc90 	bl	8008ab8 <_Bfree>
 8008198:	2300      	movs	r3, #0
 800819a:	7033      	strb	r3, [r6, #0]
 800819c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800819e:	3701      	adds	r7, #1
 80081a0:	601f      	str	r7, [r3, #0]
 80081a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 831d 	beq.w	80087e4 <_dtoa_r+0xb34>
 80081aa:	601e      	str	r6, [r3, #0]
 80081ac:	e31a      	b.n	80087e4 <_dtoa_r+0xb34>
 80081ae:	07e2      	lsls	r2, r4, #31
 80081b0:	d505      	bpl.n	80081be <_dtoa_r+0x50e>
 80081b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081b6:	f7f8 fa3f 	bl	8000638 <__aeabi_dmul>
 80081ba:	3601      	adds	r6, #1
 80081bc:	2301      	movs	r3, #1
 80081be:	1064      	asrs	r4, r4, #1
 80081c0:	3508      	adds	r5, #8
 80081c2:	e73f      	b.n	8008044 <_dtoa_r+0x394>
 80081c4:	2602      	movs	r6, #2
 80081c6:	e742      	b.n	800804e <_dtoa_r+0x39e>
 80081c8:	9c07      	ldr	r4, [sp, #28]
 80081ca:	9704      	str	r7, [sp, #16]
 80081cc:	e761      	b.n	8008092 <_dtoa_r+0x3e2>
 80081ce:	4b27      	ldr	r3, [pc, #156]	@ (800826c <_dtoa_r+0x5bc>)
 80081d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081da:	4454      	add	r4, sl
 80081dc:	2900      	cmp	r1, #0
 80081de:	d053      	beq.n	8008288 <_dtoa_r+0x5d8>
 80081e0:	4928      	ldr	r1, [pc, #160]	@ (8008284 <_dtoa_r+0x5d4>)
 80081e2:	2000      	movs	r0, #0
 80081e4:	f7f8 fb52 	bl	800088c <__aeabi_ddiv>
 80081e8:	4633      	mov	r3, r6
 80081ea:	462a      	mov	r2, r5
 80081ec:	f7f8 f86c 	bl	80002c8 <__aeabi_dsub>
 80081f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081f4:	4656      	mov	r6, sl
 80081f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fa:	f7f8 fccd 	bl	8000b98 <__aeabi_d2iz>
 80081fe:	4605      	mov	r5, r0
 8008200:	f7f8 f9b0 	bl	8000564 <__aeabi_i2d>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820c:	f7f8 f85c 	bl	80002c8 <__aeabi_dsub>
 8008210:	3530      	adds	r5, #48	@ 0x30
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800821a:	f806 5b01 	strb.w	r5, [r6], #1
 800821e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008222:	f7f8 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8008226:	2800      	cmp	r0, #0
 8008228:	d171      	bne.n	800830e <_dtoa_r+0x65e>
 800822a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800822e:	4911      	ldr	r1, [pc, #68]	@ (8008274 <_dtoa_r+0x5c4>)
 8008230:	2000      	movs	r0, #0
 8008232:	f7f8 f849 	bl	80002c8 <__aeabi_dsub>
 8008236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800823a:	f7f8 fc6f 	bl	8000b1c <__aeabi_dcmplt>
 800823e:	2800      	cmp	r0, #0
 8008240:	f040 8095 	bne.w	800836e <_dtoa_r+0x6be>
 8008244:	42a6      	cmp	r6, r4
 8008246:	f43f af50 	beq.w	80080ea <_dtoa_r+0x43a>
 800824a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800824e:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <_dtoa_r+0x5c8>)
 8008250:	2200      	movs	r2, #0
 8008252:	f7f8 f9f1 	bl	8000638 <__aeabi_dmul>
 8008256:	4b08      	ldr	r3, [pc, #32]	@ (8008278 <_dtoa_r+0x5c8>)
 8008258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800825c:	2200      	movs	r2, #0
 800825e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008262:	f7f8 f9e9 	bl	8000638 <__aeabi_dmul>
 8008266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800826a:	e7c4      	b.n	80081f6 <_dtoa_r+0x546>
 800826c:	08009dd8 	.word	0x08009dd8
 8008270:	08009db0 	.word	0x08009db0
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	40240000 	.word	0x40240000
 800827c:	401c0000 	.word	0x401c0000
 8008280:	40140000 	.word	0x40140000
 8008284:	3fe00000 	.word	0x3fe00000
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	f7f8 f9d4 	bl	8000638 <__aeabi_dmul>
 8008290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008294:	9415      	str	r4, [sp, #84]	@ 0x54
 8008296:	4656      	mov	r6, sl
 8008298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800829c:	f7f8 fc7c 	bl	8000b98 <__aeabi_d2iz>
 80082a0:	4605      	mov	r5, r0
 80082a2:	f7f8 f95f 	bl	8000564 <__aeabi_i2d>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ae:	f7f8 f80b 	bl	80002c8 <__aeabi_dsub>
 80082b2:	3530      	adds	r5, #48	@ 0x30
 80082b4:	f806 5b01 	strb.w	r5, [r6], #1
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	42a6      	cmp	r6, r4
 80082be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	d124      	bne.n	8008312 <_dtoa_r+0x662>
 80082c8:	4bac      	ldr	r3, [pc, #688]	@ (800857c <_dtoa_r+0x8cc>)
 80082ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082ce:	f7f7 fffd 	bl	80002cc <__adddf3>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082da:	f7f8 fc3d 	bl	8000b58 <__aeabi_dcmpgt>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d145      	bne.n	800836e <_dtoa_r+0x6be>
 80082e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082e6:	49a5      	ldr	r1, [pc, #660]	@ (800857c <_dtoa_r+0x8cc>)
 80082e8:	2000      	movs	r0, #0
 80082ea:	f7f7 ffed 	bl	80002c8 <__aeabi_dsub>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082f6:	f7f8 fc11 	bl	8000b1c <__aeabi_dcmplt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f aef5 	beq.w	80080ea <_dtoa_r+0x43a>
 8008300:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008302:	1e73      	subs	r3, r6, #1
 8008304:	9315      	str	r3, [sp, #84]	@ 0x54
 8008306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800830a:	2b30      	cmp	r3, #48	@ 0x30
 800830c:	d0f8      	beq.n	8008300 <_dtoa_r+0x650>
 800830e:	9f04      	ldr	r7, [sp, #16]
 8008310:	e73e      	b.n	8008190 <_dtoa_r+0x4e0>
 8008312:	4b9b      	ldr	r3, [pc, #620]	@ (8008580 <_dtoa_r+0x8d0>)
 8008314:	f7f8 f990 	bl	8000638 <__aeabi_dmul>
 8008318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800831c:	e7bc      	b.n	8008298 <_dtoa_r+0x5e8>
 800831e:	d10c      	bne.n	800833a <_dtoa_r+0x68a>
 8008320:	4b98      	ldr	r3, [pc, #608]	@ (8008584 <_dtoa_r+0x8d4>)
 8008322:	2200      	movs	r2, #0
 8008324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008328:	f7f8 f986 	bl	8000638 <__aeabi_dmul>
 800832c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008330:	f7f8 fc08 	bl	8000b44 <__aeabi_dcmpge>
 8008334:	2800      	cmp	r0, #0
 8008336:	f000 8157 	beq.w	80085e8 <_dtoa_r+0x938>
 800833a:	2400      	movs	r4, #0
 800833c:	4625      	mov	r5, r4
 800833e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008340:	43db      	mvns	r3, r3
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	4656      	mov	r6, sl
 8008346:	2700      	movs	r7, #0
 8008348:	4621      	mov	r1, r4
 800834a:	4658      	mov	r0, fp
 800834c:	f000 fbb4 	bl	8008ab8 <_Bfree>
 8008350:	2d00      	cmp	r5, #0
 8008352:	d0dc      	beq.n	800830e <_dtoa_r+0x65e>
 8008354:	b12f      	cbz	r7, 8008362 <_dtoa_r+0x6b2>
 8008356:	42af      	cmp	r7, r5
 8008358:	d003      	beq.n	8008362 <_dtoa_r+0x6b2>
 800835a:	4639      	mov	r1, r7
 800835c:	4658      	mov	r0, fp
 800835e:	f000 fbab 	bl	8008ab8 <_Bfree>
 8008362:	4629      	mov	r1, r5
 8008364:	4658      	mov	r0, fp
 8008366:	f000 fba7 	bl	8008ab8 <_Bfree>
 800836a:	e7d0      	b.n	800830e <_dtoa_r+0x65e>
 800836c:	9704      	str	r7, [sp, #16]
 800836e:	4633      	mov	r3, r6
 8008370:	461e      	mov	r6, r3
 8008372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008376:	2a39      	cmp	r2, #57	@ 0x39
 8008378:	d107      	bne.n	800838a <_dtoa_r+0x6da>
 800837a:	459a      	cmp	sl, r3
 800837c:	d1f8      	bne.n	8008370 <_dtoa_r+0x6c0>
 800837e:	9a04      	ldr	r2, [sp, #16]
 8008380:	3201      	adds	r2, #1
 8008382:	9204      	str	r2, [sp, #16]
 8008384:	2230      	movs	r2, #48	@ 0x30
 8008386:	f88a 2000 	strb.w	r2, [sl]
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	3201      	adds	r2, #1
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e7bd      	b.n	800830e <_dtoa_r+0x65e>
 8008392:	4b7b      	ldr	r3, [pc, #492]	@ (8008580 <_dtoa_r+0x8d0>)
 8008394:	2200      	movs	r2, #0
 8008396:	f7f8 f94f 	bl	8000638 <__aeabi_dmul>
 800839a:	2200      	movs	r2, #0
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	460d      	mov	r5, r1
 80083a2:	f7f8 fbb1 	bl	8000b08 <__aeabi_dcmpeq>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f43f aebb 	beq.w	8008122 <_dtoa_r+0x472>
 80083ac:	e6f0      	b.n	8008190 <_dtoa_r+0x4e0>
 80083ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	f000 80db 	beq.w	800856c <_dtoa_r+0x8bc>
 80083b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083b8:	2a01      	cmp	r2, #1
 80083ba:	f300 80bf 	bgt.w	800853c <_dtoa_r+0x88c>
 80083be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	f000 80b7 	beq.w	8008534 <_dtoa_r+0x884>
 80083c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083cc:	4646      	mov	r6, r8
 80083ce:	9a08      	ldr	r2, [sp, #32]
 80083d0:	2101      	movs	r1, #1
 80083d2:	441a      	add	r2, r3
 80083d4:	4658      	mov	r0, fp
 80083d6:	4498      	add	r8, r3
 80083d8:	9208      	str	r2, [sp, #32]
 80083da:	f000 fc21 	bl	8008c20 <__i2b>
 80083de:	4605      	mov	r5, r0
 80083e0:	b15e      	cbz	r6, 80083fa <_dtoa_r+0x74a>
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd08      	ble.n	80083fa <_dtoa_r+0x74a>
 80083e8:	42b3      	cmp	r3, r6
 80083ea:	9a08      	ldr	r2, [sp, #32]
 80083ec:	bfa8      	it	ge
 80083ee:	4633      	movge	r3, r6
 80083f0:	eba8 0803 	sub.w	r8, r8, r3
 80083f4:	1af6      	subs	r6, r6, r3
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083fc:	b1f3      	cbz	r3, 800843c <_dtoa_r+0x78c>
 80083fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 80b7 	beq.w	8008574 <_dtoa_r+0x8c4>
 8008406:	b18c      	cbz	r4, 800842c <_dtoa_r+0x77c>
 8008408:	4629      	mov	r1, r5
 800840a:	4622      	mov	r2, r4
 800840c:	4658      	mov	r0, fp
 800840e:	f000 fcc7 	bl	8008da0 <__pow5mult>
 8008412:	464a      	mov	r2, r9
 8008414:	4601      	mov	r1, r0
 8008416:	4605      	mov	r5, r0
 8008418:	4658      	mov	r0, fp
 800841a:	f000 fc17 	bl	8008c4c <__multiply>
 800841e:	4649      	mov	r1, r9
 8008420:	9004      	str	r0, [sp, #16]
 8008422:	4658      	mov	r0, fp
 8008424:	f000 fb48 	bl	8008ab8 <_Bfree>
 8008428:	9b04      	ldr	r3, [sp, #16]
 800842a:	4699      	mov	r9, r3
 800842c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800842e:	1b1a      	subs	r2, r3, r4
 8008430:	d004      	beq.n	800843c <_dtoa_r+0x78c>
 8008432:	4649      	mov	r1, r9
 8008434:	4658      	mov	r0, fp
 8008436:	f000 fcb3 	bl	8008da0 <__pow5mult>
 800843a:	4681      	mov	r9, r0
 800843c:	2101      	movs	r1, #1
 800843e:	4658      	mov	r0, fp
 8008440:	f000 fbee 	bl	8008c20 <__i2b>
 8008444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008446:	4604      	mov	r4, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 81cf 	beq.w	80087ec <_dtoa_r+0xb3c>
 800844e:	461a      	mov	r2, r3
 8008450:	4601      	mov	r1, r0
 8008452:	4658      	mov	r0, fp
 8008454:	f000 fca4 	bl	8008da0 <__pow5mult>
 8008458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800845a:	2b01      	cmp	r3, #1
 800845c:	4604      	mov	r4, r0
 800845e:	f300 8095 	bgt.w	800858c <_dtoa_r+0x8dc>
 8008462:	9b02      	ldr	r3, [sp, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 8087 	bne.w	8008578 <_dtoa_r+0x8c8>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 8089 	bne.w	8008588 <_dtoa_r+0x8d8>
 8008476:	9b03      	ldr	r3, [sp, #12]
 8008478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800847c:	0d1b      	lsrs	r3, r3, #20
 800847e:	051b      	lsls	r3, r3, #20
 8008480:	b12b      	cbz	r3, 800848e <_dtoa_r+0x7de>
 8008482:	9b08      	ldr	r3, [sp, #32]
 8008484:	3301      	adds	r3, #1
 8008486:	9308      	str	r3, [sp, #32]
 8008488:	f108 0801 	add.w	r8, r8, #1
 800848c:	2301      	movs	r3, #1
 800848e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 81b0 	beq.w	80087f8 <_dtoa_r+0xb48>
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800849e:	6918      	ldr	r0, [r3, #16]
 80084a0:	f000 fb72 	bl	8008b88 <__hi0bits>
 80084a4:	f1c0 0020 	rsb	r0, r0, #32
 80084a8:	9b08      	ldr	r3, [sp, #32]
 80084aa:	4418      	add	r0, r3
 80084ac:	f010 001f 	ands.w	r0, r0, #31
 80084b0:	d077      	beq.n	80085a2 <_dtoa_r+0x8f2>
 80084b2:	f1c0 0320 	rsb	r3, r0, #32
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	dd6b      	ble.n	8008592 <_dtoa_r+0x8e2>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	f1c0 001c 	rsb	r0, r0, #28
 80084c0:	4403      	add	r3, r0
 80084c2:	4480      	add	r8, r0
 80084c4:	4406      	add	r6, r0
 80084c6:	9308      	str	r3, [sp, #32]
 80084c8:	f1b8 0f00 	cmp.w	r8, #0
 80084cc:	dd05      	ble.n	80084da <_dtoa_r+0x82a>
 80084ce:	4649      	mov	r1, r9
 80084d0:	4642      	mov	r2, r8
 80084d2:	4658      	mov	r0, fp
 80084d4:	f000 fcbe 	bl	8008e54 <__lshift>
 80084d8:	4681      	mov	r9, r0
 80084da:	9b08      	ldr	r3, [sp, #32]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dd05      	ble.n	80084ec <_dtoa_r+0x83c>
 80084e0:	4621      	mov	r1, r4
 80084e2:	461a      	mov	r2, r3
 80084e4:	4658      	mov	r0, fp
 80084e6:	f000 fcb5 	bl	8008e54 <__lshift>
 80084ea:	4604      	mov	r4, r0
 80084ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d059      	beq.n	80085a6 <_dtoa_r+0x8f6>
 80084f2:	4621      	mov	r1, r4
 80084f4:	4648      	mov	r0, r9
 80084f6:	f000 fd19 	bl	8008f2c <__mcmp>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	da53      	bge.n	80085a6 <_dtoa_r+0x8f6>
 80084fe:	1e7b      	subs	r3, r7, #1
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	4649      	mov	r1, r9
 8008504:	2300      	movs	r3, #0
 8008506:	220a      	movs	r2, #10
 8008508:	4658      	mov	r0, fp
 800850a:	f000 faf7 	bl	8008afc <__multadd>
 800850e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008510:	4681      	mov	r9, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 8172 	beq.w	80087fc <_dtoa_r+0xb4c>
 8008518:	2300      	movs	r3, #0
 800851a:	4629      	mov	r1, r5
 800851c:	220a      	movs	r2, #10
 800851e:	4658      	mov	r0, fp
 8008520:	f000 faec 	bl	8008afc <__multadd>
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	4605      	mov	r5, r0
 800852a:	dc67      	bgt.n	80085fc <_dtoa_r+0x94c>
 800852c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852e:	2b02      	cmp	r3, #2
 8008530:	dc41      	bgt.n	80085b6 <_dtoa_r+0x906>
 8008532:	e063      	b.n	80085fc <_dtoa_r+0x94c>
 8008534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800853a:	e746      	b.n	80083ca <_dtoa_r+0x71a>
 800853c:	9b07      	ldr	r3, [sp, #28]
 800853e:	1e5c      	subs	r4, r3, #1
 8008540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008542:	42a3      	cmp	r3, r4
 8008544:	bfbf      	itttt	lt
 8008546:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008548:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800854a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800854c:	1ae3      	sublt	r3, r4, r3
 800854e:	bfb4      	ite	lt
 8008550:	18d2      	addlt	r2, r2, r3
 8008552:	1b1c      	subge	r4, r3, r4
 8008554:	9b07      	ldr	r3, [sp, #28]
 8008556:	bfbc      	itt	lt
 8008558:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800855a:	2400      	movlt	r4, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfb5      	itete	lt
 8008560:	eba8 0603 	sublt.w	r6, r8, r3
 8008564:	9b07      	ldrge	r3, [sp, #28]
 8008566:	2300      	movlt	r3, #0
 8008568:	4646      	movge	r6, r8
 800856a:	e730      	b.n	80083ce <_dtoa_r+0x71e>
 800856c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800856e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008570:	4646      	mov	r6, r8
 8008572:	e735      	b.n	80083e0 <_dtoa_r+0x730>
 8008574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008576:	e75c      	b.n	8008432 <_dtoa_r+0x782>
 8008578:	2300      	movs	r3, #0
 800857a:	e788      	b.n	800848e <_dtoa_r+0x7de>
 800857c:	3fe00000 	.word	0x3fe00000
 8008580:	40240000 	.word	0x40240000
 8008584:	40140000 	.word	0x40140000
 8008588:	9b02      	ldr	r3, [sp, #8]
 800858a:	e780      	b.n	800848e <_dtoa_r+0x7de>
 800858c:	2300      	movs	r3, #0
 800858e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008590:	e782      	b.n	8008498 <_dtoa_r+0x7e8>
 8008592:	d099      	beq.n	80084c8 <_dtoa_r+0x818>
 8008594:	9a08      	ldr	r2, [sp, #32]
 8008596:	331c      	adds	r3, #28
 8008598:	441a      	add	r2, r3
 800859a:	4498      	add	r8, r3
 800859c:	441e      	add	r6, r3
 800859e:	9208      	str	r2, [sp, #32]
 80085a0:	e792      	b.n	80084c8 <_dtoa_r+0x818>
 80085a2:	4603      	mov	r3, r0
 80085a4:	e7f6      	b.n	8008594 <_dtoa_r+0x8e4>
 80085a6:	9b07      	ldr	r3, [sp, #28]
 80085a8:	9704      	str	r7, [sp, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dc20      	bgt.n	80085f0 <_dtoa_r+0x940>
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	dd1e      	ble.n	80085f4 <_dtoa_r+0x944>
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f47f aec0 	bne.w	800833e <_dtoa_r+0x68e>
 80085be:	4621      	mov	r1, r4
 80085c0:	2205      	movs	r2, #5
 80085c2:	4658      	mov	r0, fp
 80085c4:	f000 fa9a 	bl	8008afc <__multadd>
 80085c8:	4601      	mov	r1, r0
 80085ca:	4604      	mov	r4, r0
 80085cc:	4648      	mov	r0, r9
 80085ce:	f000 fcad 	bl	8008f2c <__mcmp>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f77f aeb3 	ble.w	800833e <_dtoa_r+0x68e>
 80085d8:	4656      	mov	r6, sl
 80085da:	2331      	movs	r3, #49	@ 0x31
 80085dc:	f806 3b01 	strb.w	r3, [r6], #1
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	3301      	adds	r3, #1
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	e6ae      	b.n	8008346 <_dtoa_r+0x696>
 80085e8:	9c07      	ldr	r4, [sp, #28]
 80085ea:	9704      	str	r7, [sp, #16]
 80085ec:	4625      	mov	r5, r4
 80085ee:	e7f3      	b.n	80085d8 <_dtoa_r+0x928>
 80085f0:	9b07      	ldr	r3, [sp, #28]
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8104 	beq.w	8008804 <_dtoa_r+0xb54>
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	dd05      	ble.n	800860c <_dtoa_r+0x95c>
 8008600:	4629      	mov	r1, r5
 8008602:	4632      	mov	r2, r6
 8008604:	4658      	mov	r0, fp
 8008606:	f000 fc25 	bl	8008e54 <__lshift>
 800860a:	4605      	mov	r5, r0
 800860c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	d05a      	beq.n	80086c8 <_dtoa_r+0xa18>
 8008612:	6869      	ldr	r1, [r5, #4]
 8008614:	4658      	mov	r0, fp
 8008616:	f000 fa0f 	bl	8008a38 <_Balloc>
 800861a:	4606      	mov	r6, r0
 800861c:	b928      	cbnz	r0, 800862a <_dtoa_r+0x97a>
 800861e:	4b84      	ldr	r3, [pc, #528]	@ (8008830 <_dtoa_r+0xb80>)
 8008620:	4602      	mov	r2, r0
 8008622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008626:	f7ff bb5a 	b.w	8007cde <_dtoa_r+0x2e>
 800862a:	692a      	ldr	r2, [r5, #16]
 800862c:	3202      	adds	r2, #2
 800862e:	0092      	lsls	r2, r2, #2
 8008630:	f105 010c 	add.w	r1, r5, #12
 8008634:	300c      	adds	r0, #12
 8008636:	f000 ffaf 	bl	8009598 <memcpy>
 800863a:	2201      	movs	r2, #1
 800863c:	4631      	mov	r1, r6
 800863e:	4658      	mov	r0, fp
 8008640:	f000 fc08 	bl	8008e54 <__lshift>
 8008644:	f10a 0301 	add.w	r3, sl, #1
 8008648:	9307      	str	r3, [sp, #28]
 800864a:	9b00      	ldr	r3, [sp, #0]
 800864c:	4453      	add	r3, sl
 800864e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	462f      	mov	r7, r5
 8008658:	930a      	str	r3, [sp, #40]	@ 0x28
 800865a:	4605      	mov	r5, r0
 800865c:	9b07      	ldr	r3, [sp, #28]
 800865e:	4621      	mov	r1, r4
 8008660:	3b01      	subs	r3, #1
 8008662:	4648      	mov	r0, r9
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	f7ff fa9a 	bl	8007b9e <quorem>
 800866a:	4639      	mov	r1, r7
 800866c:	9002      	str	r0, [sp, #8]
 800866e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008672:	4648      	mov	r0, r9
 8008674:	f000 fc5a 	bl	8008f2c <__mcmp>
 8008678:	462a      	mov	r2, r5
 800867a:	9008      	str	r0, [sp, #32]
 800867c:	4621      	mov	r1, r4
 800867e:	4658      	mov	r0, fp
 8008680:	f000 fc70 	bl	8008f64 <__mdiff>
 8008684:	68c2      	ldr	r2, [r0, #12]
 8008686:	4606      	mov	r6, r0
 8008688:	bb02      	cbnz	r2, 80086cc <_dtoa_r+0xa1c>
 800868a:	4601      	mov	r1, r0
 800868c:	4648      	mov	r0, r9
 800868e:	f000 fc4d 	bl	8008f2c <__mcmp>
 8008692:	4602      	mov	r2, r0
 8008694:	4631      	mov	r1, r6
 8008696:	4658      	mov	r0, fp
 8008698:	920e      	str	r2, [sp, #56]	@ 0x38
 800869a:	f000 fa0d 	bl	8008ab8 <_Bfree>
 800869e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086a2:	9e07      	ldr	r6, [sp, #28]
 80086a4:	ea43 0102 	orr.w	r1, r3, r2
 80086a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086aa:	4319      	orrs	r1, r3
 80086ac:	d110      	bne.n	80086d0 <_dtoa_r+0xa20>
 80086ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086b2:	d029      	beq.n	8008708 <_dtoa_r+0xa58>
 80086b4:	9b08      	ldr	r3, [sp, #32]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd02      	ble.n	80086c0 <_dtoa_r+0xa10>
 80086ba:	9b02      	ldr	r3, [sp, #8]
 80086bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086c0:	9b00      	ldr	r3, [sp, #0]
 80086c2:	f883 8000 	strb.w	r8, [r3]
 80086c6:	e63f      	b.n	8008348 <_dtoa_r+0x698>
 80086c8:	4628      	mov	r0, r5
 80086ca:	e7bb      	b.n	8008644 <_dtoa_r+0x994>
 80086cc:	2201      	movs	r2, #1
 80086ce:	e7e1      	b.n	8008694 <_dtoa_r+0x9e4>
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	db04      	blt.n	80086e0 <_dtoa_r+0xa30>
 80086d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086d8:	430b      	orrs	r3, r1
 80086da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086dc:	430b      	orrs	r3, r1
 80086de:	d120      	bne.n	8008722 <_dtoa_r+0xa72>
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	dded      	ble.n	80086c0 <_dtoa_r+0xa10>
 80086e4:	4649      	mov	r1, r9
 80086e6:	2201      	movs	r2, #1
 80086e8:	4658      	mov	r0, fp
 80086ea:	f000 fbb3 	bl	8008e54 <__lshift>
 80086ee:	4621      	mov	r1, r4
 80086f0:	4681      	mov	r9, r0
 80086f2:	f000 fc1b 	bl	8008f2c <__mcmp>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	dc03      	bgt.n	8008702 <_dtoa_r+0xa52>
 80086fa:	d1e1      	bne.n	80086c0 <_dtoa_r+0xa10>
 80086fc:	f018 0f01 	tst.w	r8, #1
 8008700:	d0de      	beq.n	80086c0 <_dtoa_r+0xa10>
 8008702:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008706:	d1d8      	bne.n	80086ba <_dtoa_r+0xa0a>
 8008708:	9a00      	ldr	r2, [sp, #0]
 800870a:	2339      	movs	r3, #57	@ 0x39
 800870c:	7013      	strb	r3, [r2, #0]
 800870e:	4633      	mov	r3, r6
 8008710:	461e      	mov	r6, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008718:	2a39      	cmp	r2, #57	@ 0x39
 800871a:	d052      	beq.n	80087c2 <_dtoa_r+0xb12>
 800871c:	3201      	adds	r2, #1
 800871e:	701a      	strb	r2, [r3, #0]
 8008720:	e612      	b.n	8008348 <_dtoa_r+0x698>
 8008722:	2a00      	cmp	r2, #0
 8008724:	dd07      	ble.n	8008736 <_dtoa_r+0xa86>
 8008726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800872a:	d0ed      	beq.n	8008708 <_dtoa_r+0xa58>
 800872c:	9a00      	ldr	r2, [sp, #0]
 800872e:	f108 0301 	add.w	r3, r8, #1
 8008732:	7013      	strb	r3, [r2, #0]
 8008734:	e608      	b.n	8008348 <_dtoa_r+0x698>
 8008736:	9b07      	ldr	r3, [sp, #28]
 8008738:	9a07      	ldr	r2, [sp, #28]
 800873a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800873e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008740:	4293      	cmp	r3, r2
 8008742:	d028      	beq.n	8008796 <_dtoa_r+0xae6>
 8008744:	4649      	mov	r1, r9
 8008746:	2300      	movs	r3, #0
 8008748:	220a      	movs	r2, #10
 800874a:	4658      	mov	r0, fp
 800874c:	f000 f9d6 	bl	8008afc <__multadd>
 8008750:	42af      	cmp	r7, r5
 8008752:	4681      	mov	r9, r0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	f04f 020a 	mov.w	r2, #10
 800875c:	4639      	mov	r1, r7
 800875e:	4658      	mov	r0, fp
 8008760:	d107      	bne.n	8008772 <_dtoa_r+0xac2>
 8008762:	f000 f9cb 	bl	8008afc <__multadd>
 8008766:	4607      	mov	r7, r0
 8008768:	4605      	mov	r5, r0
 800876a:	9b07      	ldr	r3, [sp, #28]
 800876c:	3301      	adds	r3, #1
 800876e:	9307      	str	r3, [sp, #28]
 8008770:	e774      	b.n	800865c <_dtoa_r+0x9ac>
 8008772:	f000 f9c3 	bl	8008afc <__multadd>
 8008776:	4629      	mov	r1, r5
 8008778:	4607      	mov	r7, r0
 800877a:	2300      	movs	r3, #0
 800877c:	220a      	movs	r2, #10
 800877e:	4658      	mov	r0, fp
 8008780:	f000 f9bc 	bl	8008afc <__multadd>
 8008784:	4605      	mov	r5, r0
 8008786:	e7f0      	b.n	800876a <_dtoa_r+0xaba>
 8008788:	9b00      	ldr	r3, [sp, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	bfcc      	ite	gt
 800878e:	461e      	movgt	r6, r3
 8008790:	2601      	movle	r6, #1
 8008792:	4456      	add	r6, sl
 8008794:	2700      	movs	r7, #0
 8008796:	4649      	mov	r1, r9
 8008798:	2201      	movs	r2, #1
 800879a:	4658      	mov	r0, fp
 800879c:	f000 fb5a 	bl	8008e54 <__lshift>
 80087a0:	4621      	mov	r1, r4
 80087a2:	4681      	mov	r9, r0
 80087a4:	f000 fbc2 	bl	8008f2c <__mcmp>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dcb0      	bgt.n	800870e <_dtoa_r+0xa5e>
 80087ac:	d102      	bne.n	80087b4 <_dtoa_r+0xb04>
 80087ae:	f018 0f01 	tst.w	r8, #1
 80087b2:	d1ac      	bne.n	800870e <_dtoa_r+0xa5e>
 80087b4:	4633      	mov	r3, r6
 80087b6:	461e      	mov	r6, r3
 80087b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087bc:	2a30      	cmp	r2, #48	@ 0x30
 80087be:	d0fa      	beq.n	80087b6 <_dtoa_r+0xb06>
 80087c0:	e5c2      	b.n	8008348 <_dtoa_r+0x698>
 80087c2:	459a      	cmp	sl, r3
 80087c4:	d1a4      	bne.n	8008710 <_dtoa_r+0xa60>
 80087c6:	9b04      	ldr	r3, [sp, #16]
 80087c8:	3301      	adds	r3, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	2331      	movs	r3, #49	@ 0x31
 80087ce:	f88a 3000 	strb.w	r3, [sl]
 80087d2:	e5b9      	b.n	8008348 <_dtoa_r+0x698>
 80087d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008834 <_dtoa_r+0xb84>
 80087da:	b11b      	cbz	r3, 80087e4 <_dtoa_r+0xb34>
 80087dc:	f10a 0308 	add.w	r3, sl, #8
 80087e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	4650      	mov	r0, sl
 80087e6:	b019      	add	sp, #100	@ 0x64
 80087e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	f77f ae37 	ble.w	8008462 <_dtoa_r+0x7b2>
 80087f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f8:	2001      	movs	r0, #1
 80087fa:	e655      	b.n	80084a8 <_dtoa_r+0x7f8>
 80087fc:	9b00      	ldr	r3, [sp, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f77f aed6 	ble.w	80085b0 <_dtoa_r+0x900>
 8008804:	4656      	mov	r6, sl
 8008806:	4621      	mov	r1, r4
 8008808:	4648      	mov	r0, r9
 800880a:	f7ff f9c8 	bl	8007b9e <quorem>
 800880e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008812:	f806 8b01 	strb.w	r8, [r6], #1
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	eba6 020a 	sub.w	r2, r6, sl
 800881c:	4293      	cmp	r3, r2
 800881e:	ddb3      	ble.n	8008788 <_dtoa_r+0xad8>
 8008820:	4649      	mov	r1, r9
 8008822:	2300      	movs	r3, #0
 8008824:	220a      	movs	r2, #10
 8008826:	4658      	mov	r0, fp
 8008828:	f000 f968 	bl	8008afc <__multadd>
 800882c:	4681      	mov	r9, r0
 800882e:	e7ea      	b.n	8008806 <_dtoa_r+0xb56>
 8008830:	08009d38 	.word	0x08009d38
 8008834:	08009cbc 	.word	0x08009cbc

08008838 <_free_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4605      	mov	r5, r0
 800883c:	2900      	cmp	r1, #0
 800883e:	d041      	beq.n	80088c4 <_free_r+0x8c>
 8008840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008844:	1f0c      	subs	r4, r1, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	bfb8      	it	lt
 800884a:	18e4      	addlt	r4, r4, r3
 800884c:	f000 f8e8 	bl	8008a20 <__malloc_lock>
 8008850:	4a1d      	ldr	r2, [pc, #116]	@ (80088c8 <_free_r+0x90>)
 8008852:	6813      	ldr	r3, [r2, #0]
 8008854:	b933      	cbnz	r3, 8008864 <_free_r+0x2c>
 8008856:	6063      	str	r3, [r4, #4]
 8008858:	6014      	str	r4, [r2, #0]
 800885a:	4628      	mov	r0, r5
 800885c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008860:	f000 b8e4 	b.w	8008a2c <__malloc_unlock>
 8008864:	42a3      	cmp	r3, r4
 8008866:	d908      	bls.n	800887a <_free_r+0x42>
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	1821      	adds	r1, r4, r0
 800886c:	428b      	cmp	r3, r1
 800886e:	bf01      	itttt	eq
 8008870:	6819      	ldreq	r1, [r3, #0]
 8008872:	685b      	ldreq	r3, [r3, #4]
 8008874:	1809      	addeq	r1, r1, r0
 8008876:	6021      	streq	r1, [r4, #0]
 8008878:	e7ed      	b.n	8008856 <_free_r+0x1e>
 800887a:	461a      	mov	r2, r3
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	b10b      	cbz	r3, 8008884 <_free_r+0x4c>
 8008880:	42a3      	cmp	r3, r4
 8008882:	d9fa      	bls.n	800887a <_free_r+0x42>
 8008884:	6811      	ldr	r1, [r2, #0]
 8008886:	1850      	adds	r0, r2, r1
 8008888:	42a0      	cmp	r0, r4
 800888a:	d10b      	bne.n	80088a4 <_free_r+0x6c>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	4401      	add	r1, r0
 8008890:	1850      	adds	r0, r2, r1
 8008892:	4283      	cmp	r3, r0
 8008894:	6011      	str	r1, [r2, #0]
 8008896:	d1e0      	bne.n	800885a <_free_r+0x22>
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	6053      	str	r3, [r2, #4]
 800889e:	4408      	add	r0, r1
 80088a0:	6010      	str	r0, [r2, #0]
 80088a2:	e7da      	b.n	800885a <_free_r+0x22>
 80088a4:	d902      	bls.n	80088ac <_free_r+0x74>
 80088a6:	230c      	movs	r3, #12
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	e7d6      	b.n	800885a <_free_r+0x22>
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	1821      	adds	r1, r4, r0
 80088b0:	428b      	cmp	r3, r1
 80088b2:	bf04      	itt	eq
 80088b4:	6819      	ldreq	r1, [r3, #0]
 80088b6:	685b      	ldreq	r3, [r3, #4]
 80088b8:	6063      	str	r3, [r4, #4]
 80088ba:	bf04      	itt	eq
 80088bc:	1809      	addeq	r1, r1, r0
 80088be:	6021      	streq	r1, [r4, #0]
 80088c0:	6054      	str	r4, [r2, #4]
 80088c2:	e7ca      	b.n	800885a <_free_r+0x22>
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	bf00      	nop
 80088c8:	20000a58 	.word	0x20000a58

080088cc <malloc>:
 80088cc:	4b02      	ldr	r3, [pc, #8]	@ (80088d8 <malloc+0xc>)
 80088ce:	4601      	mov	r1, r0
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f000 b825 	b.w	8008920 <_malloc_r>
 80088d6:	bf00      	nop
 80088d8:	20000024 	.word	0x20000024

080088dc <sbrk_aligned>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4e0f      	ldr	r6, [pc, #60]	@ (800891c <sbrk_aligned+0x40>)
 80088e0:	460c      	mov	r4, r1
 80088e2:	6831      	ldr	r1, [r6, #0]
 80088e4:	4605      	mov	r5, r0
 80088e6:	b911      	cbnz	r1, 80088ee <sbrk_aligned+0x12>
 80088e8:	f000 fe46 	bl	8009578 <_sbrk_r>
 80088ec:	6030      	str	r0, [r6, #0]
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f000 fe41 	bl	8009578 <_sbrk_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d103      	bne.n	8008902 <sbrk_aligned+0x26>
 80088fa:	f04f 34ff 	mov.w	r4, #4294967295
 80088fe:	4620      	mov	r0, r4
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	1cc4      	adds	r4, r0, #3
 8008904:	f024 0403 	bic.w	r4, r4, #3
 8008908:	42a0      	cmp	r0, r4
 800890a:	d0f8      	beq.n	80088fe <sbrk_aligned+0x22>
 800890c:	1a21      	subs	r1, r4, r0
 800890e:	4628      	mov	r0, r5
 8008910:	f000 fe32 	bl	8009578 <_sbrk_r>
 8008914:	3001      	adds	r0, #1
 8008916:	d1f2      	bne.n	80088fe <sbrk_aligned+0x22>
 8008918:	e7ef      	b.n	80088fa <sbrk_aligned+0x1e>
 800891a:	bf00      	nop
 800891c:	20000a54 	.word	0x20000a54

08008920 <_malloc_r>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	1ccd      	adds	r5, r1, #3
 8008926:	f025 0503 	bic.w	r5, r5, #3
 800892a:	3508      	adds	r5, #8
 800892c:	2d0c      	cmp	r5, #12
 800892e:	bf38      	it	cc
 8008930:	250c      	movcc	r5, #12
 8008932:	2d00      	cmp	r5, #0
 8008934:	4606      	mov	r6, r0
 8008936:	db01      	blt.n	800893c <_malloc_r+0x1c>
 8008938:	42a9      	cmp	r1, r5
 800893a:	d904      	bls.n	8008946 <_malloc_r+0x26>
 800893c:	230c      	movs	r3, #12
 800893e:	6033      	str	r3, [r6, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a1c <_malloc_r+0xfc>
 800894a:	f000 f869 	bl	8008a20 <__malloc_lock>
 800894e:	f8d8 3000 	ldr.w	r3, [r8]
 8008952:	461c      	mov	r4, r3
 8008954:	bb44      	cbnz	r4, 80089a8 <_malloc_r+0x88>
 8008956:	4629      	mov	r1, r5
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ffbf 	bl	80088dc <sbrk_aligned>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	4604      	mov	r4, r0
 8008962:	d158      	bne.n	8008a16 <_malloc_r+0xf6>
 8008964:	f8d8 4000 	ldr.w	r4, [r8]
 8008968:	4627      	mov	r7, r4
 800896a:	2f00      	cmp	r7, #0
 800896c:	d143      	bne.n	80089f6 <_malloc_r+0xd6>
 800896e:	2c00      	cmp	r4, #0
 8008970:	d04b      	beq.n	8008a0a <_malloc_r+0xea>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	4639      	mov	r1, r7
 8008976:	4630      	mov	r0, r6
 8008978:	eb04 0903 	add.w	r9, r4, r3
 800897c:	f000 fdfc 	bl	8009578 <_sbrk_r>
 8008980:	4581      	cmp	r9, r0
 8008982:	d142      	bne.n	8008a0a <_malloc_r+0xea>
 8008984:	6821      	ldr	r1, [r4, #0]
 8008986:	1a6d      	subs	r5, r5, r1
 8008988:	4629      	mov	r1, r5
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ffa6 	bl	80088dc <sbrk_aligned>
 8008990:	3001      	adds	r0, #1
 8008992:	d03a      	beq.n	8008a0a <_malloc_r+0xea>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	442b      	add	r3, r5
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	f8d8 3000 	ldr.w	r3, [r8]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	bb62      	cbnz	r2, 80089fc <_malloc_r+0xdc>
 80089a2:	f8c8 7000 	str.w	r7, [r8]
 80089a6:	e00f      	b.n	80089c8 <_malloc_r+0xa8>
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	1b52      	subs	r2, r2, r5
 80089ac:	d420      	bmi.n	80089f0 <_malloc_r+0xd0>
 80089ae:	2a0b      	cmp	r2, #11
 80089b0:	d917      	bls.n	80089e2 <_malloc_r+0xc2>
 80089b2:	1961      	adds	r1, r4, r5
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	6025      	str	r5, [r4, #0]
 80089b8:	bf18      	it	ne
 80089ba:	6059      	strne	r1, [r3, #4]
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	bf08      	it	eq
 80089c0:	f8c8 1000 	streq.w	r1, [r8]
 80089c4:	5162      	str	r2, [r4, r5]
 80089c6:	604b      	str	r3, [r1, #4]
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 f82f 	bl	8008a2c <__malloc_unlock>
 80089ce:	f104 000b 	add.w	r0, r4, #11
 80089d2:	1d23      	adds	r3, r4, #4
 80089d4:	f020 0007 	bic.w	r0, r0, #7
 80089d8:	1ac2      	subs	r2, r0, r3
 80089da:	bf1c      	itt	ne
 80089dc:	1a1b      	subne	r3, r3, r0
 80089de:	50a3      	strne	r3, [r4, r2]
 80089e0:	e7af      	b.n	8008942 <_malloc_r+0x22>
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	bf0c      	ite	eq
 80089e8:	f8c8 2000 	streq.w	r2, [r8]
 80089ec:	605a      	strne	r2, [r3, #4]
 80089ee:	e7eb      	b.n	80089c8 <_malloc_r+0xa8>
 80089f0:	4623      	mov	r3, r4
 80089f2:	6864      	ldr	r4, [r4, #4]
 80089f4:	e7ae      	b.n	8008954 <_malloc_r+0x34>
 80089f6:	463c      	mov	r4, r7
 80089f8:	687f      	ldr	r7, [r7, #4]
 80089fa:	e7b6      	b.n	800896a <_malloc_r+0x4a>
 80089fc:	461a      	mov	r2, r3
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d1fb      	bne.n	80089fc <_malloc_r+0xdc>
 8008a04:	2300      	movs	r3, #0
 8008a06:	6053      	str	r3, [r2, #4]
 8008a08:	e7de      	b.n	80089c8 <_malloc_r+0xa8>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f80c 	bl	8008a2c <__malloc_unlock>
 8008a14:	e794      	b.n	8008940 <_malloc_r+0x20>
 8008a16:	6005      	str	r5, [r0, #0]
 8008a18:	e7d6      	b.n	80089c8 <_malloc_r+0xa8>
 8008a1a:	bf00      	nop
 8008a1c:	20000a58 	.word	0x20000a58

08008a20 <__malloc_lock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	@ (8008a28 <__malloc_lock+0x8>)
 8008a22:	f7ff b8ba 	b.w	8007b9a <__retarget_lock_acquire_recursive>
 8008a26:	bf00      	nop
 8008a28:	20000a50 	.word	0x20000a50

08008a2c <__malloc_unlock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	@ (8008a34 <__malloc_unlock+0x8>)
 8008a2e:	f7ff b8b5 	b.w	8007b9c <__retarget_lock_release_recursive>
 8008a32:	bf00      	nop
 8008a34:	20000a50 	.word	0x20000a50

08008a38 <_Balloc>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	69c6      	ldr	r6, [r0, #28]
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	460d      	mov	r5, r1
 8008a40:	b976      	cbnz	r6, 8008a60 <_Balloc+0x28>
 8008a42:	2010      	movs	r0, #16
 8008a44:	f7ff ff42 	bl	80088cc <malloc>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	61e0      	str	r0, [r4, #28]
 8008a4c:	b920      	cbnz	r0, 8008a58 <_Balloc+0x20>
 8008a4e:	4b18      	ldr	r3, [pc, #96]	@ (8008ab0 <_Balloc+0x78>)
 8008a50:	4818      	ldr	r0, [pc, #96]	@ (8008ab4 <_Balloc+0x7c>)
 8008a52:	216b      	movs	r1, #107	@ 0x6b
 8008a54:	f000 fdae 	bl	80095b4 <__assert_func>
 8008a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a5c:	6006      	str	r6, [r0, #0]
 8008a5e:	60c6      	str	r6, [r0, #12]
 8008a60:	69e6      	ldr	r6, [r4, #28]
 8008a62:	68f3      	ldr	r3, [r6, #12]
 8008a64:	b183      	cbz	r3, 8008a88 <_Balloc+0x50>
 8008a66:	69e3      	ldr	r3, [r4, #28]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a6e:	b9b8      	cbnz	r0, 8008aa0 <_Balloc+0x68>
 8008a70:	2101      	movs	r1, #1
 8008a72:	fa01 f605 	lsl.w	r6, r1, r5
 8008a76:	1d72      	adds	r2, r6, #5
 8008a78:	0092      	lsls	r2, r2, #2
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fdb8 	bl	80095f0 <_calloc_r>
 8008a80:	b160      	cbz	r0, 8008a9c <_Balloc+0x64>
 8008a82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a86:	e00e      	b.n	8008aa6 <_Balloc+0x6e>
 8008a88:	2221      	movs	r2, #33	@ 0x21
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 fdaf 	bl	80095f0 <_calloc_r>
 8008a92:	69e3      	ldr	r3, [r4, #28]
 8008a94:	60f0      	str	r0, [r6, #12]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e4      	bne.n	8008a66 <_Balloc+0x2e>
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	6802      	ldr	r2, [r0, #0]
 8008aa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aac:	e7f7      	b.n	8008a9e <_Balloc+0x66>
 8008aae:	bf00      	nop
 8008ab0:	08009cc9 	.word	0x08009cc9
 8008ab4:	08009d49 	.word	0x08009d49

08008ab8 <_Bfree>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	69c6      	ldr	r6, [r0, #28]
 8008abc:	4605      	mov	r5, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	b976      	cbnz	r6, 8008ae0 <_Bfree+0x28>
 8008ac2:	2010      	movs	r0, #16
 8008ac4:	f7ff ff02 	bl	80088cc <malloc>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	61e8      	str	r0, [r5, #28]
 8008acc:	b920      	cbnz	r0, 8008ad8 <_Bfree+0x20>
 8008ace:	4b09      	ldr	r3, [pc, #36]	@ (8008af4 <_Bfree+0x3c>)
 8008ad0:	4809      	ldr	r0, [pc, #36]	@ (8008af8 <_Bfree+0x40>)
 8008ad2:	218f      	movs	r1, #143	@ 0x8f
 8008ad4:	f000 fd6e 	bl	80095b4 <__assert_func>
 8008ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008adc:	6006      	str	r6, [r0, #0]
 8008ade:	60c6      	str	r6, [r0, #12]
 8008ae0:	b13c      	cbz	r4, 8008af2 <_Bfree+0x3a>
 8008ae2:	69eb      	ldr	r3, [r5, #28]
 8008ae4:	6862      	ldr	r2, [r4, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008aec:	6021      	str	r1, [r4, #0]
 8008aee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	08009cc9 	.word	0x08009cc9
 8008af8:	08009d49 	.word	0x08009d49

08008afc <__multadd>:
 8008afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	690d      	ldr	r5, [r1, #16]
 8008b02:	4607      	mov	r7, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	461e      	mov	r6, r3
 8008b08:	f101 0c14 	add.w	ip, r1, #20
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008b12:	b299      	uxth	r1, r3
 8008b14:	fb02 6101 	mla	r1, r2, r1, r6
 8008b18:	0c1e      	lsrs	r6, r3, #16
 8008b1a:	0c0b      	lsrs	r3, r1, #16
 8008b1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008b20:	b289      	uxth	r1, r1
 8008b22:	3001      	adds	r0, #1
 8008b24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b28:	4285      	cmp	r5, r0
 8008b2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b32:	dcec      	bgt.n	8008b0e <__multadd+0x12>
 8008b34:	b30e      	cbz	r6, 8008b7a <__multadd+0x7e>
 8008b36:	68a3      	ldr	r3, [r4, #8]
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dc19      	bgt.n	8008b70 <__multadd+0x74>
 8008b3c:	6861      	ldr	r1, [r4, #4]
 8008b3e:	4638      	mov	r0, r7
 8008b40:	3101      	adds	r1, #1
 8008b42:	f7ff ff79 	bl	8008a38 <_Balloc>
 8008b46:	4680      	mov	r8, r0
 8008b48:	b928      	cbnz	r0, 8008b56 <__multadd+0x5a>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b80 <__multadd+0x84>)
 8008b4e:	480d      	ldr	r0, [pc, #52]	@ (8008b84 <__multadd+0x88>)
 8008b50:	21ba      	movs	r1, #186	@ 0xba
 8008b52:	f000 fd2f 	bl	80095b4 <__assert_func>
 8008b56:	6922      	ldr	r2, [r4, #16]
 8008b58:	3202      	adds	r2, #2
 8008b5a:	f104 010c 	add.w	r1, r4, #12
 8008b5e:	0092      	lsls	r2, r2, #2
 8008b60:	300c      	adds	r0, #12
 8008b62:	f000 fd19 	bl	8009598 <memcpy>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7ff ffa5 	bl	8008ab8 <_Bfree>
 8008b6e:	4644      	mov	r4, r8
 8008b70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b74:	3501      	adds	r5, #1
 8008b76:	615e      	str	r6, [r3, #20]
 8008b78:	6125      	str	r5, [r4, #16]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	08009d38 	.word	0x08009d38
 8008b84:	08009d49 	.word	0x08009d49

08008b88 <__hi0bits>:
 8008b88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	bf36      	itet	cc
 8008b90:	0403      	lslcc	r3, r0, #16
 8008b92:	2000      	movcs	r0, #0
 8008b94:	2010      	movcc	r0, #16
 8008b96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b9a:	bf3c      	itt	cc
 8008b9c:	021b      	lslcc	r3, r3, #8
 8008b9e:	3008      	addcc	r0, #8
 8008ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ba4:	bf3c      	itt	cc
 8008ba6:	011b      	lslcc	r3, r3, #4
 8008ba8:	3004      	addcc	r0, #4
 8008baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bae:	bf3c      	itt	cc
 8008bb0:	009b      	lslcc	r3, r3, #2
 8008bb2:	3002      	addcc	r0, #2
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	db05      	blt.n	8008bc4 <__hi0bits+0x3c>
 8008bb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008bbc:	f100 0001 	add.w	r0, r0, #1
 8008bc0:	bf08      	it	eq
 8008bc2:	2020      	moveq	r0, #32
 8008bc4:	4770      	bx	lr

08008bc6 <__lo0bits>:
 8008bc6:	6803      	ldr	r3, [r0, #0]
 8008bc8:	4602      	mov	r2, r0
 8008bca:	f013 0007 	ands.w	r0, r3, #7
 8008bce:	d00b      	beq.n	8008be8 <__lo0bits+0x22>
 8008bd0:	07d9      	lsls	r1, r3, #31
 8008bd2:	d421      	bmi.n	8008c18 <__lo0bits+0x52>
 8008bd4:	0798      	lsls	r0, r3, #30
 8008bd6:	bf49      	itett	mi
 8008bd8:	085b      	lsrmi	r3, r3, #1
 8008bda:	089b      	lsrpl	r3, r3, #2
 8008bdc:	2001      	movmi	r0, #1
 8008bde:	6013      	strmi	r3, [r2, #0]
 8008be0:	bf5c      	itt	pl
 8008be2:	6013      	strpl	r3, [r2, #0]
 8008be4:	2002      	movpl	r0, #2
 8008be6:	4770      	bx	lr
 8008be8:	b299      	uxth	r1, r3
 8008bea:	b909      	cbnz	r1, 8008bf0 <__lo0bits+0x2a>
 8008bec:	0c1b      	lsrs	r3, r3, #16
 8008bee:	2010      	movs	r0, #16
 8008bf0:	b2d9      	uxtb	r1, r3
 8008bf2:	b909      	cbnz	r1, 8008bf8 <__lo0bits+0x32>
 8008bf4:	3008      	adds	r0, #8
 8008bf6:	0a1b      	lsrs	r3, r3, #8
 8008bf8:	0719      	lsls	r1, r3, #28
 8008bfa:	bf04      	itt	eq
 8008bfc:	091b      	lsreq	r3, r3, #4
 8008bfe:	3004      	addeq	r0, #4
 8008c00:	0799      	lsls	r1, r3, #30
 8008c02:	bf04      	itt	eq
 8008c04:	089b      	lsreq	r3, r3, #2
 8008c06:	3002      	addeq	r0, #2
 8008c08:	07d9      	lsls	r1, r3, #31
 8008c0a:	d403      	bmi.n	8008c14 <__lo0bits+0x4e>
 8008c0c:	085b      	lsrs	r3, r3, #1
 8008c0e:	f100 0001 	add.w	r0, r0, #1
 8008c12:	d003      	beq.n	8008c1c <__lo0bits+0x56>
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	4770      	bx	lr
 8008c18:	2000      	movs	r0, #0
 8008c1a:	4770      	bx	lr
 8008c1c:	2020      	movs	r0, #32
 8008c1e:	4770      	bx	lr

08008c20 <__i2b>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	460c      	mov	r4, r1
 8008c24:	2101      	movs	r1, #1
 8008c26:	f7ff ff07 	bl	8008a38 <_Balloc>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	b928      	cbnz	r0, 8008c3a <__i2b+0x1a>
 8008c2e:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <__i2b+0x24>)
 8008c30:	4805      	ldr	r0, [pc, #20]	@ (8008c48 <__i2b+0x28>)
 8008c32:	f240 1145 	movw	r1, #325	@ 0x145
 8008c36:	f000 fcbd 	bl	80095b4 <__assert_func>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	6144      	str	r4, [r0, #20]
 8008c3e:	6103      	str	r3, [r0, #16]
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	bf00      	nop
 8008c44:	08009d38 	.word	0x08009d38
 8008c48:	08009d49 	.word	0x08009d49

08008c4c <__multiply>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	4614      	mov	r4, r2
 8008c52:	690a      	ldr	r2, [r1, #16]
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	bfa8      	it	ge
 8008c5a:	4623      	movge	r3, r4
 8008c5c:	460f      	mov	r7, r1
 8008c5e:	bfa4      	itt	ge
 8008c60:	460c      	movge	r4, r1
 8008c62:	461f      	movge	r7, r3
 8008c64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c6c:	68a3      	ldr	r3, [r4, #8]
 8008c6e:	6861      	ldr	r1, [r4, #4]
 8008c70:	eb0a 0609 	add.w	r6, sl, r9
 8008c74:	42b3      	cmp	r3, r6
 8008c76:	b085      	sub	sp, #20
 8008c78:	bfb8      	it	lt
 8008c7a:	3101      	addlt	r1, #1
 8008c7c:	f7ff fedc 	bl	8008a38 <_Balloc>
 8008c80:	b930      	cbnz	r0, 8008c90 <__multiply+0x44>
 8008c82:	4602      	mov	r2, r0
 8008c84:	4b44      	ldr	r3, [pc, #272]	@ (8008d98 <__multiply+0x14c>)
 8008c86:	4845      	ldr	r0, [pc, #276]	@ (8008d9c <__multiply+0x150>)
 8008c88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c8c:	f000 fc92 	bl	80095b4 <__assert_func>
 8008c90:	f100 0514 	add.w	r5, r0, #20
 8008c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c98:	462b      	mov	r3, r5
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4543      	cmp	r3, r8
 8008c9e:	d321      	bcc.n	8008ce4 <__multiply+0x98>
 8008ca0:	f107 0114 	add.w	r1, r7, #20
 8008ca4:	f104 0214 	add.w	r2, r4, #20
 8008ca8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008cac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008cb0:	9302      	str	r3, [sp, #8]
 8008cb2:	1b13      	subs	r3, r2, r4
 8008cb4:	3b15      	subs	r3, #21
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	3304      	adds	r3, #4
 8008cbc:	f104 0715 	add.w	r7, r4, #21
 8008cc0:	42ba      	cmp	r2, r7
 8008cc2:	bf38      	it	cc
 8008cc4:	2304      	movcc	r3, #4
 8008cc6:	9301      	str	r3, [sp, #4]
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	9103      	str	r1, [sp, #12]
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	d80c      	bhi.n	8008cea <__multiply+0x9e>
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	dd03      	ble.n	8008cdc <__multiply+0x90>
 8008cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d05b      	beq.n	8008d94 <__multiply+0x148>
 8008cdc:	6106      	str	r6, [r0, #16]
 8008cde:	b005      	add	sp, #20
 8008ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce4:	f843 2b04 	str.w	r2, [r3], #4
 8008ce8:	e7d8      	b.n	8008c9c <__multiply+0x50>
 8008cea:	f8b1 a000 	ldrh.w	sl, [r1]
 8008cee:	f1ba 0f00 	cmp.w	sl, #0
 8008cf2:	d024      	beq.n	8008d3e <__multiply+0xf2>
 8008cf4:	f104 0e14 	add.w	lr, r4, #20
 8008cf8:	46a9      	mov	r9, r5
 8008cfa:	f04f 0c00 	mov.w	ip, #0
 8008cfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d02:	f8d9 3000 	ldr.w	r3, [r9]
 8008d06:	fa1f fb87 	uxth.w	fp, r7
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008d14:	f8d9 7000 	ldr.w	r7, [r9]
 8008d18:	4463      	add	r3, ip
 8008d1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d1e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d2c:	4572      	cmp	r2, lr
 8008d2e:	f849 3b04 	str.w	r3, [r9], #4
 8008d32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d36:	d8e2      	bhi.n	8008cfe <__multiply+0xb2>
 8008d38:	9b01      	ldr	r3, [sp, #4]
 8008d3a:	f845 c003 	str.w	ip, [r5, r3]
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d44:	3104      	adds	r1, #4
 8008d46:	f1b9 0f00 	cmp.w	r9, #0
 8008d4a:	d021      	beq.n	8008d90 <__multiply+0x144>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	f104 0c14 	add.w	ip, r4, #20
 8008d52:	46ae      	mov	lr, r5
 8008d54:	f04f 0a00 	mov.w	sl, #0
 8008d58:	f8bc b000 	ldrh.w	fp, [ip]
 8008d5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d60:	fb09 770b 	mla	r7, r9, fp, r7
 8008d64:	4457      	add	r7, sl
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d6c:	f84e 3b04 	str.w	r3, [lr], #4
 8008d70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d78:	f8be 3000 	ldrh.w	r3, [lr]
 8008d7c:	fb09 330a 	mla	r3, r9, sl, r3
 8008d80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d84:	4562      	cmp	r2, ip
 8008d86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d8a:	d8e5      	bhi.n	8008d58 <__multiply+0x10c>
 8008d8c:	9f01      	ldr	r7, [sp, #4]
 8008d8e:	51eb      	str	r3, [r5, r7]
 8008d90:	3504      	adds	r5, #4
 8008d92:	e799      	b.n	8008cc8 <__multiply+0x7c>
 8008d94:	3e01      	subs	r6, #1
 8008d96:	e79b      	b.n	8008cd0 <__multiply+0x84>
 8008d98:	08009d38 	.word	0x08009d38
 8008d9c:	08009d49 	.word	0x08009d49

08008da0 <__pow5mult>:
 8008da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	4615      	mov	r5, r2
 8008da6:	f012 0203 	ands.w	r2, r2, #3
 8008daa:	4607      	mov	r7, r0
 8008dac:	460e      	mov	r6, r1
 8008dae:	d007      	beq.n	8008dc0 <__pow5mult+0x20>
 8008db0:	4c25      	ldr	r4, [pc, #148]	@ (8008e48 <__pow5mult+0xa8>)
 8008db2:	3a01      	subs	r2, #1
 8008db4:	2300      	movs	r3, #0
 8008db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dba:	f7ff fe9f 	bl	8008afc <__multadd>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	10ad      	asrs	r5, r5, #2
 8008dc2:	d03d      	beq.n	8008e40 <__pow5mult+0xa0>
 8008dc4:	69fc      	ldr	r4, [r7, #28]
 8008dc6:	b97c      	cbnz	r4, 8008de8 <__pow5mult+0x48>
 8008dc8:	2010      	movs	r0, #16
 8008dca:	f7ff fd7f 	bl	80088cc <malloc>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	61f8      	str	r0, [r7, #28]
 8008dd2:	b928      	cbnz	r0, 8008de0 <__pow5mult+0x40>
 8008dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8008e4c <__pow5mult+0xac>)
 8008dd6:	481e      	ldr	r0, [pc, #120]	@ (8008e50 <__pow5mult+0xb0>)
 8008dd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ddc:	f000 fbea 	bl	80095b4 <__assert_func>
 8008de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008de4:	6004      	str	r4, [r0, #0]
 8008de6:	60c4      	str	r4, [r0, #12]
 8008de8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008df0:	b94c      	cbnz	r4, 8008e06 <__pow5mult+0x66>
 8008df2:	f240 2171 	movw	r1, #625	@ 0x271
 8008df6:	4638      	mov	r0, r7
 8008df8:	f7ff ff12 	bl	8008c20 <__i2b>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e02:	4604      	mov	r4, r0
 8008e04:	6003      	str	r3, [r0, #0]
 8008e06:	f04f 0900 	mov.w	r9, #0
 8008e0a:	07eb      	lsls	r3, r5, #31
 8008e0c:	d50a      	bpl.n	8008e24 <__pow5mult+0x84>
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4622      	mov	r2, r4
 8008e12:	4638      	mov	r0, r7
 8008e14:	f7ff ff1a 	bl	8008c4c <__multiply>
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f7ff fe4b 	bl	8008ab8 <_Bfree>
 8008e22:	4646      	mov	r6, r8
 8008e24:	106d      	asrs	r5, r5, #1
 8008e26:	d00b      	beq.n	8008e40 <__pow5mult+0xa0>
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	b938      	cbnz	r0, 8008e3c <__pow5mult+0x9c>
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4638      	mov	r0, r7
 8008e32:	f7ff ff0b 	bl	8008c4c <__multiply>
 8008e36:	6020      	str	r0, [r4, #0]
 8008e38:	f8c0 9000 	str.w	r9, [r0]
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	e7e4      	b.n	8008e0a <__pow5mult+0x6a>
 8008e40:	4630      	mov	r0, r6
 8008e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e46:	bf00      	nop
 8008e48:	08009da4 	.word	0x08009da4
 8008e4c:	08009cc9 	.word	0x08009cc9
 8008e50:	08009d49 	.word	0x08009d49

08008e54 <__lshift>:
 8008e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	460c      	mov	r4, r1
 8008e5a:	6849      	ldr	r1, [r1, #4]
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	4607      	mov	r7, r0
 8008e66:	4691      	mov	r9, r2
 8008e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e6c:	f108 0601 	add.w	r6, r8, #1
 8008e70:	42b3      	cmp	r3, r6
 8008e72:	db0b      	blt.n	8008e8c <__lshift+0x38>
 8008e74:	4638      	mov	r0, r7
 8008e76:	f7ff fddf 	bl	8008a38 <_Balloc>
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	b948      	cbnz	r0, 8008e92 <__lshift+0x3e>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	4b28      	ldr	r3, [pc, #160]	@ (8008f24 <__lshift+0xd0>)
 8008e82:	4829      	ldr	r0, [pc, #164]	@ (8008f28 <__lshift+0xd4>)
 8008e84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e88:	f000 fb94 	bl	80095b4 <__assert_func>
 8008e8c:	3101      	adds	r1, #1
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	e7ee      	b.n	8008e70 <__lshift+0x1c>
 8008e92:	2300      	movs	r3, #0
 8008e94:	f100 0114 	add.w	r1, r0, #20
 8008e98:	f100 0210 	add.w	r2, r0, #16
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4553      	cmp	r3, sl
 8008ea0:	db33      	blt.n	8008f0a <__lshift+0xb6>
 8008ea2:	6920      	ldr	r0, [r4, #16]
 8008ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ea8:	f104 0314 	add.w	r3, r4, #20
 8008eac:	f019 091f 	ands.w	r9, r9, #31
 8008eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008eb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008eb8:	d02b      	beq.n	8008f12 <__lshift+0xbe>
 8008eba:	f1c9 0e20 	rsb	lr, r9, #32
 8008ebe:	468a      	mov	sl, r1
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	fa00 f009 	lsl.w	r0, r0, r9
 8008ec8:	4310      	orrs	r0, r2
 8008eca:	f84a 0b04 	str.w	r0, [sl], #4
 8008ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed2:	459c      	cmp	ip, r3
 8008ed4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ed8:	d8f3      	bhi.n	8008ec2 <__lshift+0x6e>
 8008eda:	ebac 0304 	sub.w	r3, ip, r4
 8008ede:	3b15      	subs	r3, #21
 8008ee0:	f023 0303 	bic.w	r3, r3, #3
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	f104 0015 	add.w	r0, r4, #21
 8008eea:	4584      	cmp	ip, r0
 8008eec:	bf38      	it	cc
 8008eee:	2304      	movcc	r3, #4
 8008ef0:	50ca      	str	r2, [r1, r3]
 8008ef2:	b10a      	cbz	r2, 8008ef8 <__lshift+0xa4>
 8008ef4:	f108 0602 	add.w	r6, r8, #2
 8008ef8:	3e01      	subs	r6, #1
 8008efa:	4638      	mov	r0, r7
 8008efc:	612e      	str	r6, [r5, #16]
 8008efe:	4621      	mov	r1, r4
 8008f00:	f7ff fdda 	bl	8008ab8 <_Bfree>
 8008f04:	4628      	mov	r0, r5
 8008f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f0e:	3301      	adds	r3, #1
 8008f10:	e7c5      	b.n	8008e9e <__lshift+0x4a>
 8008f12:	3904      	subs	r1, #4
 8008f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f1c:	459c      	cmp	ip, r3
 8008f1e:	d8f9      	bhi.n	8008f14 <__lshift+0xc0>
 8008f20:	e7ea      	b.n	8008ef8 <__lshift+0xa4>
 8008f22:	bf00      	nop
 8008f24:	08009d38 	.word	0x08009d38
 8008f28:	08009d49 	.word	0x08009d49

08008f2c <__mcmp>:
 8008f2c:	690a      	ldr	r2, [r1, #16]
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6900      	ldr	r0, [r0, #16]
 8008f32:	1a80      	subs	r0, r0, r2
 8008f34:	b530      	push	{r4, r5, lr}
 8008f36:	d10e      	bne.n	8008f56 <__mcmp+0x2a>
 8008f38:	3314      	adds	r3, #20
 8008f3a:	3114      	adds	r1, #20
 8008f3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f4c:	4295      	cmp	r5, r2
 8008f4e:	d003      	beq.n	8008f58 <__mcmp+0x2c>
 8008f50:	d205      	bcs.n	8008f5e <__mcmp+0x32>
 8008f52:	f04f 30ff 	mov.w	r0, #4294967295
 8008f56:	bd30      	pop	{r4, r5, pc}
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d3f3      	bcc.n	8008f44 <__mcmp+0x18>
 8008f5c:	e7fb      	b.n	8008f56 <__mcmp+0x2a>
 8008f5e:	2001      	movs	r0, #1
 8008f60:	e7f9      	b.n	8008f56 <__mcmp+0x2a>
	...

08008f64 <__mdiff>:
 8008f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f68:	4689      	mov	r9, r1
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4648      	mov	r0, r9
 8008f70:	4614      	mov	r4, r2
 8008f72:	f7ff ffdb 	bl	8008f2c <__mcmp>
 8008f76:	1e05      	subs	r5, r0, #0
 8008f78:	d112      	bne.n	8008fa0 <__mdiff+0x3c>
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff fd5b 	bl	8008a38 <_Balloc>
 8008f82:	4602      	mov	r2, r0
 8008f84:	b928      	cbnz	r0, 8008f92 <__mdiff+0x2e>
 8008f86:	4b3f      	ldr	r3, [pc, #252]	@ (8009084 <__mdiff+0x120>)
 8008f88:	f240 2137 	movw	r1, #567	@ 0x237
 8008f8c:	483e      	ldr	r0, [pc, #248]	@ (8009088 <__mdiff+0x124>)
 8008f8e:	f000 fb11 	bl	80095b4 <__assert_func>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f98:	4610      	mov	r0, r2
 8008f9a:	b003      	add	sp, #12
 8008f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa0:	bfbc      	itt	lt
 8008fa2:	464b      	movlt	r3, r9
 8008fa4:	46a1      	movlt	r9, r4
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008fac:	bfba      	itte	lt
 8008fae:	461c      	movlt	r4, r3
 8008fb0:	2501      	movlt	r5, #1
 8008fb2:	2500      	movge	r5, #0
 8008fb4:	f7ff fd40 	bl	8008a38 <_Balloc>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	b918      	cbnz	r0, 8008fc4 <__mdiff+0x60>
 8008fbc:	4b31      	ldr	r3, [pc, #196]	@ (8009084 <__mdiff+0x120>)
 8008fbe:	f240 2145 	movw	r1, #581	@ 0x245
 8008fc2:	e7e3      	b.n	8008f8c <__mdiff+0x28>
 8008fc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008fc8:	6926      	ldr	r6, [r4, #16]
 8008fca:	60c5      	str	r5, [r0, #12]
 8008fcc:	f109 0310 	add.w	r3, r9, #16
 8008fd0:	f109 0514 	add.w	r5, r9, #20
 8008fd4:	f104 0e14 	add.w	lr, r4, #20
 8008fd8:	f100 0b14 	add.w	fp, r0, #20
 8008fdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008fe0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	46d9      	mov	r9, fp
 8008fe8:	f04f 0c00 	mov.w	ip, #0
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ff2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	fa1f f38a 	uxth.w	r3, sl
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	b283      	uxth	r3, r0
 8009000:	1acb      	subs	r3, r1, r3
 8009002:	0c00      	lsrs	r0, r0, #16
 8009004:	4463      	add	r3, ip
 8009006:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800900a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800900e:	b29b      	uxth	r3, r3
 8009010:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009014:	4576      	cmp	r6, lr
 8009016:	f849 3b04 	str.w	r3, [r9], #4
 800901a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800901e:	d8e5      	bhi.n	8008fec <__mdiff+0x88>
 8009020:	1b33      	subs	r3, r6, r4
 8009022:	3b15      	subs	r3, #21
 8009024:	f023 0303 	bic.w	r3, r3, #3
 8009028:	3415      	adds	r4, #21
 800902a:	3304      	adds	r3, #4
 800902c:	42a6      	cmp	r6, r4
 800902e:	bf38      	it	cc
 8009030:	2304      	movcc	r3, #4
 8009032:	441d      	add	r5, r3
 8009034:	445b      	add	r3, fp
 8009036:	461e      	mov	r6, r3
 8009038:	462c      	mov	r4, r5
 800903a:	4544      	cmp	r4, r8
 800903c:	d30e      	bcc.n	800905c <__mdiff+0xf8>
 800903e:	f108 0103 	add.w	r1, r8, #3
 8009042:	1b49      	subs	r1, r1, r5
 8009044:	f021 0103 	bic.w	r1, r1, #3
 8009048:	3d03      	subs	r5, #3
 800904a:	45a8      	cmp	r8, r5
 800904c:	bf38      	it	cc
 800904e:	2100      	movcc	r1, #0
 8009050:	440b      	add	r3, r1
 8009052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009056:	b191      	cbz	r1, 800907e <__mdiff+0x11a>
 8009058:	6117      	str	r7, [r2, #16]
 800905a:	e79d      	b.n	8008f98 <__mdiff+0x34>
 800905c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009060:	46e6      	mov	lr, ip
 8009062:	0c08      	lsrs	r0, r1, #16
 8009064:	fa1c fc81 	uxtah	ip, ip, r1
 8009068:	4471      	add	r1, lr
 800906a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800906e:	b289      	uxth	r1, r1
 8009070:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009074:	f846 1b04 	str.w	r1, [r6], #4
 8009078:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800907c:	e7dd      	b.n	800903a <__mdiff+0xd6>
 800907e:	3f01      	subs	r7, #1
 8009080:	e7e7      	b.n	8009052 <__mdiff+0xee>
 8009082:	bf00      	nop
 8009084:	08009d38 	.word	0x08009d38
 8009088:	08009d49 	.word	0x08009d49

0800908c <__d2b>:
 800908c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009090:	460f      	mov	r7, r1
 8009092:	2101      	movs	r1, #1
 8009094:	ec59 8b10 	vmov	r8, r9, d0
 8009098:	4616      	mov	r6, r2
 800909a:	f7ff fccd 	bl	8008a38 <_Balloc>
 800909e:	4604      	mov	r4, r0
 80090a0:	b930      	cbnz	r0, 80090b0 <__d2b+0x24>
 80090a2:	4602      	mov	r2, r0
 80090a4:	4b23      	ldr	r3, [pc, #140]	@ (8009134 <__d2b+0xa8>)
 80090a6:	4824      	ldr	r0, [pc, #144]	@ (8009138 <__d2b+0xac>)
 80090a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80090ac:	f000 fa82 	bl	80095b4 <__assert_func>
 80090b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090b8:	b10d      	cbz	r5, 80090be <__d2b+0x32>
 80090ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	f1b8 0300 	subs.w	r3, r8, #0
 80090c4:	d023      	beq.n	800910e <__d2b+0x82>
 80090c6:	4668      	mov	r0, sp
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	f7ff fd7c 	bl	8008bc6 <__lo0bits>
 80090ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090d2:	b1d0      	cbz	r0, 800910a <__d2b+0x7e>
 80090d4:	f1c0 0320 	rsb	r3, r0, #32
 80090d8:	fa02 f303 	lsl.w	r3, r2, r3
 80090dc:	430b      	orrs	r3, r1
 80090de:	40c2      	lsrs	r2, r0
 80090e0:	6163      	str	r3, [r4, #20]
 80090e2:	9201      	str	r2, [sp, #4]
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	61a3      	str	r3, [r4, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bf0c      	ite	eq
 80090ec:	2201      	moveq	r2, #1
 80090ee:	2202      	movne	r2, #2
 80090f0:	6122      	str	r2, [r4, #16]
 80090f2:	b1a5      	cbz	r5, 800911e <__d2b+0x92>
 80090f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090f8:	4405      	add	r5, r0
 80090fa:	603d      	str	r5, [r7, #0]
 80090fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009100:	6030      	str	r0, [r6, #0]
 8009102:	4620      	mov	r0, r4
 8009104:	b003      	add	sp, #12
 8009106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800910a:	6161      	str	r1, [r4, #20]
 800910c:	e7ea      	b.n	80090e4 <__d2b+0x58>
 800910e:	a801      	add	r0, sp, #4
 8009110:	f7ff fd59 	bl	8008bc6 <__lo0bits>
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	6163      	str	r3, [r4, #20]
 8009118:	3020      	adds	r0, #32
 800911a:	2201      	movs	r2, #1
 800911c:	e7e8      	b.n	80090f0 <__d2b+0x64>
 800911e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009122:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009126:	6038      	str	r0, [r7, #0]
 8009128:	6918      	ldr	r0, [r3, #16]
 800912a:	f7ff fd2d 	bl	8008b88 <__hi0bits>
 800912e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009132:	e7e5      	b.n	8009100 <__d2b+0x74>
 8009134:	08009d38 	.word	0x08009d38
 8009138:	08009d49 	.word	0x08009d49

0800913c <__ssputs_r>:
 800913c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009140:	688e      	ldr	r6, [r1, #8]
 8009142:	461f      	mov	r7, r3
 8009144:	42be      	cmp	r6, r7
 8009146:	680b      	ldr	r3, [r1, #0]
 8009148:	4682      	mov	sl, r0
 800914a:	460c      	mov	r4, r1
 800914c:	4690      	mov	r8, r2
 800914e:	d82d      	bhi.n	80091ac <__ssputs_r+0x70>
 8009150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009158:	d026      	beq.n	80091a8 <__ssputs_r+0x6c>
 800915a:	6965      	ldr	r5, [r4, #20]
 800915c:	6909      	ldr	r1, [r1, #16]
 800915e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009162:	eba3 0901 	sub.w	r9, r3, r1
 8009166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800916a:	1c7b      	adds	r3, r7, #1
 800916c:	444b      	add	r3, r9
 800916e:	106d      	asrs	r5, r5, #1
 8009170:	429d      	cmp	r5, r3
 8009172:	bf38      	it	cc
 8009174:	461d      	movcc	r5, r3
 8009176:	0553      	lsls	r3, r2, #21
 8009178:	d527      	bpl.n	80091ca <__ssputs_r+0x8e>
 800917a:	4629      	mov	r1, r5
 800917c:	f7ff fbd0 	bl	8008920 <_malloc_r>
 8009180:	4606      	mov	r6, r0
 8009182:	b360      	cbz	r0, 80091de <__ssputs_r+0xa2>
 8009184:	6921      	ldr	r1, [r4, #16]
 8009186:	464a      	mov	r2, r9
 8009188:	f000 fa06 	bl	8009598 <memcpy>
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	6126      	str	r6, [r4, #16]
 800919a:	6165      	str	r5, [r4, #20]
 800919c:	444e      	add	r6, r9
 800919e:	eba5 0509 	sub.w	r5, r5, r9
 80091a2:	6026      	str	r6, [r4, #0]
 80091a4:	60a5      	str	r5, [r4, #8]
 80091a6:	463e      	mov	r6, r7
 80091a8:	42be      	cmp	r6, r7
 80091aa:	d900      	bls.n	80091ae <__ssputs_r+0x72>
 80091ac:	463e      	mov	r6, r7
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	4632      	mov	r2, r6
 80091b2:	4641      	mov	r1, r8
 80091b4:	f000 f9c6 	bl	8009544 <memmove>
 80091b8:	68a3      	ldr	r3, [r4, #8]
 80091ba:	1b9b      	subs	r3, r3, r6
 80091bc:	60a3      	str	r3, [r4, #8]
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	4433      	add	r3, r6
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	2000      	movs	r0, #0
 80091c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ca:	462a      	mov	r2, r5
 80091cc:	f000 fa36 	bl	800963c <_realloc_r>
 80091d0:	4606      	mov	r6, r0
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1e0      	bne.n	8009198 <__ssputs_r+0x5c>
 80091d6:	6921      	ldr	r1, [r4, #16]
 80091d8:	4650      	mov	r0, sl
 80091da:	f7ff fb2d 	bl	8008838 <_free_r>
 80091de:	230c      	movs	r3, #12
 80091e0:	f8ca 3000 	str.w	r3, [sl]
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	f04f 30ff 	mov.w	r0, #4294967295
 80091f0:	e7e9      	b.n	80091c6 <__ssputs_r+0x8a>
	...

080091f4 <_svfiprintf_r>:
 80091f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f8:	4698      	mov	r8, r3
 80091fa:	898b      	ldrh	r3, [r1, #12]
 80091fc:	061b      	lsls	r3, r3, #24
 80091fe:	b09d      	sub	sp, #116	@ 0x74
 8009200:	4607      	mov	r7, r0
 8009202:	460d      	mov	r5, r1
 8009204:	4614      	mov	r4, r2
 8009206:	d510      	bpl.n	800922a <_svfiprintf_r+0x36>
 8009208:	690b      	ldr	r3, [r1, #16]
 800920a:	b973      	cbnz	r3, 800922a <_svfiprintf_r+0x36>
 800920c:	2140      	movs	r1, #64	@ 0x40
 800920e:	f7ff fb87 	bl	8008920 <_malloc_r>
 8009212:	6028      	str	r0, [r5, #0]
 8009214:	6128      	str	r0, [r5, #16]
 8009216:	b930      	cbnz	r0, 8009226 <_svfiprintf_r+0x32>
 8009218:	230c      	movs	r3, #12
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	b01d      	add	sp, #116	@ 0x74
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	2340      	movs	r3, #64	@ 0x40
 8009228:	616b      	str	r3, [r5, #20]
 800922a:	2300      	movs	r3, #0
 800922c:	9309      	str	r3, [sp, #36]	@ 0x24
 800922e:	2320      	movs	r3, #32
 8009230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009234:	f8cd 800c 	str.w	r8, [sp, #12]
 8009238:	2330      	movs	r3, #48	@ 0x30
 800923a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093d8 <_svfiprintf_r+0x1e4>
 800923e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009242:	f04f 0901 	mov.w	r9, #1
 8009246:	4623      	mov	r3, r4
 8009248:	469a      	mov	sl, r3
 800924a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800924e:	b10a      	cbz	r2, 8009254 <_svfiprintf_r+0x60>
 8009250:	2a25      	cmp	r2, #37	@ 0x25
 8009252:	d1f9      	bne.n	8009248 <_svfiprintf_r+0x54>
 8009254:	ebba 0b04 	subs.w	fp, sl, r4
 8009258:	d00b      	beq.n	8009272 <_svfiprintf_r+0x7e>
 800925a:	465b      	mov	r3, fp
 800925c:	4622      	mov	r2, r4
 800925e:	4629      	mov	r1, r5
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff ff6b 	bl	800913c <__ssputs_r>
 8009266:	3001      	adds	r0, #1
 8009268:	f000 80a7 	beq.w	80093ba <_svfiprintf_r+0x1c6>
 800926c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800926e:	445a      	add	r2, fp
 8009270:	9209      	str	r2, [sp, #36]	@ 0x24
 8009272:	f89a 3000 	ldrb.w	r3, [sl]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 809f 	beq.w	80093ba <_svfiprintf_r+0x1c6>
 800927c:	2300      	movs	r3, #0
 800927e:	f04f 32ff 	mov.w	r2, #4294967295
 8009282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009286:	f10a 0a01 	add.w	sl, sl, #1
 800928a:	9304      	str	r3, [sp, #16]
 800928c:	9307      	str	r3, [sp, #28]
 800928e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009292:	931a      	str	r3, [sp, #104]	@ 0x68
 8009294:	4654      	mov	r4, sl
 8009296:	2205      	movs	r2, #5
 8009298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929c:	484e      	ldr	r0, [pc, #312]	@ (80093d8 <_svfiprintf_r+0x1e4>)
 800929e:	f7f6 ffb7 	bl	8000210 <memchr>
 80092a2:	9a04      	ldr	r2, [sp, #16]
 80092a4:	b9d8      	cbnz	r0, 80092de <_svfiprintf_r+0xea>
 80092a6:	06d0      	lsls	r0, r2, #27
 80092a8:	bf44      	itt	mi
 80092aa:	2320      	movmi	r3, #32
 80092ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092b0:	0711      	lsls	r1, r2, #28
 80092b2:	bf44      	itt	mi
 80092b4:	232b      	movmi	r3, #43	@ 0x2b
 80092b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092ba:	f89a 3000 	ldrb.w	r3, [sl]
 80092be:	2b2a      	cmp	r3, #42	@ 0x2a
 80092c0:	d015      	beq.n	80092ee <_svfiprintf_r+0xfa>
 80092c2:	9a07      	ldr	r2, [sp, #28]
 80092c4:	4654      	mov	r4, sl
 80092c6:	2000      	movs	r0, #0
 80092c8:	f04f 0c0a 	mov.w	ip, #10
 80092cc:	4621      	mov	r1, r4
 80092ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d2:	3b30      	subs	r3, #48	@ 0x30
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d94b      	bls.n	8009370 <_svfiprintf_r+0x17c>
 80092d8:	b1b0      	cbz	r0, 8009308 <_svfiprintf_r+0x114>
 80092da:	9207      	str	r2, [sp, #28]
 80092dc:	e014      	b.n	8009308 <_svfiprintf_r+0x114>
 80092de:	eba0 0308 	sub.w	r3, r0, r8
 80092e2:	fa09 f303 	lsl.w	r3, r9, r3
 80092e6:	4313      	orrs	r3, r2
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	46a2      	mov	sl, r4
 80092ec:	e7d2      	b.n	8009294 <_svfiprintf_r+0xa0>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	1d19      	adds	r1, r3, #4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	9103      	str	r1, [sp, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bfbb      	ittet	lt
 80092fa:	425b      	neglt	r3, r3
 80092fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009300:	9307      	strge	r3, [sp, #28]
 8009302:	9307      	strlt	r3, [sp, #28]
 8009304:	bfb8      	it	lt
 8009306:	9204      	strlt	r2, [sp, #16]
 8009308:	7823      	ldrb	r3, [r4, #0]
 800930a:	2b2e      	cmp	r3, #46	@ 0x2e
 800930c:	d10a      	bne.n	8009324 <_svfiprintf_r+0x130>
 800930e:	7863      	ldrb	r3, [r4, #1]
 8009310:	2b2a      	cmp	r3, #42	@ 0x2a
 8009312:	d132      	bne.n	800937a <_svfiprintf_r+0x186>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	1d1a      	adds	r2, r3, #4
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	9203      	str	r2, [sp, #12]
 800931c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009320:	3402      	adds	r4, #2
 8009322:	9305      	str	r3, [sp, #20]
 8009324:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093e8 <_svfiprintf_r+0x1f4>
 8009328:	7821      	ldrb	r1, [r4, #0]
 800932a:	2203      	movs	r2, #3
 800932c:	4650      	mov	r0, sl
 800932e:	f7f6 ff6f 	bl	8000210 <memchr>
 8009332:	b138      	cbz	r0, 8009344 <_svfiprintf_r+0x150>
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	eba0 000a 	sub.w	r0, r0, sl
 800933a:	2240      	movs	r2, #64	@ 0x40
 800933c:	4082      	lsls	r2, r0
 800933e:	4313      	orrs	r3, r2
 8009340:	3401      	adds	r4, #1
 8009342:	9304      	str	r3, [sp, #16]
 8009344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009348:	4824      	ldr	r0, [pc, #144]	@ (80093dc <_svfiprintf_r+0x1e8>)
 800934a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800934e:	2206      	movs	r2, #6
 8009350:	f7f6 ff5e 	bl	8000210 <memchr>
 8009354:	2800      	cmp	r0, #0
 8009356:	d036      	beq.n	80093c6 <_svfiprintf_r+0x1d2>
 8009358:	4b21      	ldr	r3, [pc, #132]	@ (80093e0 <_svfiprintf_r+0x1ec>)
 800935a:	bb1b      	cbnz	r3, 80093a4 <_svfiprintf_r+0x1b0>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	3307      	adds	r3, #7
 8009360:	f023 0307 	bic.w	r3, r3, #7
 8009364:	3308      	adds	r3, #8
 8009366:	9303      	str	r3, [sp, #12]
 8009368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936a:	4433      	add	r3, r6
 800936c:	9309      	str	r3, [sp, #36]	@ 0x24
 800936e:	e76a      	b.n	8009246 <_svfiprintf_r+0x52>
 8009370:	fb0c 3202 	mla	r2, ip, r2, r3
 8009374:	460c      	mov	r4, r1
 8009376:	2001      	movs	r0, #1
 8009378:	e7a8      	b.n	80092cc <_svfiprintf_r+0xd8>
 800937a:	2300      	movs	r3, #0
 800937c:	3401      	adds	r4, #1
 800937e:	9305      	str	r3, [sp, #20]
 8009380:	4619      	mov	r1, r3
 8009382:	f04f 0c0a 	mov.w	ip, #10
 8009386:	4620      	mov	r0, r4
 8009388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800938c:	3a30      	subs	r2, #48	@ 0x30
 800938e:	2a09      	cmp	r2, #9
 8009390:	d903      	bls.n	800939a <_svfiprintf_r+0x1a6>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0c6      	beq.n	8009324 <_svfiprintf_r+0x130>
 8009396:	9105      	str	r1, [sp, #20]
 8009398:	e7c4      	b.n	8009324 <_svfiprintf_r+0x130>
 800939a:	fb0c 2101 	mla	r1, ip, r1, r2
 800939e:	4604      	mov	r4, r0
 80093a0:	2301      	movs	r3, #1
 80093a2:	e7f0      	b.n	8009386 <_svfiprintf_r+0x192>
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	462a      	mov	r2, r5
 80093aa:	4b0e      	ldr	r3, [pc, #56]	@ (80093e4 <_svfiprintf_r+0x1f0>)
 80093ac:	a904      	add	r1, sp, #16
 80093ae:	4638      	mov	r0, r7
 80093b0:	f7fd fe84 	bl	80070bc <_printf_float>
 80093b4:	1c42      	adds	r2, r0, #1
 80093b6:	4606      	mov	r6, r0
 80093b8:	d1d6      	bne.n	8009368 <_svfiprintf_r+0x174>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	065b      	lsls	r3, r3, #25
 80093be:	f53f af2d 	bmi.w	800921c <_svfiprintf_r+0x28>
 80093c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093c4:	e72c      	b.n	8009220 <_svfiprintf_r+0x2c>
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4b05      	ldr	r3, [pc, #20]	@ (80093e4 <_svfiprintf_r+0x1f0>)
 80093ce:	a904      	add	r1, sp, #16
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7fe f90b 	bl	80075ec <_printf_i>
 80093d6:	e7ed      	b.n	80093b4 <_svfiprintf_r+0x1c0>
 80093d8:	08009ea0 	.word	0x08009ea0
 80093dc:	08009eaa 	.word	0x08009eaa
 80093e0:	080070bd 	.word	0x080070bd
 80093e4:	0800913d 	.word	0x0800913d
 80093e8:	08009ea6 	.word	0x08009ea6

080093ec <__sflush_r>:
 80093ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f4:	0716      	lsls	r6, r2, #28
 80093f6:	4605      	mov	r5, r0
 80093f8:	460c      	mov	r4, r1
 80093fa:	d454      	bmi.n	80094a6 <__sflush_r+0xba>
 80093fc:	684b      	ldr	r3, [r1, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	dc02      	bgt.n	8009408 <__sflush_r+0x1c>
 8009402:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009404:	2b00      	cmp	r3, #0
 8009406:	dd48      	ble.n	800949a <__sflush_r+0xae>
 8009408:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800940a:	2e00      	cmp	r6, #0
 800940c:	d045      	beq.n	800949a <__sflush_r+0xae>
 800940e:	2300      	movs	r3, #0
 8009410:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009414:	682f      	ldr	r7, [r5, #0]
 8009416:	6a21      	ldr	r1, [r4, #32]
 8009418:	602b      	str	r3, [r5, #0]
 800941a:	d030      	beq.n	800947e <__sflush_r+0x92>
 800941c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800941e:	89a3      	ldrh	r3, [r4, #12]
 8009420:	0759      	lsls	r1, r3, #29
 8009422:	d505      	bpl.n	8009430 <__sflush_r+0x44>
 8009424:	6863      	ldr	r3, [r4, #4]
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800942a:	b10b      	cbz	r3, 8009430 <__sflush_r+0x44>
 800942c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800942e:	1ad2      	subs	r2, r2, r3
 8009430:	2300      	movs	r3, #0
 8009432:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009434:	6a21      	ldr	r1, [r4, #32]
 8009436:	4628      	mov	r0, r5
 8009438:	47b0      	blx	r6
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	d106      	bne.n	800944e <__sflush_r+0x62>
 8009440:	6829      	ldr	r1, [r5, #0]
 8009442:	291d      	cmp	r1, #29
 8009444:	d82b      	bhi.n	800949e <__sflush_r+0xb2>
 8009446:	4a2a      	ldr	r2, [pc, #168]	@ (80094f0 <__sflush_r+0x104>)
 8009448:	410a      	asrs	r2, r1
 800944a:	07d6      	lsls	r6, r2, #31
 800944c:	d427      	bmi.n	800949e <__sflush_r+0xb2>
 800944e:	2200      	movs	r2, #0
 8009450:	6062      	str	r2, [r4, #4]
 8009452:	04d9      	lsls	r1, r3, #19
 8009454:	6922      	ldr	r2, [r4, #16]
 8009456:	6022      	str	r2, [r4, #0]
 8009458:	d504      	bpl.n	8009464 <__sflush_r+0x78>
 800945a:	1c42      	adds	r2, r0, #1
 800945c:	d101      	bne.n	8009462 <__sflush_r+0x76>
 800945e:	682b      	ldr	r3, [r5, #0]
 8009460:	b903      	cbnz	r3, 8009464 <__sflush_r+0x78>
 8009462:	6560      	str	r0, [r4, #84]	@ 0x54
 8009464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009466:	602f      	str	r7, [r5, #0]
 8009468:	b1b9      	cbz	r1, 800949a <__sflush_r+0xae>
 800946a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800946e:	4299      	cmp	r1, r3
 8009470:	d002      	beq.n	8009478 <__sflush_r+0x8c>
 8009472:	4628      	mov	r0, r5
 8009474:	f7ff f9e0 	bl	8008838 <_free_r>
 8009478:	2300      	movs	r3, #0
 800947a:	6363      	str	r3, [r4, #52]	@ 0x34
 800947c:	e00d      	b.n	800949a <__sflush_r+0xae>
 800947e:	2301      	movs	r3, #1
 8009480:	4628      	mov	r0, r5
 8009482:	47b0      	blx	r6
 8009484:	4602      	mov	r2, r0
 8009486:	1c50      	adds	r0, r2, #1
 8009488:	d1c9      	bne.n	800941e <__sflush_r+0x32>
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0c6      	beq.n	800941e <__sflush_r+0x32>
 8009490:	2b1d      	cmp	r3, #29
 8009492:	d001      	beq.n	8009498 <__sflush_r+0xac>
 8009494:	2b16      	cmp	r3, #22
 8009496:	d11e      	bne.n	80094d6 <__sflush_r+0xea>
 8009498:	602f      	str	r7, [r5, #0]
 800949a:	2000      	movs	r0, #0
 800949c:	e022      	b.n	80094e4 <__sflush_r+0xf8>
 800949e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094a2:	b21b      	sxth	r3, r3
 80094a4:	e01b      	b.n	80094de <__sflush_r+0xf2>
 80094a6:	690f      	ldr	r7, [r1, #16]
 80094a8:	2f00      	cmp	r7, #0
 80094aa:	d0f6      	beq.n	800949a <__sflush_r+0xae>
 80094ac:	0793      	lsls	r3, r2, #30
 80094ae:	680e      	ldr	r6, [r1, #0]
 80094b0:	bf08      	it	eq
 80094b2:	694b      	ldreq	r3, [r1, #20]
 80094b4:	600f      	str	r7, [r1, #0]
 80094b6:	bf18      	it	ne
 80094b8:	2300      	movne	r3, #0
 80094ba:	eba6 0807 	sub.w	r8, r6, r7
 80094be:	608b      	str	r3, [r1, #8]
 80094c0:	f1b8 0f00 	cmp.w	r8, #0
 80094c4:	dde9      	ble.n	800949a <__sflush_r+0xae>
 80094c6:	6a21      	ldr	r1, [r4, #32]
 80094c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094ca:	4643      	mov	r3, r8
 80094cc:	463a      	mov	r2, r7
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b0      	blx	r6
 80094d2:	2800      	cmp	r0, #0
 80094d4:	dc08      	bgt.n	80094e8 <__sflush_r+0xfc>
 80094d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094de:	81a3      	strh	r3, [r4, #12]
 80094e0:	f04f 30ff 	mov.w	r0, #4294967295
 80094e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e8:	4407      	add	r7, r0
 80094ea:	eba8 0800 	sub.w	r8, r8, r0
 80094ee:	e7e7      	b.n	80094c0 <__sflush_r+0xd4>
 80094f0:	dfbffffe 	.word	0xdfbffffe

080094f4 <_fflush_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	690b      	ldr	r3, [r1, #16]
 80094f8:	4605      	mov	r5, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	b913      	cbnz	r3, 8009504 <_fflush_r+0x10>
 80094fe:	2500      	movs	r5, #0
 8009500:	4628      	mov	r0, r5
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	b118      	cbz	r0, 800950e <_fflush_r+0x1a>
 8009506:	6a03      	ldr	r3, [r0, #32]
 8009508:	b90b      	cbnz	r3, 800950e <_fflush_r+0x1a>
 800950a:	f7fe fa1b 	bl	8007944 <__sinit>
 800950e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d0f3      	beq.n	80094fe <_fflush_r+0xa>
 8009516:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009518:	07d0      	lsls	r0, r2, #31
 800951a:	d404      	bmi.n	8009526 <_fflush_r+0x32>
 800951c:	0599      	lsls	r1, r3, #22
 800951e:	d402      	bmi.n	8009526 <_fflush_r+0x32>
 8009520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009522:	f7fe fb3a 	bl	8007b9a <__retarget_lock_acquire_recursive>
 8009526:	4628      	mov	r0, r5
 8009528:	4621      	mov	r1, r4
 800952a:	f7ff ff5f 	bl	80093ec <__sflush_r>
 800952e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009530:	07da      	lsls	r2, r3, #31
 8009532:	4605      	mov	r5, r0
 8009534:	d4e4      	bmi.n	8009500 <_fflush_r+0xc>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	059b      	lsls	r3, r3, #22
 800953a:	d4e1      	bmi.n	8009500 <_fflush_r+0xc>
 800953c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800953e:	f7fe fb2d 	bl	8007b9c <__retarget_lock_release_recursive>
 8009542:	e7dd      	b.n	8009500 <_fflush_r+0xc>

08009544 <memmove>:
 8009544:	4288      	cmp	r0, r1
 8009546:	b510      	push	{r4, lr}
 8009548:	eb01 0402 	add.w	r4, r1, r2
 800954c:	d902      	bls.n	8009554 <memmove+0x10>
 800954e:	4284      	cmp	r4, r0
 8009550:	4623      	mov	r3, r4
 8009552:	d807      	bhi.n	8009564 <memmove+0x20>
 8009554:	1e43      	subs	r3, r0, #1
 8009556:	42a1      	cmp	r1, r4
 8009558:	d008      	beq.n	800956c <memmove+0x28>
 800955a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800955e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009562:	e7f8      	b.n	8009556 <memmove+0x12>
 8009564:	4402      	add	r2, r0
 8009566:	4601      	mov	r1, r0
 8009568:	428a      	cmp	r2, r1
 800956a:	d100      	bne.n	800956e <memmove+0x2a>
 800956c:	bd10      	pop	{r4, pc}
 800956e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009576:	e7f7      	b.n	8009568 <memmove+0x24>

08009578 <_sbrk_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d06      	ldr	r5, [pc, #24]	@ (8009594 <_sbrk_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f9 f8ce 	bl	8002724 <_sbrk>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_sbrk_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_sbrk_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	20000a4c 	.word	0x20000a4c

08009598 <memcpy>:
 8009598:	440a      	add	r2, r1
 800959a:	4291      	cmp	r1, r2
 800959c:	f100 33ff 	add.w	r3, r0, #4294967295
 80095a0:	d100      	bne.n	80095a4 <memcpy+0xc>
 80095a2:	4770      	bx	lr
 80095a4:	b510      	push	{r4, lr}
 80095a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ae:	4291      	cmp	r1, r2
 80095b0:	d1f9      	bne.n	80095a6 <memcpy+0xe>
 80095b2:	bd10      	pop	{r4, pc}

080095b4 <__assert_func>:
 80095b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095b6:	4614      	mov	r4, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <__assert_func+0x2c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4605      	mov	r5, r0
 80095c0:	68d8      	ldr	r0, [r3, #12]
 80095c2:	b954      	cbnz	r4, 80095da <__assert_func+0x26>
 80095c4:	4b07      	ldr	r3, [pc, #28]	@ (80095e4 <__assert_func+0x30>)
 80095c6:	461c      	mov	r4, r3
 80095c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095cc:	9100      	str	r1, [sp, #0]
 80095ce:	462b      	mov	r3, r5
 80095d0:	4905      	ldr	r1, [pc, #20]	@ (80095e8 <__assert_func+0x34>)
 80095d2:	f000 f86f 	bl	80096b4 <fiprintf>
 80095d6:	f000 f87f 	bl	80096d8 <abort>
 80095da:	4b04      	ldr	r3, [pc, #16]	@ (80095ec <__assert_func+0x38>)
 80095dc:	e7f4      	b.n	80095c8 <__assert_func+0x14>
 80095de:	bf00      	nop
 80095e0:	20000024 	.word	0x20000024
 80095e4:	08009ef6 	.word	0x08009ef6
 80095e8:	08009ec8 	.word	0x08009ec8
 80095ec:	08009ebb 	.word	0x08009ebb

080095f0 <_calloc_r>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	fba1 5402 	umull	r5, r4, r1, r2
 80095f6:	b93c      	cbnz	r4, 8009608 <_calloc_r+0x18>
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7ff f991 	bl	8008920 <_malloc_r>
 80095fe:	4606      	mov	r6, r0
 8009600:	b928      	cbnz	r0, 800960e <_calloc_r+0x1e>
 8009602:	2600      	movs	r6, #0
 8009604:	4630      	mov	r0, r6
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	220c      	movs	r2, #12
 800960a:	6002      	str	r2, [r0, #0]
 800960c:	e7f9      	b.n	8009602 <_calloc_r+0x12>
 800960e:	462a      	mov	r2, r5
 8009610:	4621      	mov	r1, r4
 8009612:	f7fe fa44 	bl	8007a9e <memset>
 8009616:	e7f5      	b.n	8009604 <_calloc_r+0x14>

08009618 <__ascii_mbtowc>:
 8009618:	b082      	sub	sp, #8
 800961a:	b901      	cbnz	r1, 800961e <__ascii_mbtowc+0x6>
 800961c:	a901      	add	r1, sp, #4
 800961e:	b142      	cbz	r2, 8009632 <__ascii_mbtowc+0x1a>
 8009620:	b14b      	cbz	r3, 8009636 <__ascii_mbtowc+0x1e>
 8009622:	7813      	ldrb	r3, [r2, #0]
 8009624:	600b      	str	r3, [r1, #0]
 8009626:	7812      	ldrb	r2, [r2, #0]
 8009628:	1e10      	subs	r0, r2, #0
 800962a:	bf18      	it	ne
 800962c:	2001      	movne	r0, #1
 800962e:	b002      	add	sp, #8
 8009630:	4770      	bx	lr
 8009632:	4610      	mov	r0, r2
 8009634:	e7fb      	b.n	800962e <__ascii_mbtowc+0x16>
 8009636:	f06f 0001 	mvn.w	r0, #1
 800963a:	e7f8      	b.n	800962e <__ascii_mbtowc+0x16>

0800963c <_realloc_r>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	4680      	mov	r8, r0
 8009642:	4615      	mov	r5, r2
 8009644:	460c      	mov	r4, r1
 8009646:	b921      	cbnz	r1, 8009652 <_realloc_r+0x16>
 8009648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964c:	4611      	mov	r1, r2
 800964e:	f7ff b967 	b.w	8008920 <_malloc_r>
 8009652:	b92a      	cbnz	r2, 8009660 <_realloc_r+0x24>
 8009654:	f7ff f8f0 	bl	8008838 <_free_r>
 8009658:	2400      	movs	r4, #0
 800965a:	4620      	mov	r0, r4
 800965c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009660:	f000 f841 	bl	80096e6 <_malloc_usable_size_r>
 8009664:	4285      	cmp	r5, r0
 8009666:	4606      	mov	r6, r0
 8009668:	d802      	bhi.n	8009670 <_realloc_r+0x34>
 800966a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800966e:	d8f4      	bhi.n	800965a <_realloc_r+0x1e>
 8009670:	4629      	mov	r1, r5
 8009672:	4640      	mov	r0, r8
 8009674:	f7ff f954 	bl	8008920 <_malloc_r>
 8009678:	4607      	mov	r7, r0
 800967a:	2800      	cmp	r0, #0
 800967c:	d0ec      	beq.n	8009658 <_realloc_r+0x1c>
 800967e:	42b5      	cmp	r5, r6
 8009680:	462a      	mov	r2, r5
 8009682:	4621      	mov	r1, r4
 8009684:	bf28      	it	cs
 8009686:	4632      	movcs	r2, r6
 8009688:	f7ff ff86 	bl	8009598 <memcpy>
 800968c:	4621      	mov	r1, r4
 800968e:	4640      	mov	r0, r8
 8009690:	f7ff f8d2 	bl	8008838 <_free_r>
 8009694:	463c      	mov	r4, r7
 8009696:	e7e0      	b.n	800965a <_realloc_r+0x1e>

08009698 <__ascii_wctomb>:
 8009698:	4603      	mov	r3, r0
 800969a:	4608      	mov	r0, r1
 800969c:	b141      	cbz	r1, 80096b0 <__ascii_wctomb+0x18>
 800969e:	2aff      	cmp	r2, #255	@ 0xff
 80096a0:	d904      	bls.n	80096ac <__ascii_wctomb+0x14>
 80096a2:	228a      	movs	r2, #138	@ 0x8a
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	f04f 30ff 	mov.w	r0, #4294967295
 80096aa:	4770      	bx	lr
 80096ac:	700a      	strb	r2, [r1, #0]
 80096ae:	2001      	movs	r0, #1
 80096b0:	4770      	bx	lr
	...

080096b4 <fiprintf>:
 80096b4:	b40e      	push	{r1, r2, r3}
 80096b6:	b503      	push	{r0, r1, lr}
 80096b8:	4601      	mov	r1, r0
 80096ba:	ab03      	add	r3, sp, #12
 80096bc:	4805      	ldr	r0, [pc, #20]	@ (80096d4 <fiprintf+0x20>)
 80096be:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	f000 f83f 	bl	8009748 <_vfiprintf_r>
 80096ca:	b002      	add	sp, #8
 80096cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d0:	b003      	add	sp, #12
 80096d2:	4770      	bx	lr
 80096d4:	20000024 	.word	0x20000024

080096d8 <abort>:
 80096d8:	b508      	push	{r3, lr}
 80096da:	2006      	movs	r0, #6
 80096dc:	f000 fa08 	bl	8009af0 <raise>
 80096e0:	2001      	movs	r0, #1
 80096e2:	f7f8 ffa6 	bl	8002632 <_exit>

080096e6 <_malloc_usable_size_r>:
 80096e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ea:	1f18      	subs	r0, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bfbc      	itt	lt
 80096f0:	580b      	ldrlt	r3, [r1, r0]
 80096f2:	18c0      	addlt	r0, r0, r3
 80096f4:	4770      	bx	lr

080096f6 <__sfputc_r>:
 80096f6:	6893      	ldr	r3, [r2, #8]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	b410      	push	{r4}
 80096fe:	6093      	str	r3, [r2, #8]
 8009700:	da08      	bge.n	8009714 <__sfputc_r+0x1e>
 8009702:	6994      	ldr	r4, [r2, #24]
 8009704:	42a3      	cmp	r3, r4
 8009706:	db01      	blt.n	800970c <__sfputc_r+0x16>
 8009708:	290a      	cmp	r1, #10
 800970a:	d103      	bne.n	8009714 <__sfputc_r+0x1e>
 800970c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009710:	f000 b932 	b.w	8009978 <__swbuf_r>
 8009714:	6813      	ldr	r3, [r2, #0]
 8009716:	1c58      	adds	r0, r3, #1
 8009718:	6010      	str	r0, [r2, #0]
 800971a:	7019      	strb	r1, [r3, #0]
 800971c:	4608      	mov	r0, r1
 800971e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009722:	4770      	bx	lr

08009724 <__sfputs_r>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	4606      	mov	r6, r0
 8009728:	460f      	mov	r7, r1
 800972a:	4614      	mov	r4, r2
 800972c:	18d5      	adds	r5, r2, r3
 800972e:	42ac      	cmp	r4, r5
 8009730:	d101      	bne.n	8009736 <__sfputs_r+0x12>
 8009732:	2000      	movs	r0, #0
 8009734:	e007      	b.n	8009746 <__sfputs_r+0x22>
 8009736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973a:	463a      	mov	r2, r7
 800973c:	4630      	mov	r0, r6
 800973e:	f7ff ffda 	bl	80096f6 <__sfputc_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d1f3      	bne.n	800972e <__sfputs_r+0xa>
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009748 <_vfiprintf_r>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	460d      	mov	r5, r1
 800974e:	b09d      	sub	sp, #116	@ 0x74
 8009750:	4614      	mov	r4, r2
 8009752:	4698      	mov	r8, r3
 8009754:	4606      	mov	r6, r0
 8009756:	b118      	cbz	r0, 8009760 <_vfiprintf_r+0x18>
 8009758:	6a03      	ldr	r3, [r0, #32]
 800975a:	b90b      	cbnz	r3, 8009760 <_vfiprintf_r+0x18>
 800975c:	f7fe f8f2 	bl	8007944 <__sinit>
 8009760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009762:	07d9      	lsls	r1, r3, #31
 8009764:	d405      	bmi.n	8009772 <_vfiprintf_r+0x2a>
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	059a      	lsls	r2, r3, #22
 800976a:	d402      	bmi.n	8009772 <_vfiprintf_r+0x2a>
 800976c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800976e:	f7fe fa14 	bl	8007b9a <__retarget_lock_acquire_recursive>
 8009772:	89ab      	ldrh	r3, [r5, #12]
 8009774:	071b      	lsls	r3, r3, #28
 8009776:	d501      	bpl.n	800977c <_vfiprintf_r+0x34>
 8009778:	692b      	ldr	r3, [r5, #16]
 800977a:	b99b      	cbnz	r3, 80097a4 <_vfiprintf_r+0x5c>
 800977c:	4629      	mov	r1, r5
 800977e:	4630      	mov	r0, r6
 8009780:	f000 f938 	bl	80099f4 <__swsetup_r>
 8009784:	b170      	cbz	r0, 80097a4 <_vfiprintf_r+0x5c>
 8009786:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009788:	07dc      	lsls	r4, r3, #31
 800978a:	d504      	bpl.n	8009796 <_vfiprintf_r+0x4e>
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	b01d      	add	sp, #116	@ 0x74
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	0598      	lsls	r0, r3, #22
 800979a:	d4f7      	bmi.n	800978c <_vfiprintf_r+0x44>
 800979c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800979e:	f7fe f9fd 	bl	8007b9c <__retarget_lock_release_recursive>
 80097a2:	e7f3      	b.n	800978c <_vfiprintf_r+0x44>
 80097a4:	2300      	movs	r3, #0
 80097a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80097a8:	2320      	movs	r3, #32
 80097aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80097b2:	2330      	movs	r3, #48	@ 0x30
 80097b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009964 <_vfiprintf_r+0x21c>
 80097b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097bc:	f04f 0901 	mov.w	r9, #1
 80097c0:	4623      	mov	r3, r4
 80097c2:	469a      	mov	sl, r3
 80097c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c8:	b10a      	cbz	r2, 80097ce <_vfiprintf_r+0x86>
 80097ca:	2a25      	cmp	r2, #37	@ 0x25
 80097cc:	d1f9      	bne.n	80097c2 <_vfiprintf_r+0x7a>
 80097ce:	ebba 0b04 	subs.w	fp, sl, r4
 80097d2:	d00b      	beq.n	80097ec <_vfiprintf_r+0xa4>
 80097d4:	465b      	mov	r3, fp
 80097d6:	4622      	mov	r2, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	4630      	mov	r0, r6
 80097dc:	f7ff ffa2 	bl	8009724 <__sfputs_r>
 80097e0:	3001      	adds	r0, #1
 80097e2:	f000 80a7 	beq.w	8009934 <_vfiprintf_r+0x1ec>
 80097e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097e8:	445a      	add	r2, fp
 80097ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80097ec:	f89a 3000 	ldrb.w	r3, [sl]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 809f 	beq.w	8009934 <_vfiprintf_r+0x1ec>
 80097f6:	2300      	movs	r3, #0
 80097f8:	f04f 32ff 	mov.w	r2, #4294967295
 80097fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009800:	f10a 0a01 	add.w	sl, sl, #1
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	9307      	str	r3, [sp, #28]
 8009808:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800980c:	931a      	str	r3, [sp, #104]	@ 0x68
 800980e:	4654      	mov	r4, sl
 8009810:	2205      	movs	r2, #5
 8009812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009816:	4853      	ldr	r0, [pc, #332]	@ (8009964 <_vfiprintf_r+0x21c>)
 8009818:	f7f6 fcfa 	bl	8000210 <memchr>
 800981c:	9a04      	ldr	r2, [sp, #16]
 800981e:	b9d8      	cbnz	r0, 8009858 <_vfiprintf_r+0x110>
 8009820:	06d1      	lsls	r1, r2, #27
 8009822:	bf44      	itt	mi
 8009824:	2320      	movmi	r3, #32
 8009826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800982a:	0713      	lsls	r3, r2, #28
 800982c:	bf44      	itt	mi
 800982e:	232b      	movmi	r3, #43	@ 0x2b
 8009830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009834:	f89a 3000 	ldrb.w	r3, [sl]
 8009838:	2b2a      	cmp	r3, #42	@ 0x2a
 800983a:	d015      	beq.n	8009868 <_vfiprintf_r+0x120>
 800983c:	9a07      	ldr	r2, [sp, #28]
 800983e:	4654      	mov	r4, sl
 8009840:	2000      	movs	r0, #0
 8009842:	f04f 0c0a 	mov.w	ip, #10
 8009846:	4621      	mov	r1, r4
 8009848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800984c:	3b30      	subs	r3, #48	@ 0x30
 800984e:	2b09      	cmp	r3, #9
 8009850:	d94b      	bls.n	80098ea <_vfiprintf_r+0x1a2>
 8009852:	b1b0      	cbz	r0, 8009882 <_vfiprintf_r+0x13a>
 8009854:	9207      	str	r2, [sp, #28]
 8009856:	e014      	b.n	8009882 <_vfiprintf_r+0x13a>
 8009858:	eba0 0308 	sub.w	r3, r0, r8
 800985c:	fa09 f303 	lsl.w	r3, r9, r3
 8009860:	4313      	orrs	r3, r2
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	46a2      	mov	sl, r4
 8009866:	e7d2      	b.n	800980e <_vfiprintf_r+0xc6>
 8009868:	9b03      	ldr	r3, [sp, #12]
 800986a:	1d19      	adds	r1, r3, #4
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	9103      	str	r1, [sp, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfbb      	ittet	lt
 8009874:	425b      	neglt	r3, r3
 8009876:	f042 0202 	orrlt.w	r2, r2, #2
 800987a:	9307      	strge	r3, [sp, #28]
 800987c:	9307      	strlt	r3, [sp, #28]
 800987e:	bfb8      	it	lt
 8009880:	9204      	strlt	r2, [sp, #16]
 8009882:	7823      	ldrb	r3, [r4, #0]
 8009884:	2b2e      	cmp	r3, #46	@ 0x2e
 8009886:	d10a      	bne.n	800989e <_vfiprintf_r+0x156>
 8009888:	7863      	ldrb	r3, [r4, #1]
 800988a:	2b2a      	cmp	r3, #42	@ 0x2a
 800988c:	d132      	bne.n	80098f4 <_vfiprintf_r+0x1ac>
 800988e:	9b03      	ldr	r3, [sp, #12]
 8009890:	1d1a      	adds	r2, r3, #4
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	9203      	str	r2, [sp, #12]
 8009896:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800989a:	3402      	adds	r4, #2
 800989c:	9305      	str	r3, [sp, #20]
 800989e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009974 <_vfiprintf_r+0x22c>
 80098a2:	7821      	ldrb	r1, [r4, #0]
 80098a4:	2203      	movs	r2, #3
 80098a6:	4650      	mov	r0, sl
 80098a8:	f7f6 fcb2 	bl	8000210 <memchr>
 80098ac:	b138      	cbz	r0, 80098be <_vfiprintf_r+0x176>
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	eba0 000a 	sub.w	r0, r0, sl
 80098b4:	2240      	movs	r2, #64	@ 0x40
 80098b6:	4082      	lsls	r2, r0
 80098b8:	4313      	orrs	r3, r2
 80098ba:	3401      	adds	r4, #1
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c2:	4829      	ldr	r0, [pc, #164]	@ (8009968 <_vfiprintf_r+0x220>)
 80098c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098c8:	2206      	movs	r2, #6
 80098ca:	f7f6 fca1 	bl	8000210 <memchr>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d03f      	beq.n	8009952 <_vfiprintf_r+0x20a>
 80098d2:	4b26      	ldr	r3, [pc, #152]	@ (800996c <_vfiprintf_r+0x224>)
 80098d4:	bb1b      	cbnz	r3, 800991e <_vfiprintf_r+0x1d6>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	3307      	adds	r3, #7
 80098da:	f023 0307 	bic.w	r3, r3, #7
 80098de:	3308      	adds	r3, #8
 80098e0:	9303      	str	r3, [sp, #12]
 80098e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e4:	443b      	add	r3, r7
 80098e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80098e8:	e76a      	b.n	80097c0 <_vfiprintf_r+0x78>
 80098ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ee:	460c      	mov	r4, r1
 80098f0:	2001      	movs	r0, #1
 80098f2:	e7a8      	b.n	8009846 <_vfiprintf_r+0xfe>
 80098f4:	2300      	movs	r3, #0
 80098f6:	3401      	adds	r4, #1
 80098f8:	9305      	str	r3, [sp, #20]
 80098fa:	4619      	mov	r1, r3
 80098fc:	f04f 0c0a 	mov.w	ip, #10
 8009900:	4620      	mov	r0, r4
 8009902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009906:	3a30      	subs	r2, #48	@ 0x30
 8009908:	2a09      	cmp	r2, #9
 800990a:	d903      	bls.n	8009914 <_vfiprintf_r+0x1cc>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0c6      	beq.n	800989e <_vfiprintf_r+0x156>
 8009910:	9105      	str	r1, [sp, #20]
 8009912:	e7c4      	b.n	800989e <_vfiprintf_r+0x156>
 8009914:	fb0c 2101 	mla	r1, ip, r1, r2
 8009918:	4604      	mov	r4, r0
 800991a:	2301      	movs	r3, #1
 800991c:	e7f0      	b.n	8009900 <_vfiprintf_r+0x1b8>
 800991e:	ab03      	add	r3, sp, #12
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	462a      	mov	r2, r5
 8009924:	4b12      	ldr	r3, [pc, #72]	@ (8009970 <_vfiprintf_r+0x228>)
 8009926:	a904      	add	r1, sp, #16
 8009928:	4630      	mov	r0, r6
 800992a:	f7fd fbc7 	bl	80070bc <_printf_float>
 800992e:	4607      	mov	r7, r0
 8009930:	1c78      	adds	r0, r7, #1
 8009932:	d1d6      	bne.n	80098e2 <_vfiprintf_r+0x19a>
 8009934:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009936:	07d9      	lsls	r1, r3, #31
 8009938:	d405      	bmi.n	8009946 <_vfiprintf_r+0x1fe>
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	059a      	lsls	r2, r3, #22
 800993e:	d402      	bmi.n	8009946 <_vfiprintf_r+0x1fe>
 8009940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009942:	f7fe f92b 	bl	8007b9c <__retarget_lock_release_recursive>
 8009946:	89ab      	ldrh	r3, [r5, #12]
 8009948:	065b      	lsls	r3, r3, #25
 800994a:	f53f af1f 	bmi.w	800978c <_vfiprintf_r+0x44>
 800994e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009950:	e71e      	b.n	8009790 <_vfiprintf_r+0x48>
 8009952:	ab03      	add	r3, sp, #12
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	462a      	mov	r2, r5
 8009958:	4b05      	ldr	r3, [pc, #20]	@ (8009970 <_vfiprintf_r+0x228>)
 800995a:	a904      	add	r1, sp, #16
 800995c:	4630      	mov	r0, r6
 800995e:	f7fd fe45 	bl	80075ec <_printf_i>
 8009962:	e7e4      	b.n	800992e <_vfiprintf_r+0x1e6>
 8009964:	08009ea0 	.word	0x08009ea0
 8009968:	08009eaa 	.word	0x08009eaa
 800996c:	080070bd 	.word	0x080070bd
 8009970:	08009725 	.word	0x08009725
 8009974:	08009ea6 	.word	0x08009ea6

08009978 <__swbuf_r>:
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997a:	460e      	mov	r6, r1
 800997c:	4614      	mov	r4, r2
 800997e:	4605      	mov	r5, r0
 8009980:	b118      	cbz	r0, 800998a <__swbuf_r+0x12>
 8009982:	6a03      	ldr	r3, [r0, #32]
 8009984:	b90b      	cbnz	r3, 800998a <__swbuf_r+0x12>
 8009986:	f7fd ffdd 	bl	8007944 <__sinit>
 800998a:	69a3      	ldr	r3, [r4, #24]
 800998c:	60a3      	str	r3, [r4, #8]
 800998e:	89a3      	ldrh	r3, [r4, #12]
 8009990:	071a      	lsls	r2, r3, #28
 8009992:	d501      	bpl.n	8009998 <__swbuf_r+0x20>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	b943      	cbnz	r3, 80099aa <__swbuf_r+0x32>
 8009998:	4621      	mov	r1, r4
 800999a:	4628      	mov	r0, r5
 800999c:	f000 f82a 	bl	80099f4 <__swsetup_r>
 80099a0:	b118      	cbz	r0, 80099aa <__swbuf_r+0x32>
 80099a2:	f04f 37ff 	mov.w	r7, #4294967295
 80099a6:	4638      	mov	r0, r7
 80099a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	6922      	ldr	r2, [r4, #16]
 80099ae:	1a98      	subs	r0, r3, r2
 80099b0:	6963      	ldr	r3, [r4, #20]
 80099b2:	b2f6      	uxtb	r6, r6
 80099b4:	4283      	cmp	r3, r0
 80099b6:	4637      	mov	r7, r6
 80099b8:	dc05      	bgt.n	80099c6 <__swbuf_r+0x4e>
 80099ba:	4621      	mov	r1, r4
 80099bc:	4628      	mov	r0, r5
 80099be:	f7ff fd99 	bl	80094f4 <_fflush_r>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d1ed      	bne.n	80099a2 <__swbuf_r+0x2a>
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	60a3      	str	r3, [r4, #8]
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	6022      	str	r2, [r4, #0]
 80099d2:	701e      	strb	r6, [r3, #0]
 80099d4:	6962      	ldr	r2, [r4, #20]
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	429a      	cmp	r2, r3
 80099da:	d004      	beq.n	80099e6 <__swbuf_r+0x6e>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	07db      	lsls	r3, r3, #31
 80099e0:	d5e1      	bpl.n	80099a6 <__swbuf_r+0x2e>
 80099e2:	2e0a      	cmp	r6, #10
 80099e4:	d1df      	bne.n	80099a6 <__swbuf_r+0x2e>
 80099e6:	4621      	mov	r1, r4
 80099e8:	4628      	mov	r0, r5
 80099ea:	f7ff fd83 	bl	80094f4 <_fflush_r>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d0d9      	beq.n	80099a6 <__swbuf_r+0x2e>
 80099f2:	e7d6      	b.n	80099a2 <__swbuf_r+0x2a>

080099f4 <__swsetup_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4b29      	ldr	r3, [pc, #164]	@ (8009a9c <__swsetup_r+0xa8>)
 80099f8:	4605      	mov	r5, r0
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	460c      	mov	r4, r1
 80099fe:	b118      	cbz	r0, 8009a08 <__swsetup_r+0x14>
 8009a00:	6a03      	ldr	r3, [r0, #32]
 8009a02:	b90b      	cbnz	r3, 8009a08 <__swsetup_r+0x14>
 8009a04:	f7fd ff9e 	bl	8007944 <__sinit>
 8009a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a0c:	0719      	lsls	r1, r3, #28
 8009a0e:	d422      	bmi.n	8009a56 <__swsetup_r+0x62>
 8009a10:	06da      	lsls	r2, r3, #27
 8009a12:	d407      	bmi.n	8009a24 <__swsetup_r+0x30>
 8009a14:	2209      	movs	r2, #9
 8009a16:	602a      	str	r2, [r5, #0]
 8009a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a22:	e033      	b.n	8009a8c <__swsetup_r+0x98>
 8009a24:	0758      	lsls	r0, r3, #29
 8009a26:	d512      	bpl.n	8009a4e <__swsetup_r+0x5a>
 8009a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a2a:	b141      	cbz	r1, 8009a3e <__swsetup_r+0x4a>
 8009a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a30:	4299      	cmp	r1, r3
 8009a32:	d002      	beq.n	8009a3a <__swsetup_r+0x46>
 8009a34:	4628      	mov	r0, r5
 8009a36:	f7fe feff 	bl	8008838 <_free_r>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	2300      	movs	r3, #0
 8009a48:	6063      	str	r3, [r4, #4]
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f043 0308 	orr.w	r3, r3, #8
 8009a54:	81a3      	strh	r3, [r4, #12]
 8009a56:	6923      	ldr	r3, [r4, #16]
 8009a58:	b94b      	cbnz	r3, 8009a6e <__swsetup_r+0x7a>
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a64:	d003      	beq.n	8009a6e <__swsetup_r+0x7a>
 8009a66:	4621      	mov	r1, r4
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f000 f883 	bl	8009b74 <__smakebuf_r>
 8009a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a72:	f013 0201 	ands.w	r2, r3, #1
 8009a76:	d00a      	beq.n	8009a8e <__swsetup_r+0x9a>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	60a2      	str	r2, [r4, #8]
 8009a7c:	6962      	ldr	r2, [r4, #20]
 8009a7e:	4252      	negs	r2, r2
 8009a80:	61a2      	str	r2, [r4, #24]
 8009a82:	6922      	ldr	r2, [r4, #16]
 8009a84:	b942      	cbnz	r2, 8009a98 <__swsetup_r+0xa4>
 8009a86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a8a:	d1c5      	bne.n	8009a18 <__swsetup_r+0x24>
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	0799      	lsls	r1, r3, #30
 8009a90:	bf58      	it	pl
 8009a92:	6962      	ldrpl	r2, [r4, #20]
 8009a94:	60a2      	str	r2, [r4, #8]
 8009a96:	e7f4      	b.n	8009a82 <__swsetup_r+0x8e>
 8009a98:	2000      	movs	r0, #0
 8009a9a:	e7f7      	b.n	8009a8c <__swsetup_r+0x98>
 8009a9c:	20000024 	.word	0x20000024

08009aa0 <_raise_r>:
 8009aa0:	291f      	cmp	r1, #31
 8009aa2:	b538      	push	{r3, r4, r5, lr}
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	d904      	bls.n	8009ab4 <_raise_r+0x14>
 8009aaa:	2316      	movs	r3, #22
 8009aac:	6003      	str	r3, [r0, #0]
 8009aae:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ab6:	b112      	cbz	r2, 8009abe <_raise_r+0x1e>
 8009ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009abc:	b94b      	cbnz	r3, 8009ad2 <_raise_r+0x32>
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f000 f830 	bl	8009b24 <_getpid_r>
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	4628      	mov	r0, r5
 8009aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ace:	f000 b817 	b.w	8009b00 <_kill_r>
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d00a      	beq.n	8009aec <_raise_r+0x4c>
 8009ad6:	1c59      	adds	r1, r3, #1
 8009ad8:	d103      	bne.n	8009ae2 <_raise_r+0x42>
 8009ada:	2316      	movs	r3, #22
 8009adc:	6003      	str	r3, [r0, #0]
 8009ade:	2001      	movs	r0, #1
 8009ae0:	e7e7      	b.n	8009ab2 <_raise_r+0x12>
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ae8:	4620      	mov	r0, r4
 8009aea:	4798      	blx	r3
 8009aec:	2000      	movs	r0, #0
 8009aee:	e7e0      	b.n	8009ab2 <_raise_r+0x12>

08009af0 <raise>:
 8009af0:	4b02      	ldr	r3, [pc, #8]	@ (8009afc <raise+0xc>)
 8009af2:	4601      	mov	r1, r0
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	f7ff bfd3 	b.w	8009aa0 <_raise_r>
 8009afa:	bf00      	nop
 8009afc:	20000024 	.word	0x20000024

08009b00 <_kill_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d07      	ldr	r5, [pc, #28]	@ (8009b20 <_kill_r+0x20>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	602b      	str	r3, [r5, #0]
 8009b0e:	f7f8 fd80 	bl	8002612 <_kill>
 8009b12:	1c43      	adds	r3, r0, #1
 8009b14:	d102      	bne.n	8009b1c <_kill_r+0x1c>
 8009b16:	682b      	ldr	r3, [r5, #0]
 8009b18:	b103      	cbz	r3, 8009b1c <_kill_r+0x1c>
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	bd38      	pop	{r3, r4, r5, pc}
 8009b1e:	bf00      	nop
 8009b20:	20000a4c 	.word	0x20000a4c

08009b24 <_getpid_r>:
 8009b24:	f7f8 bd6d 	b.w	8002602 <_getpid>

08009b28 <__swhatbuf_r>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	2900      	cmp	r1, #0
 8009b32:	b096      	sub	sp, #88	@ 0x58
 8009b34:	4615      	mov	r5, r2
 8009b36:	461e      	mov	r6, r3
 8009b38:	da0d      	bge.n	8009b56 <__swhatbuf_r+0x2e>
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b40:	f04f 0100 	mov.w	r1, #0
 8009b44:	bf14      	ite	ne
 8009b46:	2340      	movne	r3, #64	@ 0x40
 8009b48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	6031      	str	r1, [r6, #0]
 8009b50:	602b      	str	r3, [r5, #0]
 8009b52:	b016      	add	sp, #88	@ 0x58
 8009b54:	bd70      	pop	{r4, r5, r6, pc}
 8009b56:	466a      	mov	r2, sp
 8009b58:	f000 f848 	bl	8009bec <_fstat_r>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	dbec      	blt.n	8009b3a <__swhatbuf_r+0x12>
 8009b60:	9901      	ldr	r1, [sp, #4]
 8009b62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b6a:	4259      	negs	r1, r3
 8009b6c:	4159      	adcs	r1, r3
 8009b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b72:	e7eb      	b.n	8009b4c <__swhatbuf_r+0x24>

08009b74 <__smakebuf_r>:
 8009b74:	898b      	ldrh	r3, [r1, #12]
 8009b76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b78:	079d      	lsls	r5, r3, #30
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	d507      	bpl.n	8009b90 <__smakebuf_r+0x1c>
 8009b80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	6123      	str	r3, [r4, #16]
 8009b88:	2301      	movs	r3, #1
 8009b8a:	6163      	str	r3, [r4, #20]
 8009b8c:	b003      	add	sp, #12
 8009b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b90:	ab01      	add	r3, sp, #4
 8009b92:	466a      	mov	r2, sp
 8009b94:	f7ff ffc8 	bl	8009b28 <__swhatbuf_r>
 8009b98:	9f00      	ldr	r7, [sp, #0]
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f7fe febe 	bl	8008920 <_malloc_r>
 8009ba4:	b948      	cbnz	r0, 8009bba <__smakebuf_r+0x46>
 8009ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009baa:	059a      	lsls	r2, r3, #22
 8009bac:	d4ee      	bmi.n	8009b8c <__smakebuf_r+0x18>
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	f043 0302 	orr.w	r3, r3, #2
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	e7e2      	b.n	8009b80 <__smakebuf_r+0xc>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	6020      	str	r0, [r4, #0]
 8009bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bc2:	81a3      	strh	r3, [r4, #12]
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bca:	b15b      	cbz	r3, 8009be4 <__smakebuf_r+0x70>
 8009bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f000 f81d 	bl	8009c10 <_isatty_r>
 8009bd6:	b128      	cbz	r0, 8009be4 <__smakebuf_r+0x70>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	431d      	orrs	r5, r3
 8009be8:	81a5      	strh	r5, [r4, #12]
 8009bea:	e7cf      	b.n	8009b8c <__smakebuf_r+0x18>

08009bec <_fstat_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d07      	ldr	r5, [pc, #28]	@ (8009c0c <_fstat_r+0x20>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	f7f8 fd6a 	bl	80026d2 <_fstat>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	d102      	bne.n	8009c08 <_fstat_r+0x1c>
 8009c02:	682b      	ldr	r3, [r5, #0]
 8009c04:	b103      	cbz	r3, 8009c08 <_fstat_r+0x1c>
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000a4c 	.word	0x20000a4c

08009c10 <_isatty_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d06      	ldr	r5, [pc, #24]	@ (8009c2c <_isatty_r+0x1c>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7f8 fd69 	bl	80026f2 <_isatty>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_isatty_r+0x1a>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_isatty_r+0x1a>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	20000a4c 	.word	0x20000a4c

08009c30 <_init>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr

08009c3c <_fini>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr
